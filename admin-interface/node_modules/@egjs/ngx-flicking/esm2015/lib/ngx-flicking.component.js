/**
 * Copyright (c) 2015 NAVER Corp.
 * egjs projects are licensed under the MIT license
 */
import { Component, Input, ElementRef, Output, EventEmitter, ViewEncapsulation, QueryList, ContentChildren, Renderer2, HostBinding, Inject, PLATFORM_ID } from "@angular/core";
import { isPlatformBrowser } from "@angular/common";
import VanillaFlicking, { sync, getDefaultCameraTransform, VirtualRenderingStrategy, NormalRenderingStrategy, range, CLASS } from "@egjs/flicking";
import ListDiffer from "@egjs/list-differ";
import { EVENT_NAMES } from "./consts";
import FlickingInterface from "./FlickingInterface";
import { NgxFlickingPanel } from "./ngx-flicking-panel.directive";
import NgxRenderer from "./NgxRenderer";
import NgxElementProvider from "./NgxElementProvider";
export class NgxFlickingComponent extends FlickingInterface {
    constructor(elRef, renderer, platformId) {
        super();
        this.options = {};
        this.plugins = [];
        this.hideBeforeInit = false;
        this._pluginsDiffer = new ListDiffer();
        this._elementDiffer = null;
        this._elRef = elRef;
        this._ngxRenderer = renderer;
        this._platformId = platformId;
        this._vanillaFlicking = null;
        EVENT_NAMES.forEach(evtName => {
            this[evtName] = new EventEmitter();
        });
    }
    get isVertical() {
        return this.options.horizontal === false;
    }
    get isHiddenBeforeInit() {
        const initialized = this._vanillaFlicking && this._vanillaFlicking.initialized;
        return this.hideBeforeInit && !initialized;
    }
    get cameraStyleBeforeInit() {
        const initialized = this._vanillaFlicking && this._vanillaFlicking.initialized;
        return !initialized && this.firstPanelSize
            ? { transform: getDefaultCameraTransform(this.options.align, this.options.horizontal, this.firstPanelSize) }
            : {};
    }
    get ngxPanels() { return this._ngxPanels; }
    ngAfterViewInit() {
        if (!isPlatformBrowser(this._platformId))
            return;
        const options = this.options;
        const viewportEl = this._elRef.nativeElement;
        const virtual = options.virtual && options.panelsPerView > 0;
        const rendererOptions = {
            ngxFlicking: this,
            align: options.align,
            ngxRenderer: this._ngxRenderer,
            strategy: virtual
                ? new VirtualRenderingStrategy()
                : new NormalRenderingStrategy({
                    providerCtor: NgxElementProvider
                })
        };
        if (virtual) {
            this._initVirtualElements();
        }
        // This prevents mousemove to call ngDoCheck & noAfterContentChecked everytime
        const flicking = new VanillaFlicking(viewportEl, Object.assign(Object.assign({}, this.options), { externalRenderer: new NgxRenderer(rendererOptions) }));
        this._vanillaFlicking = flicking;
        const elementDiffer = new ListDiffer(this._ngxPanels.toArray());
        this._elementDiffer = elementDiffer;
        this._bindEvents();
        this._checkPlugins();
        if (this.status) {
            flicking.setStatus(this.status);
        }
        this._ngxPanels.changes.subscribe(() => {
            const panels = this._ngxPanels.toArray();
            const diffResult = elementDiffer.update(panels);
            // eslint-disable-next-line @typescript-eslint/no-unused-vars
            sync(flicking, diffResult, [...diffResult.maintained.map(([_, idx]) => diffResult.list[idx]), ...diffResult.added.map(idx => diffResult.list[idx])]);
        });
    }
    ngOnDestroy() {
        if (!this._vanillaFlicking)
            return;
        this._vanillaFlicking.destroy();
    }
    ngOnChanges() {
        const flicking = this._vanillaFlicking;
        if (!flicking)
            return;
        void flicking.renderer.forceRenderAllPanels();
        this._checkPlugins();
    }
    _bindEvents() {
        const flicking = this._vanillaFlicking;
        EVENT_NAMES.forEach(evtName => {
            flicking.on(evtName, e => {
                // Style guide: Event - https://angular.io/guide/styleguide#dont-prefix-output-properties
                const emitter = this[evtName];
                e.currentTarget = this;
                if (emitter) {
                    emitter.emit(e);
                }
            });
        });
    }
    _checkPlugins() {
        const flicking = this._vanillaFlicking;
        if (!flicking)
            return;
        const { list, added, removed, prevList } = this._pluginsDiffer.update(this.plugins);
        flicking.addPlugins(...added.map(index => list[index]));
        flicking.removePlugins(...removed.map(index => prevList[index]));
    }
    _initVirtualElements() {
        const options = this.options;
        const renderer = this._ngxRenderer;
        const cameraElement = this._elRef.nativeElement.firstElementChild;
        const panelsPerView = options.panelsPerView;
        const virtual = options.virtual;
        const fragment = document.createDocumentFragment();
        const newElements = range(panelsPerView + 1).map(idx => {
            var _a;
            const panelEl = renderer.createElement("div");
            panelEl.className = (_a = virtual.panelClass) !== null && _a !== void 0 ? _a : CLASS.DEFAULT_VIRTUAL;
            panelEl.dataset.elementIndex = idx.toString();
            return panelEl;
        });
        newElements.forEach(el => {
            fragment.appendChild(el);
        });
        renderer.appendChild(cameraElement, fragment);
    }
}
NgxFlickingComponent.decorators = [
    { type: Component, args: [{
                selector: "ngx-flicking, [NgxFlicking]",
                template: `
    <div class="flicking-camera" [ngStyle]="cameraStyleBeforeInit">
      <ng-content></ng-content>
    </div>
    <ng-content select="[in-viewport]"></ng-content>`,
                host: {
                    class: "flicking-viewport",
                    style: "display: block;"
                },
                encapsulation: ViewEncapsulation.None,
                styles: [".flicking-viewport{overflow:hidden;position:relative}.flicking-camera{-ms-flex-direction:row;-webkit-box-direction:normal;-webkit-box-orient:horizontal;display:-webkit-box;display:-ms-flexbox;display:flex;flex-direction:row;height:100%;position:relative;width:100%;z-index:1}.flicking-camera>*{-ms-flex-negative:0;flex-shrink:0}.flicking-viewport.vertical,.flicking-viewport.vertical>.flicking-camera{display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex}.flicking-viewport.vertical>.flicking-camera{-ms-flex-direction:column;-webkit-box-direction:normal;-webkit-box-orient:vertical;flex-direction:column}.flicking-viewport.flicking-hidden .flicking-camera>*{visibility:hidden}\n/*# sourceMappingURL=flicking.css.map */"]
            },] }
];
NgxFlickingComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
NgxFlickingComponent.propDecorators = {
    options: [{ type: Input }],
    plugins: [{ type: Input }],
    status: [{ type: Input }],
    hideBeforeInit: [{ type: Input }],
    firstPanelSize: [{ type: Input }],
    ready: [{ type: Output }],
    beforeResize: [{ type: Output }],
    afterResize: [{ type: Output }],
    holdStart: [{ type: Output }],
    holdEnd: [{ type: Output }],
    moveStart: [{ type: Output }],
    move: [{ type: Output }],
    moveEnd: [{ type: Output }],
    willChange: [{ type: Output }],
    changed: [{ type: Output }],
    willRestore: [{ type: Output }],
    restored: [{ type: Output }],
    select: [{ type: Output }],
    needPanel: [{ type: Output }],
    visibleChange: [{ type: Output }],
    reachEdge: [{ type: Output }],
    panelChange: [{ type: Output }],
    isVertical: [{ type: HostBinding, args: ["class.vertical",] }],
    isHiddenBeforeInit: [{ type: HostBinding, args: ["class.flicking-hidden",] }],
    _ngxPanels: [{ type: ContentChildren, args: [NgxFlickingPanel,] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWZsaWNraW5nLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIvaG9tZS93bi9lZ2pzLWZsaWNraW5nL3BhY2thZ2VzL25neC1mbGlja2luZy9wcm9qZWN0cy9uZ3gtZmxpY2tpbmcvc3JjLyIsInNvdXJjZXMiOlsibGliL25neC1mbGlja2luZy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHO0FBQ0gsT0FBTyxFQUNMLFNBQVMsRUFDVCxLQUFLLEVBRUwsVUFBVSxFQUVWLE1BQU0sRUFDTixZQUFZLEVBRVosaUJBQWlCLEVBQ2pCLFNBQVMsRUFDVCxlQUFlLEVBQ2YsU0FBUyxFQUNULFdBQVcsRUFDWCxNQUFNLEVBQ04sV0FBVyxFQUNaLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3BELE9BQU8sZUFBZSxFQUFFLEVBR3RCLElBQUksRUFDSix5QkFBeUIsRUFvQnpCLHdCQUF3QixFQUN4Qix1QkFBdUIsRUFDdkIsS0FBSyxFQUNMLEtBQUssRUFDTixNQUFNLGdCQUFnQixDQUFDO0FBQ3hCLE9BQU8sVUFBVSxNQUFNLG1CQUFtQixDQUFDO0FBRTNDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDdkMsT0FBTyxpQkFBaUIsTUFBTSxxQkFBcUIsQ0FBQztBQUNwRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUNsRSxPQUFPLFdBQW1DLE1BQU0sZUFBZSxDQUFDO0FBQ2hFLE9BQU8sa0JBQWtCLE1BQU0sc0JBQXNCLENBQUM7QUFrQnRELE1BQU0sT0FBTyxvQkFBcUIsU0FBUSxpQkFBaUI7SUFrRHpELFlBQW1CLEtBQThCLEVBQUUsUUFBbUIsRUFBdUIsVUFBVTtRQUNyRyxLQUFLLEVBQUUsQ0FBQztRQWpETSxZQUFPLEdBQTZCLEVBQUUsQ0FBQztRQUN2QyxZQUFPLEdBQWEsRUFBRSxDQUFDO1FB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LE1BQU07MEJBQ04sTUFBTTt3QkFDTixNQUFNO3NCQUNOLE1BQU07d0JBQ04sTUFBTTttQkFDTixNQUFNO3NCQUNOLE1BQU07eUJBQ04sTUFBTTtzQkFDTixNQUFNOzBCQUNOLE1BQU07dUJBQ04sTUFBTTtxQkFDTixNQUFNO3dCQUNOLE1BQU07NEJBQ04sTUFBTTt3QkFDTixNQUFNOzBCQUNOLE1BQU07eUJBRU4sV0FBVyxTQUFDLGdCQUFnQjtpQ0FJNUIsV0FBVyxTQUFDLHVCQUF1Qjt5QkFZbkMsZUFBZSxTQUFDLGdCQUFnQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE1IE5BVkVSIENvcnAuXG4gKiBlZ2pzIHByb2plY3RzIGFyZSBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqL1xuaW1wb3J0IHtcbiAgQ29tcG9uZW50LFxuICBJbnB1dCxcbiAgQWZ0ZXJWaWV3SW5pdCxcbiAgRWxlbWVudFJlZixcbiAgT25DaGFuZ2VzLFxuICBPdXRwdXQsXG4gIEV2ZW50RW1pdHRlcixcbiAgT25EZXN0cm95LFxuICBWaWV3RW5jYXBzdWxhdGlvbixcbiAgUXVlcnlMaXN0LFxuICBDb250ZW50Q2hpbGRyZW4sXG4gIFJlbmRlcmVyMixcbiAgSG9zdEJpbmRpbmcsXG4gIEluamVjdCxcbiAgUExBVEZPUk1fSURcbn0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IGlzUGxhdGZvcm1Ccm93c2VyIH0gZnJvbSBcIkBhbmd1bGFyL2NvbW1vblwiO1xuaW1wb3J0IFZhbmlsbGFGbGlja2luZywge1xuICBGbGlja2luZ09wdGlvbnMsXG4gIEZsaWNraW5nRXZlbnRzLFxuICBzeW5jLFxuICBnZXREZWZhdWx0Q2FtZXJhVHJhbnNmb3JtLFxuICBQbHVnaW4sXG4gIFN0YXR1cyxcbiAgU2VsZWN0RXZlbnQsXG4gIE5lZWRQYW5lbEV2ZW50LFxuICBWaXNpYmxlQ2hhbmdlRXZlbnQsXG4gIEhvbGRTdGFydEV2ZW50LFxuICBIb2xkRW5kRXZlbnQsXG4gIE1vdmVTdGFydEV2ZW50LFxuICBNb3ZlRXZlbnQsXG4gIE1vdmVFbmRFdmVudCxcbiAgV2lsbENoYW5nZUV2ZW50LFxuICBDaGFuZ2VkRXZlbnQsXG4gIFdpbGxSZXN0b3JlRXZlbnQsXG4gIFJlc3RvcmVkRXZlbnQsXG4gIFJlYWR5RXZlbnQsXG4gIEJlZm9yZVJlc2l6ZUV2ZW50LFxuICBBZnRlclJlc2l6ZUV2ZW50LFxuICBSZWFjaEVkZ2VFdmVudCxcbiAgUGFuZWxDaGFuZ2VFdmVudCxcbiAgVmlydHVhbFJlbmRlcmluZ1N0cmF0ZWd5LFxuICBOb3JtYWxSZW5kZXJpbmdTdHJhdGVneSxcbiAgcmFuZ2UsXG4gIENMQVNTXG59IGZyb20gXCJAZWdqcy9mbGlja2luZ1wiO1xuaW1wb3J0IExpc3REaWZmZXIgZnJvbSBcIkBlZ2pzL2xpc3QtZGlmZmVyXCI7XG5cbmltcG9ydCB7IEVWRU5UX05BTUVTIH0gZnJvbSBcIi4vY29uc3RzXCI7XG5pbXBvcnQgRmxpY2tpbmdJbnRlcmZhY2UgZnJvbSBcIi4vRmxpY2tpbmdJbnRlcmZhY2VcIjtcbmltcG9ydCB7IE5neEZsaWNraW5nUGFuZWwgfSBmcm9tIFwiLi9uZ3gtZmxpY2tpbmctcGFuZWwuZGlyZWN0aXZlXCI7XG5pbXBvcnQgTmd4UmVuZGVyZXIsIHsgTmd4UmVuZGVyZXJPcHRpb25zIH0gZnJvbSBcIi4vTmd4UmVuZGVyZXJcIjtcbmltcG9ydCBOZ3hFbGVtZW50UHJvdmlkZXIgZnJvbSBcIi4vTmd4RWxlbWVudFByb3ZpZGVyXCI7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogXCJuZ3gtZmxpY2tpbmcsIFtOZ3hGbGlja2luZ11cIixcbiAgdGVtcGxhdGU6IGBcbiAgICA8ZGl2IGNsYXNzPVwiZmxpY2tpbmctY2FtZXJhXCIgW25nU3R5bGVdPVwiY2FtZXJhU3R5bGVCZWZvcmVJbml0XCI+XG4gICAgICA8bmctY29udGVudD48L25nLWNvbnRlbnQ+XG4gICAgPC9kaXY+XG4gICAgPG5nLWNvbnRlbnQgc2VsZWN0PVwiW2luLXZpZXdwb3J0XVwiPjwvbmctY29udGVudD5gLFxuICBob3N0OiB7XG4gICAgY2xhc3M6IFwiZmxpY2tpbmctdmlld3BvcnRcIixcbiAgICBzdHlsZTogXCJkaXNwbGF5OiBibG9jaztcIlxuICB9LFxuICBzdHlsZVVybHM6IFtcbiAgICBcIi4uLy4uL25vZGVfbW9kdWxlcy9AZWdqcy9mbGlja2luZy9kaXN0L2ZsaWNraW5nLmNzc1wiXG4gIF0sXG4gIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmVcbn0pXG5leHBvcnQgY2xhc3MgTmd4RmxpY2tpbmdDb21wb25lbnQgZXh0ZW5kcyBGbGlja2luZ0ludGVyZmFjZVxuICBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSwgT25DaGFuZ2VzIHtcbiAgQElucHV0KCkgcHVibGljIG9wdGlvbnM6IFBhcnRpYWw8RmxpY2tpbmdPcHRpb25zPiA9IHt9O1xuICBASW5wdXQoKSBwdWJsaWMgcGx1Z2luczogUGx1Z2luW10gPSBbXTtcbiAgQElucHV0KCkgcHVibGljIHN0YXR1czogU3RhdHVzO1xuICBASW5wdXQoKSBwdWJsaWMgaGlkZUJlZm9yZUluaXQ6IGJvb2xlYW4gPSBmYWxzZTtcbiAgQElucHV0KCkgcHVibGljIGZpcnN0UGFuZWxTaXplOiBzdHJpbmc7XG4gIEBPdXRwdXQoKSBwdWJsaWMgcmVhZHk6IEV2ZW50RW1pdHRlcjxSZWFkeUV2ZW50PE5neEZsaWNraW5nQ29tcG9uZW50Pj47XG4gIEBPdXRwdXQoKSBwdWJsaWMgYmVmb3JlUmVzaXplOiBFdmVudEVtaXR0ZXI8QmVmb3JlUmVzaXplRXZlbnQ8Tmd4RmxpY2tpbmdDb21wb25lbnQ+PjtcbiAgQE91dHB1dCgpIHB1YmxpYyBhZnRlclJlc2l6ZTogRXZlbnRFbWl0dGVyPEFmdGVyUmVzaXplRXZlbnQ8Tmd4RmxpY2tpbmdDb21wb25lbnQ+PjtcbiAgQE91dHB1dCgpIHB1YmxpYyBob2xkU3RhcnQ6IEV2ZW50RW1pdHRlcjxIb2xkU3RhcnRFdmVudDxOZ3hGbGlja2luZ0NvbXBvbmVudD4+O1xuICBAT3V0cHV0KCkgcHVibGljIGhvbGRFbmQ6IEV2ZW50RW1pdHRlcjxIb2xkRW5kRXZlbnQ8Tmd4RmxpY2tpbmdDb21wb25lbnQ+PjtcbiAgQE91dHB1dCgpIHB1YmxpYyBtb3ZlU3RhcnQ6IEV2ZW50RW1pdHRlcjxNb3ZlU3RhcnRFdmVudDxOZ3hGbGlja2luZ0NvbXBvbmVudD4+O1xuICBAT3V0cHV0KCkgcHVibGljIG1vdmU6IEV2ZW50RW1pdHRlcjxNb3ZlRXZlbnQ8Tmd4RmxpY2tpbmdDb21wb25lbnQ+PjtcbiAgQE91dHB1dCgpIHB1YmxpYyBtb3ZlRW5kOiBFdmVudEVtaXR0ZXI8TW92ZUVuZEV2ZW50PE5neEZsaWNraW5nQ29tcG9uZW50Pj47XG4gIEBPdXRwdXQoKSBwdWJsaWMgd2lsbENoYW5nZTogRXZlbnRFbWl0dGVyPFdpbGxDaGFuZ2VFdmVudDxOZ3hGbGlja2luZ0NvbXBvbmVudD4+O1xuICBAT3V0cHV0KCkgcHVibGljIGNoYW5nZWQ6IEV2ZW50RW1pdHRlcjxDaGFuZ2VkRXZlbnQ8Tmd4RmxpY2tpbmdDb21wb25lbnQ+PjtcbiAgQE91dHB1dCgpIHB1YmxpYyB3aWxsUmVzdG9yZTogRXZlbnRFbWl0dGVyPFdpbGxSZXN0b3JlRXZlbnQ8Tmd4RmxpY2tpbmdDb21wb25lbnQ+PjtcbiAgQE91dHB1dCgpIHB1YmxpYyByZXN0b3JlZDogRXZlbnRFbWl0dGVyPFJlc3RvcmVkRXZlbnQ8Tmd4RmxpY2tpbmdDb21wb25lbnQ+PjtcbiAgQE91dHB1dCgpIHB1YmxpYyBzZWxlY3Q6IEV2ZW50RW1pdHRlcjxTZWxlY3RFdmVudDxOZ3hGbGlja2luZ0NvbXBvbmVudD4+O1xuICBAT3V0cHV0KCkgcHVibGljIG5lZWRQYW5lbDogRXZlbnRFbWl0dGVyPE5lZWRQYW5lbEV2ZW50PE5neEZsaWNraW5nQ29tcG9uZW50Pj47XG4gIEBPdXRwdXQoKSBwdWJsaWMgdmlzaWJsZUNoYW5nZTogRXZlbnRFbWl0dGVyPFZpc2libGVDaGFuZ2VFdmVudDxOZ3hGbGlja2luZ0NvbXBvbmVudD4+O1xuICBAT3V0cHV0KCkgcHVibGljIHJlYWNoRWRnZTogRXZlbnRFbWl0dGVyPFJlYWNoRWRnZUV2ZW50PE5neEZsaWNraW5nQ29tcG9uZW50Pj47XG4gIEBPdXRwdXQoKSBwdWJsaWMgcGFuZWxDaGFuZ2U6IEV2ZW50RW1pdHRlcjxQYW5lbENoYW5nZUV2ZW50PE5neEZsaWNraW5nQ29tcG9uZW50Pj47XG5cbiAgQEhvc3RCaW5kaW5nKFwiY2xhc3MudmVydGljYWxcIikgcHVibGljIGdldCBpc1ZlcnRpY2FsKCkge1xuICAgIHJldHVybiB0aGlzLm9wdGlvbnMuaG9yaXpvbnRhbCA9PT0gZmFsc2U7XG4gIH1cblxuICBASG9zdEJpbmRpbmcoXCJjbGFzcy5mbGlja2luZy1oaWRkZW5cIikgcHVibGljIGdldCBpc0hpZGRlbkJlZm9yZUluaXQoKSB7XG4gICAgY29uc3QgaW5pdGlhbGl6ZWQgPSB0aGlzLl92YW5pbGxhRmxpY2tpbmcgJiYgdGhpcy5fdmFuaWxsYUZsaWNraW5nLmluaXRpYWxpemVkO1xuICAgIHJldHVybiB0aGlzLmhpZGVCZWZvcmVJbml0ICYmICFpbml0aWFsaXplZDtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgY2FtZXJhU3R5bGVCZWZvcmVJbml0KCkge1xuICAgIGNvbnN0IGluaXRpYWxpemVkID0gdGhpcy5fdmFuaWxsYUZsaWNraW5nICYmIHRoaXMuX3ZhbmlsbGFGbGlja2luZy5pbml0aWFsaXplZDtcbiAgICByZXR1cm4gIWluaXRpYWxpemVkICYmIHRoaXMuZmlyc3RQYW5lbFNpemVcbiAgICAgID8geyB0cmFuc2Zvcm06IGdldERlZmF1bHRDYW1lcmFUcmFuc2Zvcm0odGhpcy5vcHRpb25zLmFsaWduLCB0aGlzLm9wdGlvbnMuaG9yaXpvbnRhbCwgdGhpcy5maXJzdFBhbmVsU2l6ZSkgfVxuICAgICAgOiB7fTtcbiAgfVxuXG4gIEBDb250ZW50Q2hpbGRyZW4oTmd4RmxpY2tpbmdQYW5lbCkgcHJpdmF0ZSBfbmd4UGFuZWxzOiBRdWVyeUxpc3Q8Tmd4RmxpY2tpbmdQYW5lbD47XG4gIHByaXZhdGUgX2VsUmVmOiBFbGVtZW50UmVmPEhUTUxFbGVtZW50PjtcbiAgcHJpdmF0ZSBfbmd4UmVuZGVyZXI6IFJlbmRlcmVyMjtcbiAgcHJpdmF0ZSBfcGxhdGZvcm1JZDogYW55O1xuICBwcml2YXRlIF9wbHVnaW5zRGlmZmVyOiBMaXN0RGlmZmVyPFBsdWdpbj4gPSBuZXcgTGlzdERpZmZlcjxQbHVnaW4+KCk7XG4gIHByaXZhdGUgX2VsZW1lbnREaWZmZXI6IExpc3REaWZmZXI8Tmd4RmxpY2tpbmdQYW5lbD4gfCBudWxsID0gbnVsbDtcblxuICBwdWJsaWMgZ2V0IG5neFBhbmVscygpIHsgcmV0dXJuIHRoaXMuX25neFBhbmVsczsgfVxuXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihlbFJlZjogRWxlbWVudFJlZjxIVE1MRWxlbWVudD4sIHJlbmRlcmVyOiBSZW5kZXJlcjIsIEBJbmplY3QoUExBVEZPUk1fSUQpIHBsYXRmb3JtSWQpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgdGhpcy5fZWxSZWYgPSBlbFJlZjtcbiAgICB0aGlzLl9uZ3hSZW5kZXJlciA9IHJlbmRlcmVyO1xuICAgIHRoaXMuX3BsYXRmb3JtSWQgPSBwbGF0Zm9ybUlkO1xuICAgIHRoaXMuX3ZhbmlsbGFGbGlja2luZyA9IG51bGw7XG5cbiAgICBFVkVOVF9OQU1FUy5mb3JFYWNoKGV2dE5hbWUgPT4ge1xuICAgICAgdGhpc1tldnROYW1lXSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgaWYgKCFpc1BsYXRmb3JtQnJvd3Nlcih0aGlzLl9wbGF0Zm9ybUlkKSkgcmV0dXJuO1xuXG4gICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICBjb25zdCB2aWV3cG9ydEVsID0gdGhpcy5fZWxSZWYubmF0aXZlRWxlbWVudDtcbiAgICBjb25zdCB2aXJ0dWFsID0gb3B0aW9ucy52aXJ0dWFsICYmIG9wdGlvbnMucGFuZWxzUGVyVmlldyA+IDA7XG4gICAgY29uc3QgcmVuZGVyZXJPcHRpb25zOiBOZ3hSZW5kZXJlck9wdGlvbnMgPSB7XG4gICAgICBuZ3hGbGlja2luZzogdGhpcyxcbiAgICAgIGFsaWduOiBvcHRpb25zLmFsaWduLFxuICAgICAgbmd4UmVuZGVyZXI6IHRoaXMuX25neFJlbmRlcmVyLFxuICAgICAgc3RyYXRlZ3k6IHZpcnR1YWxcbiAgICAgICAgPyBuZXcgVmlydHVhbFJlbmRlcmluZ1N0cmF0ZWd5KClcbiAgICAgICAgOiBuZXcgTm9ybWFsUmVuZGVyaW5nU3RyYXRlZ3koe1xuICAgICAgICAgIHByb3ZpZGVyQ3RvcjogTmd4RWxlbWVudFByb3ZpZGVyXG4gICAgICAgIH0pXG4gICAgfTtcblxuICAgIGlmICh2aXJ0dWFsKSB7XG4gICAgICB0aGlzLl9pbml0VmlydHVhbEVsZW1lbnRzKCk7XG4gICAgfVxuXG4gICAgLy8gVGhpcyBwcmV2ZW50cyBtb3VzZW1vdmUgdG8gY2FsbCBuZ0RvQ2hlY2sgJiBub0FmdGVyQ29udGVudENoZWNrZWQgZXZlcnl0aW1lXG4gICAgY29uc3QgZmxpY2tpbmcgPSBuZXcgVmFuaWxsYUZsaWNraW5nKHZpZXdwb3J0RWwsIHtcbiAgICAgIC4uLnRoaXMub3B0aW9ucyxcbiAgICAgIGV4dGVybmFsUmVuZGVyZXI6IG5ldyBOZ3hSZW5kZXJlcihyZW5kZXJlck9wdGlvbnMpXG4gICAgfSk7XG4gICAgdGhpcy5fdmFuaWxsYUZsaWNraW5nID0gZmxpY2tpbmc7XG5cbiAgICBjb25zdCBlbGVtZW50RGlmZmVyID0gbmV3IExpc3REaWZmZXIodGhpcy5fbmd4UGFuZWxzLnRvQXJyYXkoKSk7XG4gICAgdGhpcy5fZWxlbWVudERpZmZlciA9IGVsZW1lbnREaWZmZXI7XG5cbiAgICB0aGlzLl9iaW5kRXZlbnRzKCk7XG4gICAgdGhpcy5fY2hlY2tQbHVnaW5zKCk7XG5cbiAgICBpZiAodGhpcy5zdGF0dXMpIHtcbiAgICAgIGZsaWNraW5nLnNldFN0YXR1cyh0aGlzLnN0YXR1cyk7XG4gICAgfVxuXG4gICAgdGhpcy5fbmd4UGFuZWxzLmNoYW5nZXMuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIGNvbnN0IHBhbmVscyA9IHRoaXMuX25neFBhbmVscy50b0FycmF5KCk7XG4gICAgICBjb25zdCBkaWZmUmVzdWx0ID0gZWxlbWVudERpZmZlci51cGRhdGUocGFuZWxzKTtcblxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xuICAgICAgc3luYyhmbGlja2luZywgZGlmZlJlc3VsdCwgWy4uLmRpZmZSZXN1bHQubWFpbnRhaW5lZC5tYXAoKFtfLCBpZHhdKSA9PiBkaWZmUmVzdWx0Lmxpc3RbaWR4XSksIC4uLmRpZmZSZXN1bHQuYWRkZWQubWFwKGlkeCA9PiBkaWZmUmVzdWx0Lmxpc3RbaWR4XSldKTtcbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBuZ09uRGVzdHJveSgpIHtcbiAgICBpZiAoIXRoaXMuX3ZhbmlsbGFGbGlja2luZykgcmV0dXJuO1xuXG4gICAgdGhpcy5fdmFuaWxsYUZsaWNraW5nLmRlc3Ryb3koKTtcbiAgfVxuXG4gIHB1YmxpYyBuZ09uQ2hhbmdlcygpIHtcbiAgICBjb25zdCBmbGlja2luZyA9IHRoaXMuX3ZhbmlsbGFGbGlja2luZztcbiAgICBpZiAoIWZsaWNraW5nKSByZXR1cm47XG5cbiAgICB2b2lkIGZsaWNraW5nLnJlbmRlcmVyLmZvcmNlUmVuZGVyQWxsUGFuZWxzKCk7XG4gICAgdGhpcy5fY2hlY2tQbHVnaW5zKCk7XG4gIH1cblxuICBwcml2YXRlIF9iaW5kRXZlbnRzKCkge1xuICAgIGNvbnN0IGZsaWNraW5nID0gdGhpcy5fdmFuaWxsYUZsaWNraW5nITtcblxuICAgIEVWRU5UX05BTUVTLmZvckVhY2goZXZ0TmFtZSA9PiB7XG4gICAgICBmbGlja2luZy5vbihldnROYW1lLCBlID0+IHtcbiAgICAgICAgLy8gU3R5bGUgZ3VpZGU6IEV2ZW50IC0gaHR0cHM6Ly9hbmd1bGFyLmlvL2d1aWRlL3N0eWxlZ3VpZGUjZG9udC1wcmVmaXgtb3V0cHV0LXByb3BlcnRpZXNcbiAgICAgICAgY29uc3QgZW1pdHRlciA9IHRoaXNbZXZ0TmFtZV0gYXMgRXZlbnRFbWl0dGVyPEZsaWNraW5nRXZlbnRzW3R5cGVvZiBldnROYW1lXT47XG5cbiAgICAgICAgZS5jdXJyZW50VGFyZ2V0ID0gdGhpcztcblxuICAgICAgICBpZiAoZW1pdHRlcikge1xuICAgICAgICAgIGVtaXR0ZXIuZW1pdChlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIF9jaGVja1BsdWdpbnMoKSB7XG4gICAgY29uc3QgZmxpY2tpbmcgPSB0aGlzLl92YW5pbGxhRmxpY2tpbmc7XG4gICAgaWYgKCFmbGlja2luZykgcmV0dXJuO1xuXG4gICAgY29uc3QgeyBsaXN0LCBhZGRlZCwgcmVtb3ZlZCwgcHJldkxpc3QgfSA9IHRoaXMuX3BsdWdpbnNEaWZmZXIudXBkYXRlKHRoaXMucGx1Z2lucyk7XG5cbiAgICBmbGlja2luZy5hZGRQbHVnaW5zKC4uLmFkZGVkLm1hcChpbmRleCA9PiBsaXN0W2luZGV4XSkpO1xuICAgIGZsaWNraW5nLnJlbW92ZVBsdWdpbnMoLi4ucmVtb3ZlZC5tYXAoaW5kZXggPT4gcHJldkxpc3RbaW5kZXhdKSk7XG4gIH1cblxuICBwcml2YXRlIF9pbml0VmlydHVhbEVsZW1lbnRzKCkge1xuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgY29uc3QgcmVuZGVyZXIgPSB0aGlzLl9uZ3hSZW5kZXJlcjtcbiAgICBjb25zdCBjYW1lcmFFbGVtZW50ID0gdGhpcy5fZWxSZWYubmF0aXZlRWxlbWVudC5maXJzdEVsZW1lbnRDaGlsZDtcbiAgICBjb25zdCBwYW5lbHNQZXJWaWV3ID0gb3B0aW9ucy5wYW5lbHNQZXJWaWV3ITtcbiAgICBjb25zdCB2aXJ0dWFsID0gb3B0aW9ucy52aXJ0dWFsITtcbiAgICBjb25zdCBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcblxuICAgIGNvbnN0IG5ld0VsZW1lbnRzID0gcmFuZ2UocGFuZWxzUGVyVmlldyArIDEpLm1hcChpZHggPT4ge1xuICAgICAgY29uc3QgcGFuZWxFbCA9IHJlbmRlcmVyLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBwYW5lbEVsLmNsYXNzTmFtZSA9IHZpcnR1YWwucGFuZWxDbGFzcyA/PyBDTEFTUy5ERUZBVUxUX1ZJUlRVQUw7XG4gICAgICBwYW5lbEVsLmRhdGFzZXQuZWxlbWVudEluZGV4ID0gaWR4LnRvU3RyaW5nKCk7XG4gICAgICByZXR1cm4gcGFuZWxFbDtcbiAgICB9KTtcblxuICAgIG5ld0VsZW1lbnRzLmZvckVhY2goZWwgPT4ge1xuICAgICAgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoZWwpO1xuICAgIH0pO1xuXG4gICAgcmVuZGVyZXIuYXBwZW5kQ2hpbGQoY2FtZXJhRWxlbWVudCwgZnJhZ21lbnQpO1xuICB9XG59XG4iXX0=