import { __awaiter } from "tslib";
import { ExternalRenderer, getFlickingAttached } from "@egjs/flicking";
class NgxRenderer extends ExternalRenderer {
    constructor(options) {
        super(options);
        this._ngxFlicking = options.ngxFlicking;
        this._ngxRenderer = options.ngxRenderer;
    }
    // eslint-disable-next-line @typescript-eslint/require-await
    render() {
        return __awaiter(this, void 0, void 0, function* () {
            const flicking = getFlickingAttached(this._flicking);
            const strategy = this._strategy;
            strategy.updateRenderingPanels(flicking);
            strategy.renderPanels(flicking);
            this._resetPanelElementOrder();
        });
    }
    _collectPanels() {
        const flicking = getFlickingAttached(this._flicking);
        const children = this._ngxFlicking.ngxPanels.toArray();
        this._panels = this._strategy.collectPanels(flicking, children);
    }
    _createPanel(externalComponent, options) {
        return this._strategy.createPanel(externalComponent, options);
    }
    _resetPanelElementOrder() {
        const flicking = getFlickingAttached(this._flicking);
        const renderer = this._ngxRenderer;
        const cameraEl = flicking.camera.element;
        // We're using reversed panels here as last panel should be the last element of camera element
        const reversedElements = this._strategy
            .getRenderingElementsByOrder(flicking)
            .reverse();
        reversedElements.forEach((el, idx) => {
            const nextEl = reversedElements[idx - 1] ? reversedElements[idx - 1] : null;
            if (el.nextElementSibling !== nextEl) {
                renderer.insertBefore(cameraEl, el, nextEl);
            }
        });
    }
}
export default NgxRenderer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTmd4UmVuZGVyZXIuanMiLCJzb3VyY2VSb290IjoiL2hvbWUvd24vZWdqcy1mbGlja2luZy9wYWNrYWdlcy9uZ3gtZmxpY2tpbmcvcHJvamVjdHMvbmd4LWZsaWNraW5nL3NyYy8iLCJzb3VyY2VzIjpbImxpYi9OZ3hSZW5kZXJlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBRUEsT0FBTyxFQUNMLGdCQUFnQixFQUNoQixtQkFBbUIsRUFHcEIsTUFBTSxnQkFBZ0IsQ0FBQztBQVV4QixNQUFNLFdBQVksU0FBUSxnQkFBZ0I7SUFLeEMsWUFBbUIsT0FBMkI7UUFDNUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRWYsSUFBSSxDQUFDLFlBQVksR0FBRyxPQUFPLENBQUMsV0FBVyxDQUFDO1FBQ3hDLElBQUksQ0FBQyxZQUFZLEdBQUcsT0FBTyxDQUFDLFdBQVcsQ0FBQztJQUMxQyxDQUFDO0lBRUQsNERBQTREO0lBQy9DLE1BQU07O1lBQ2pCLE1BQU0sUUFBUSxHQUFHLG1CQUFtQixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUNyRCxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDO1lBRWhDLFFBQVEsQ0FBQyxxQkFBcUIsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUN6QyxRQUFRLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBRWhDLElBQUksQ0FBQyx1QkFBdUIsRUFBRSxDQUFDO1FBQ2pDLENBQUM7S0FBQTtJQUVTLGNBQWM7UUFDdEIsTUFBTSxRQUFRLEdBQUcsbUJBQW1CLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3JELE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBRXZELElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ2xFLENBQUM7SUFFUyxZQUFZLENBQUMsaUJBQW1DLEVBQUUsT0FBcUI7UUFDL0UsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxpQkFBaUIsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUNoRSxDQUFDO0lBRU8sdUJBQXVCO1FBQzdCLE1BQU0sUUFBUSxHQUFHLG1CQUFtQixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNyRCxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDO1FBQ25DLE1BQU0sUUFBUSxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDO1FBRXpDLDhGQUE4RjtRQUM5RixNQUFNLGdCQUFnQixHQUFHLElBQUksQ0FBQyxTQUFTO2FBQ3BDLDJCQUEyQixDQUFDLFFBQVEsQ0FBQzthQUNyQyxPQUFPLEVBQUUsQ0FBQztRQUViLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRTtZQUNuQyxNQUFNLE1BQU0sR0FBRyxnQkFBZ0IsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1lBRTVFLElBQUksRUFBRSxDQUFDLGtCQUFrQixLQUFLLE1BQU0sRUFBRTtnQkFDcEMsUUFBUSxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUUsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDO2FBQzdDO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0NBQ0Y7QUFFRCxlQUFlLFdBQVcsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9yZXN0cmljdC1wbHVzLW9wZXJhbmRzICovXG5pbXBvcnQgeyBSZW5kZXJlcjIgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHtcbiAgRXh0ZXJuYWxSZW5kZXJlcixcbiAgZ2V0RmxpY2tpbmdBdHRhY2hlZCxcbiAgUGFuZWxPcHRpb25zLFxuICBSZW5kZXJlck9wdGlvbnNcbn0gZnJvbSBcIkBlZ2pzL2ZsaWNraW5nXCI7XG5cbmltcG9ydCB7IE5neEZsaWNraW5nUGFuZWwgfSBmcm9tIFwiLi9uZ3gtZmxpY2tpbmctcGFuZWwuZGlyZWN0aXZlXCI7XG5pbXBvcnQgeyBOZ3hGbGlja2luZ0NvbXBvbmVudCB9IGZyb20gXCIuL25neC1mbGlja2luZy5jb21wb25lbnRcIjtcblxuZXhwb3J0IGludGVyZmFjZSBOZ3hSZW5kZXJlck9wdGlvbnMgZXh0ZW5kcyBSZW5kZXJlck9wdGlvbnMge1xuICBuZ3hGbGlja2luZzogTmd4RmxpY2tpbmdDb21wb25lbnQ7XG4gIG5neFJlbmRlcmVyOiBSZW5kZXJlcjI7XG59XG5cbmNsYXNzIE5neFJlbmRlcmVyIGV4dGVuZHMgRXh0ZXJuYWxSZW5kZXJlciB7XG4gIC8vIEludGVybmFsIFN0YXRlc1xuICBwcml2YXRlIF9uZ3hGbGlja2luZzogTmd4RmxpY2tpbmdDb21wb25lbnQ7XG4gIHByaXZhdGUgX25neFJlbmRlcmVyOiBSZW5kZXJlcjI7XG5cbiAgcHVibGljIGNvbnN0cnVjdG9yKG9wdGlvbnM6IE5neFJlbmRlcmVyT3B0aW9ucykge1xuICAgIHN1cGVyKG9wdGlvbnMpO1xuXG4gICAgdGhpcy5fbmd4RmxpY2tpbmcgPSBvcHRpb25zLm5neEZsaWNraW5nO1xuICAgIHRoaXMuX25neFJlbmRlcmVyID0gb3B0aW9ucy5uZ3hSZW5kZXJlcjtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvcmVxdWlyZS1hd2FpdFxuICBwdWJsaWMgYXN5bmMgcmVuZGVyKCkge1xuICAgIGNvbnN0IGZsaWNraW5nID0gZ2V0RmxpY2tpbmdBdHRhY2hlZCh0aGlzLl9mbGlja2luZyk7XG4gICAgY29uc3Qgc3RyYXRlZ3kgPSB0aGlzLl9zdHJhdGVneTtcblxuICAgIHN0cmF0ZWd5LnVwZGF0ZVJlbmRlcmluZ1BhbmVscyhmbGlja2luZyk7XG4gICAgc3RyYXRlZ3kucmVuZGVyUGFuZWxzKGZsaWNraW5nKTtcblxuICAgIHRoaXMuX3Jlc2V0UGFuZWxFbGVtZW50T3JkZXIoKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBfY29sbGVjdFBhbmVscygpIHtcbiAgICBjb25zdCBmbGlja2luZyA9IGdldEZsaWNraW5nQXR0YWNoZWQodGhpcy5fZmxpY2tpbmcpO1xuICAgIGNvbnN0IGNoaWxkcmVuID0gdGhpcy5fbmd4RmxpY2tpbmcubmd4UGFuZWxzLnRvQXJyYXkoKTtcblxuICAgIHRoaXMuX3BhbmVscyA9IHRoaXMuX3N0cmF0ZWd5LmNvbGxlY3RQYW5lbHMoZmxpY2tpbmcsIGNoaWxkcmVuKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBfY3JlYXRlUGFuZWwoZXh0ZXJuYWxDb21wb25lbnQ6IE5neEZsaWNraW5nUGFuZWwsIG9wdGlvbnM6IFBhbmVsT3B0aW9ucykge1xuICAgIHJldHVybiB0aGlzLl9zdHJhdGVneS5jcmVhdGVQYW5lbChleHRlcm5hbENvbXBvbmVudCwgb3B0aW9ucyk7XG4gIH1cblxuICBwcml2YXRlIF9yZXNldFBhbmVsRWxlbWVudE9yZGVyKCkge1xuICAgIGNvbnN0IGZsaWNraW5nID0gZ2V0RmxpY2tpbmdBdHRhY2hlZCh0aGlzLl9mbGlja2luZyk7XG4gICAgY29uc3QgcmVuZGVyZXIgPSB0aGlzLl9uZ3hSZW5kZXJlcjtcbiAgICBjb25zdCBjYW1lcmFFbCA9IGZsaWNraW5nLmNhbWVyYS5lbGVtZW50O1xuXG4gICAgLy8gV2UncmUgdXNpbmcgcmV2ZXJzZWQgcGFuZWxzIGhlcmUgYXMgbGFzdCBwYW5lbCBzaG91bGQgYmUgdGhlIGxhc3QgZWxlbWVudCBvZiBjYW1lcmEgZWxlbWVudFxuICAgIGNvbnN0IHJldmVyc2VkRWxlbWVudHMgPSB0aGlzLl9zdHJhdGVneVxuICAgICAgLmdldFJlbmRlcmluZ0VsZW1lbnRzQnlPcmRlcihmbGlja2luZylcbiAgICAgIC5yZXZlcnNlKCk7XG5cbiAgICByZXZlcnNlZEVsZW1lbnRzLmZvckVhY2goKGVsLCBpZHgpID0+IHtcbiAgICAgIGNvbnN0IG5leHRFbCA9IHJldmVyc2VkRWxlbWVudHNbaWR4IC0gMV0gPyByZXZlcnNlZEVsZW1lbnRzW2lkeCAtIDFdIDogbnVsbDtcblxuICAgICAgaWYgKGVsLm5leHRFbGVtZW50U2libGluZyAhPT0gbmV4dEVsKSB7XG4gICAgICAgIHJlbmRlcmVyLmluc2VydEJlZm9yZShjYW1lcmFFbCwgZWwsIG5leHRFbCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTmd4UmVuZGVyZXI7XG4iXX0=