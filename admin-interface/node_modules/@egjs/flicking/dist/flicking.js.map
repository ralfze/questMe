{"version":3,"file":"flicking.js","sources":["../src/const/error.ts","../src/const/external.ts","../src/utils.ts","../src/core/FlickingError.ts","../src/core/Viewport.ts","../src/core/AutoResizer.ts","../src/core/panel/Panel.ts","../src/core/panel/ExternalPanel.ts","../src/core/panel/VirtualPanel.ts","../src/core/panel/provider/VanillaElementProvider.ts","../src/core/panel/provider/VirtualElementProvider.ts","../src/core/VirtualManager.ts","../src/const/axes.ts","../src/control/states/State.ts","../src/control/states/IdleState.ts","../src/control/states/HoldingState.ts","../src/control/states/DraggingState.ts","../src/control/states/AnimatingState.ts","../src/control/states/DisabledState.ts","../src/control/StateMachine.ts","../src/control/AxesController.ts","../src/control/Control.ts","../src/core/AnchorPoint.ts","../src/control/SnapControl.ts","../src/control/FreeControl.ts","../src/control/StrictControl.ts","../src/control/index.ts","../src/camera/Camera.ts","../src/camera/LinearCamera.ts","../src/camera/CircularCamera.ts","../src/camera/BoundCamera.ts","../src/camera/index.ts","../src/renderer/Renderer.ts","../src/renderer/VanillaRenderer.ts","../src/renderer/ExternalRenderer.ts","../src/renderer/strategy/NormalRenderingStrategy.ts","../src/renderer/strategy/VirtualRenderingStrategy.ts","../src/renderer/index.ts","../src/Flicking.ts","../src/core/index.ts","../src/cfc/withFlickingMethods.ts","../src/cfc/sync.ts","../src/cfc/getRenderingPanels.ts","../src/cfc/getDefaultCameraTransform.ts","../src/index.umd.ts"],"sourcesContent":["/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n/* eslint-disable @typescript-eslint/restrict-template-expressions */\n\n/**\n * Error codes of {@link FlickingError}. Below are the conditions where each error code occurs.\n * @ko {@link FlickingError}의 에러 코드. 아래는 각각의 에러 코드가 발생하는 조건입니다.\n * @name ERROR_CODE\n * @constant\n * @type object\n * @property {number} WRONG_TYPE Parameter type is wrong<ko>패러미터의 타입이 잘못되었을 경우</ko>\n * @property {number} ELEMENT_NOT_FOUND Element is not found inside page with the given CSS selector<ko>주어진 CSS selector로 페이지 내에서 해당 엘리먼트를 찾지 못했을 경우</ko>\n * @property {number} VAL_MUST_NOT_NULL Expected non-null value, but given `null` or `undefined`<ko>값을 기대했으나, `null`이나 `undefined`를 받은 경우</ko>\n * @property {number} NOT_ATTACHED_TO_FLICKING When Flicking's component is not initialized (i.e. {@link Flicking#init} is not called)<ko>Flicking 내부 컴포넌트가 초기화되지 않은 경우 ({@link Flicking#init}이 호출되지 않은 경우)</ko>\n * @property {number} WRONG_OPTION One of the options is wrong<ko>옵션들 중 잘못된 값이 있을 때</ko>\n * @property {number} INDEX_OUT_OF_RANGE When the given index is out of possible range<ko>인덱스가 주어진 범위를 벗어난 경우</ko>\n * @property {number} POSITION_NOT_REACHABLE When {@link Control#moveToPosition}'s position parameter is out of possible range.<ko>{@link Control#moveToPosition}의 `position` 패러미터가 도달 가능한 범위를 벗어난 경우</ko>\n * @property {number} TRANSFORM_NOT_SUPPORTED CSS `transform` property is not available(<=IE8) <ko>CSS `transform` 속성을 사용할 수 없는 경우(<=IE8)</ko>\n * @property {number} STOP_CALLED_BY_USER When the event's `stop()` is called by user.<ko>사용자에 의해 이벤트의 `stop()`이 호출된 경우</ko>\n * @property {number} ANIMATION_INTERRUPTED When the animation is interrupted by user.<ko>사용자에 의해 애니메이션이 중단된 경우</ko>\n * @property {number} ANIMATION_ALREADY_PLAYING When the animation is already playing.<ko>현재 애니메이션이 이미 진행중인 경우</ko>\n * @property {number} NOT_ALLOWED_IN_FRAMEWORK When the non-allowed method is called from frameworks (React, Angular, Vue...)\n * <ko>프레임워크(React, Angular, Vue ...)에서 사용 불가능한 메소드를 호출했을 경우</ko>\n * @property {number} NOT_INITIALIZED When the {@link Flicking#init} is not called before but is needed<ko>{@link Flicking#init}의 호출이 필요하나, 아직 호출되지 않았을 경우</ko>\n * @property {number} NO_ACTIVE When there're no active panel that flicking has selected. This may be due to the absence of any panels<ko>현재 Flicking이 선택한 패널이 없을 경우. 일반적으로 패널이 하나도 없는 경우에 발생할 수 있습니다</ko>\n * @property {number} NOT_ALLOWED_IN_VIRTUAL When the non-allowed method is called while the virtual option is enabled<ko>virtual 옵션이 활성화된 상태에서 사용 불가능한 메소드가 호출되었을 경우</ko>\n */\nexport const CODE = {\n  WRONG_TYPE: 0,\n  ELEMENT_NOT_FOUND: 1,\n  VAL_MUST_NOT_NULL: 2,\n  NOT_ATTACHED_TO_FLICKING: 3,\n  WRONG_OPTION: 4,\n  INDEX_OUT_OF_RANGE: 5,\n  POSITION_NOT_REACHABLE: 6,\n  TRANSFORM_NOT_SUPPORTED: 7,\n  STOP_CALLED_BY_USER: 8,\n  ANIMATION_INTERRUPTED: 9,\n  ANIMATION_ALREADY_PLAYING: 10,\n  NOT_ALLOWED_IN_FRAMEWORK: 11,\n  NOT_INITIALIZED: 12,\n  NO_ACTIVE: 13,\n  NOT_ALLOWED_IN_VIRTUAL: 14\n} as const;\n\nexport const MESSAGE = {\n  WRONG_TYPE: (wrongVal: any, correctTypes: string[]) => `${wrongVal}(${typeof wrongVal}) is not a ${correctTypes.map(type => `\"${type}\"`).join(\" or \")}.`,\n  ELEMENT_NOT_FOUND: (selector: string) => `Element with selector \"${selector}\" not found.`,\n  VAL_MUST_NOT_NULL: (val: any, name: string) => `${name} should be provided. Given: ${val}`,\n  NOT_ATTACHED_TO_FLICKING: \"This module is not attached to the Flicking instance. \\\"init()\\\" should be called first.\",\n  WRONG_OPTION: (optionName: string, val: any) => `Option \"${optionName}\" is not in correct format, given: ${val}`,\n  INDEX_OUT_OF_RANGE: (val: number, min: number, max: number) => `Index \"${val}\" is out of range: should be between ${min} and ${max}.`,\n  POSITION_NOT_REACHABLE: (position: number) => `Position \"${position}\" is not reachable.`,\n  TRANSFORM_NOT_SUPPORTED: \"Browser does not support CSS transform.\",\n  STOP_CALLED_BY_USER: \"Event stop() is called by user.\",\n  ANIMATION_INTERRUPTED: \"Animation is interrupted by user input.\",\n  ANIMATION_ALREADY_PLAYING: \"Animation is already playing.\",\n  NOT_ALLOWED_IN_FRAMEWORK: \"This behavior is not allowed in the frameworks like React, Vue, or Angular.\",\n  NOT_INITIALIZED: \"Flicking is not initialized yet, call init() first.\",\n  NO_ACTIVE: \"There's no active panel that Flicking has selected. This may be due to the absence of any panels.\",\n  NOT_ALLOWED_IN_VIRTUAL: \"This behavior is not allowed when the virtual option is enabled\"\n} as const;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nexport { CODE as ERROR_CODE } from \"./error\";\n\n/**\n * Event type object with event name strings of {@link Flicking}\n * @ko {@link Flicking}의 이벤트 이름 문자열들을 담은 객체\n * @type {object}\n * @property {\"holdStart\"} HOLD_START holdStart event<ko>holdStart 이벤트</ko>\n * @property {\"holdEnd\"} HOLD_END holdEnd event<ko>holdEnd 이벤트</ko>\n * @property {\"moveStart\"} MOVE_START moveStart event<ko>moveStart 이벤트</ko>\n * @property {\"move\"} MOVE move event<ko>move 이벤트</ko>\n * @property {\"moveEnd\"} MOVE_END moveEnd event<ko>moveEnd 이벤트</ko>\n * @property {\"willChange\"} WILL_CHANGE willChange event<ko>willChange 이벤트</ko>\n * @property {\"changed\"} CHANGED changed event<ko>changed 이벤트</ko>\n * @property {\"willRestore\"} WILL_RESTORE willRestore event<ko>willRestore 이벤트</ko>\n * @property {\"restored\"} RESTORED restored event<ko>restored 이벤트</ko>\n * @property {\"select\"} SELECT select event<ko>select 이벤트</ko>\n * @property {\"needPanel\"} NEED_PANEL needPanel event<ko>needPanel 이벤트</ko>\n * @property {\"panelChange\"} PANEL_CHANGE panelChange event<ko>panelChange 이벤트</ko>\n * @example\n * ```ts\n * import { EVENTS } from \"@egjs/flicking\";\n * EVENTS.MOVE_START; // \"moveStart\"\n * ```\n */\nexport const EVENTS = {\n  READY: \"ready\",\n  BEFORE_RESIZE: \"beforeResize\",\n  AFTER_RESIZE: \"afterResize\",\n  HOLD_START: \"holdStart\",\n  HOLD_END: \"holdEnd\",\n  MOVE_START: \"moveStart\",\n  MOVE: \"move\",\n  MOVE_END: \"moveEnd\",\n  WILL_CHANGE: \"willChange\",\n  CHANGED: \"changed\",\n  WILL_RESTORE: \"willRestore\",\n  RESTORED: \"restored\",\n  SELECT: \"select\",\n  NEED_PANEL: \"needPanel\",\n  VISIBLE_CHANGE: \"visibleChange\",\n  REACH_EDGE: \"reachEdge\",\n  PANEL_CHANGE: \"panelChange\"\n} as const;\n\n/**\n * An object with all possible predefined literal string for the {@link Flicking#align align} option\n * @ko {@link Flicking#align align} 옵션에 사용되는 미리 정의된 리터럴 상수들을 담고 있는 객체\n * @type {object}\n * @property {\"prev\"} PREV left/top align<ko>좌/상 정렬</ko>\n * @property {\"center\"} CENTER center align<ko>중앙 정렬</ko>\n * @property {\"next\"} NEXT right/bottom align<ko>우/하 정렬</ko>\n */\nexport const ALIGN = {\n  PREV: \"prev\",\n  CENTER: \"center\",\n  NEXT: \"next\"\n} as const;\n\n/**\n * An object of directions\n * @ko 방향을 나타내는 값들을 담고 있는 객체\n * @type {object}\n * @property {\"PREV\"} PREV \"left\" when {@link Flicking#horizontal horizontal} is true, and \"top\" when {@link Flicking#horizontal horizontal} is false\n * <ko>{@link Flicking#horizontal horizontal}가 `true`일 경우 왼쪽, {@link Flicking#horizontal horizontal}가 `false`일 경우 위쪽을 의미합니다</ko>\n * @property {\"NEXT\"} NEXT \"right\" when {@link Flicking#horizontal horizontal} is true, and \"bottom\" when {@link Flicking#horizontal horizontal} is false\n * <ko>{@link Flicking#horizontal horizontal}가 `true`일 경우 오른쪽, {@link Flicking#horizontal horizontal}가 `false`일 경우 아래쪽을 의미합니다</ko>\n * @property {null} NONE This value usually means it's the same position<ko>주로 제자리인 경우를 의미합니다</ko>\n */\nexport const DIRECTION = {\n  PREV: \"PREV\",\n  NEXT: \"NEXT\",\n  NONE: null\n} as const;\n\n/**\n * An object with all possible {@link Flicking#moveType moveType}s\n * @ko Flicking이 제공하는 {@link Flicking#moveType moveType}들을 담고 있는 객체\n * @type {object}\n * @property {\"snap\"} SNAP Flicking's {@link Flicking#moveType moveType} that enables {@link SnapControl} as a Flicking's {@link Flicking#control control}\n * <ko>Flicking의 {@link Flicking#control control}을 {@link SnapControl}로 설정하게 하는 {@link Flicking#moveType moveType}</ko>\n * @property {\"freeScroll\"} FREE_SCROLL Flicking's {@link Flicking#moveType moveType} that enables {@link FreeControl} as a Flicking's {@link Flicking#control control}\n * <ko>Flicking의 {@link Flicking#control control}을 {@link FreeControl}로 설정하게 하는 {@link Flicking#moveType moveType}</ko>\n * @property {\"strict\"} STRICT Flicking's {@link Flicking#moveType moveType} that enables {@link StrictControl} as a Flicking's {@link Flicking#control control}\n * <ko>Flicking의 {@link Flicking#control control}을 {@link StrictControl}로 설정하게 하는 {@link Flicking#moveType moveType}</ko>\n */\nexport const MOVE_TYPE = {\n  SNAP: \"snap\",\n  FREE_SCROLL: \"freeScroll\",\n  STRICT: \"strict\"\n} as const;\n\nexport const CLASS = {\n  VERTICAL: \"vertical\",\n  HIDDEN: \"flicking-hidden\",\n  DEFAULT_VIRTUAL: \"flicking-panel\"\n};\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Flicking, { FlickingOptions } from \"./Flicking\";\nimport FlickingError from \"./core/FlickingError\";\nimport * as ERROR from \"./const/error\";\nimport { ALIGN, DIRECTION } from \"./const/external\";\nimport { LiteralUnion, Merged, ValueOf } from \"./type/internal\";\nimport { ElementLike } from \"./type/external\";\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport const merge = <From extends object, To extends object>(target: From, ...sources: To[]): Merged<From, To> => {\n  sources.forEach(source => {\n    Object.keys(source).forEach(key => {\n      target[key] = source[key] as unknown;\n    });\n  });\n\n  return target as Merged<From, To>;\n};\n\nexport const getElement = (el: HTMLElement | string | null, parent?: HTMLElement): HTMLElement => {\n  let targetEl: HTMLElement | null = null;\n\n  if (isString(el)) {\n    const parentEl = parent ? parent : document;\n    const queryResult = parentEl.querySelector(el);\n    if (!queryResult) {\n      throw new FlickingError(ERROR.MESSAGE.ELEMENT_NOT_FOUND(el), ERROR.CODE.ELEMENT_NOT_FOUND);\n    }\n    targetEl = queryResult as HTMLElement;\n  } else if (el && el.nodeType === Node.ELEMENT_NODE) {\n    targetEl = el;\n  }\n\n  if (!targetEl) {\n    throw new FlickingError(ERROR.MESSAGE.WRONG_TYPE(el, [\"HTMLElement\", \"string\"]), ERROR.CODE.WRONG_TYPE);\n  }\n\n  return targetEl;\n};\n\nexport const checkExistence = (value: any, nameOnErrMsg: string) => {\n  if (value == null) {\n    throw new FlickingError(ERROR.MESSAGE.VAL_MUST_NOT_NULL(value, nameOnErrMsg), ERROR.CODE.VAL_MUST_NOT_NULL);\n  }\n};\n\nexport const clamp = (x: number, min: number, max: number) => Math.max(Math.min(x, max), min);\n\nexport const getFlickingAttached = (val: Flicking | null): Flicking => {\n  if (!val) {\n    throw new FlickingError(ERROR.MESSAGE.NOT_ATTACHED_TO_FLICKING, ERROR.CODE.NOT_ATTACHED_TO_FLICKING);\n  }\n\n  return val;\n};\n\nexport const toArray = <T>(iterable: ArrayLike<T>): T[] => [].slice.call(iterable) as T[];\n\nexport const parseAlign = (align: LiteralUnion<ValueOf<typeof ALIGN>> | number, size: number): number => {\n  let alignPoint: number | null;\n  if (isString(align)) {\n    switch (align) {\n      case ALIGN.PREV:\n        alignPoint = 0;\n        break;\n      case ALIGN.CENTER:\n        alignPoint = 0.5 * size;\n        break;\n      case ALIGN.NEXT:\n        alignPoint = size;\n        break;\n      default:\n        alignPoint = parseArithmeticSize(align, size);\n        if (alignPoint == null) {\n          throw new FlickingError(ERROR.MESSAGE.WRONG_OPTION(\"align\", align), ERROR.CODE.WRONG_OPTION);\n        }\n    }\n  } else {\n    alignPoint = align as number;\n  }\n\n  return alignPoint;\n};\n\nexport const parseBounce = (bounce: FlickingOptions[\"bounce\"], size: number): number[] => {\n  let parsedBounce: Array<number | null>;\n\n  if (Array.isArray(bounce)) {\n    parsedBounce = (bounce as string[]).map(val => parseArithmeticSize(val, size));\n  } else {\n    const parsedVal = parseArithmeticSize(bounce, size);\n\n    parsedBounce = [parsedVal, parsedVal];\n  }\n\n  return parsedBounce.map(val => {\n    if (val == null) {\n      throw new FlickingError(ERROR.MESSAGE.WRONG_OPTION(\"bounce\", bounce), ERROR.CODE.WRONG_OPTION);\n    }\n    return val;\n  });\n};\n\nexport const parseArithmeticSize = (cssValue: number | string, base: number): number | null => {\n  const parsed = parseArithmeticExpression(cssValue);\n\n  if (parsed == null) return null;\n\n  return parsed.percentage * base + parsed.absolute;\n};\n\nexport const parseArithmeticExpression = (cssValue: number | string): { percentage: number; absolute: number } | null => {\n  const cssRegex = /(?:(\\+|\\-)\\s*)?(\\d+(?:\\.\\d+)?(%|px)?)/g;\n\n  if (typeof cssValue === \"number\") {\n    return { percentage: 0, absolute: cssValue };\n  }\n\n  const parsed = {\n    percentage: 0,\n    absolute: 0\n  };\n  let idx = 0;\n  let matchResult = cssRegex.exec(cssValue);\n  while (matchResult != null) {\n    let sign = matchResult[1];\n    const value = matchResult[2];\n    const unit = matchResult[3];\n    const parsedValue = parseFloat(value);\n\n    if (idx <= 0) {\n      sign = sign || \"+\";\n    }\n\n    // Return default value for values not in good form\n    if (!sign) {\n      return null;\n    }\n\n    const signMultiplier = sign === \"+\" ? 1 : -1;\n\n    if (unit === \"%\") {\n      parsed.percentage += signMultiplier * (parsedValue / 100);\n    } else {\n      parsed.absolute += signMultiplier * parsedValue;\n    }\n\n    // Match next occurrence\n    ++idx;\n    matchResult = cssRegex.exec(cssValue);\n  }\n\n  // None-matched\n  if (idx === 0) {\n    return null;\n  }\n\n  return parsed;\n};\n\nexport const parseCSSSizeValue = (val: string | number): string => isString(val) ? val : `${val}px`;\n\nexport const parsePanelAlign = (align: FlickingOptions[\"align\"]) => typeof align === \"object\"\n  ? (align as { panel: string | number }).panel\n  : align;\n\nexport const getDirection = (start: number, end: number): ValueOf<typeof DIRECTION> => {\n  if (start === end) return DIRECTION.NONE;\n  return start < end ? DIRECTION.NEXT : DIRECTION.PREV;\n};\n\nexport const parseElement = (element: ElementLike | ElementLike[]): HTMLElement[] => {\n  if (!Array.isArray(element)) {\n    element = [element];\n  }\n\n  const elements: HTMLElement[] = [];\n  element.forEach(el => {\n    if (isString(el)) {\n      const tempDiv = document.createElement(\"div\");\n      tempDiv.innerHTML = el;\n\n      elements.push(...toArray(tempDiv.children) as HTMLElement[]);\n      while (tempDiv.firstChild) {\n        tempDiv.removeChild(tempDiv.firstChild);\n      }\n    } else if (el && el.nodeType === Node.ELEMENT_NODE) {\n      elements.push(el);\n    } else {\n      throw new FlickingError(ERROR.MESSAGE.WRONG_TYPE(el, [\"HTMLElement\", \"string\"]), ERROR.CODE.WRONG_TYPE);\n    }\n  });\n\n  return elements;\n};\n\nexport const getMinusCompensatedIndex = (idx: number, max: number) => idx < 0 ? clamp(idx + max, 0, max) : clamp(idx, 0, max);\n\nexport const includes = <T>(array: T[], target: any): target is T => {\n  for (const val of array) {\n    if (val === target) return true;\n  }\n  return false;\n};\n\nexport const isString = (val: any): val is string => typeof val === \"string\";\n\nexport const circulatePosition = (pos: number, min: number, max: number) => {\n  const size = max - min;\n\n  if (pos < min) {\n    const offset = (min - pos) % size;\n    pos = max - offset;\n  } else if (pos > max) {\n    const offset = (pos - max) % size;\n    pos = min + offset;\n  }\n\n  return pos;\n};\n\nexport const find = <T>(array: T[], checker: (val: T) => boolean): T | null => {\n  for (const val of array) {\n    if (checker(val)) {\n      return val;\n    }\n  }\n\n  return null;\n};\n\nexport const findRight = <T>(array: T[], checker: (val: T) => boolean): T | null => {\n  for (let idx = array.length - 1; idx >= 0; idx--) {\n    const val = array[idx];\n    if (checker(val)) {\n      return val;\n    }\n  }\n\n  return null;\n};\n\nexport const findIndex = <T>(array: T[], checker: (val: T) => boolean): number => {\n  for (let idx = 0; idx < array.length; idx++) {\n    if (checker(array[idx])) {\n      return idx;\n    }\n  }\n\n  return -1;\n};\n\nexport const getProgress = (pos: number, prev: number, next: number) => (pos - prev) / (next - prev);\n\n// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\nexport const getStyle = (el: HTMLElement): CSSStyleDeclaration => window.getComputedStyle(el) || (el as any).currentStyle as CSSStyleDeclaration;\n\nexport const setSize = (el: HTMLElement, { width, height }: Partial<{\n  width: number | string;\n  height: number | string;\n}>) => {\n  if (width != null) {\n    if (isString(width)) {\n      el.style.width = width;\n    } else {\n      el.style.width = `${width}px`;\n    }\n  }\n  if (height != null) {\n    if (isString(height)) {\n      el.style.height = height;\n    } else {\n      el.style.height = `${height}px`;\n    }\n  }\n};\n\nexport const isBetween = (val: number, min: number, max: number) => val >= min && val <= max;\n\nexport const circulateIndex = (index: number, max: number): number => {\n  if (index >= max) {\n    return index % max;\n  } else if (index < 0) {\n    return getMinusCompensatedIndex((index + 1) % max - 1, max);\n  } else {\n    return index;\n  }\n};\n\nexport const range = (end: number): number[] => {\n  const arr = new Array(end);\n\n  for (let i = 0; i < end; i++) {\n    arr[i] = i;\n  }\n\n  return arr;\n};\n\nexport const setPrototypeOf = Object.setPrototypeOf || ((obj, proto) => {\n  obj.__proto__ = proto;\n  return obj;\n});\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport { setPrototypeOf } from \"../utils\";\n\n/**\n * Special type of known error that {@link Flicking} throws.\n * @ko Flicking 내부에서 알려진 오류 발생시 throw되는 에러\n * @property {number} code Error code<ko>에러 코드</ko>\n * @property {string} message Error message<ko>에러 메시지</ko>\n * @see {@link Constants.ERROR_CODE ERROR_CODE}\n * @example\n * ```ts\n * import Flicking, { FlickingError, ERROR_CODES } from \"@egjs/flicking\";\n * try {\n *   const flicking = new Flicking(\".flicking-viewport\")\n * } catch (e) {\n *   if (e instanceof FlickingError && e.code === ERROR_CODES.ELEMENT_NOT_FOUND) {\n *     console.error(\"Element not found\")\n *   }\n * }\n * ```\n */\nclass FlickingError extends Error {\n  public code: number;\n\n  /**\n   * @param message Error message<ko>에러 메시지</ko>\n   * @param code Error code<ko>에러 코드</ko>\n   */\n  public constructor(message: string, code: number) {\n    super(message);\n\n    setPrototypeOf(this, FlickingError.prototype);\n    this.name = \"FlickingError\";\n    this.code = code;\n  }\n}\n\nexport default FlickingError;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { getStyle, isString } from \"../utils\";\n\n/**\n * A component that manages viewport size\n * @ko 뷰포트 크기 정보를 담당하는 컴포넌트\n */\nclass Viewport {\n  private _el: HTMLElement;\n  private _width: number;\n  private _height: number;\n  private _isBorderBoxSizing: boolean;\n  private _padding: {\n    left: number;\n    right: number;\n    top: number;\n    bottom: number;\n  };\n\n  /**\n   * A viewport(root) element\n   * @ko 뷰포트(root) 엘리먼트\n   * @type {HTMLElement}\n   * @readonly\n   */\n  public get element() { return this._el; }\n\n  /**\n   * Viewport width, without paddings\n   * @ko 뷰포트 너비\n   * @type {number}\n   * @readonly\n   */\n  public get width() { return this._width - this._padding.left - this._padding.right; }\n  /**\n   * Viewport height, without paddings\n   * @ko 뷰포트 높이\n   * @type {number}\n   * @readonly\n   */\n  public get height() { return this._height - this._padding.top - this._padding.bottom; }\n  /**\n   * Viewport paddings\n   * @ko 뷰포트 CSS padding 값\n   * @type {object}\n   * @property {number} left CSS `padding-left`\n   * @property {number} right CSS `padding-right`\n   * @property {number} top CSS `padding-top`\n   * @property {number} bottom CSS `padding-bottom`\n   * @readonly\n   */\n  public get padding() { return this._padding; }\n\n  /**\n   * @param el A viewport element<ko>뷰포트 엘리먼트</ko>\n   */\n  public constructor(el: HTMLElement) {\n    this._el = el;\n    this._width = 0;\n    this._height = 0;\n    this._padding = {\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    };\n    this._isBorderBoxSizing = false;\n  }\n\n  /**\n   * Change viewport's size.\n   * This will change the actual size of `.flicking-viewport` element by changing its CSS width/height property\n   * @ko 뷰포트 크기를 변경합니다.\n   * `.flicking-viewport` 엘리먼트에 해당 크기의 CSS width/height를 적용합니다\n   * @param {object} [size] New viewport size<ko>새 뷰포트 크기</ko>\n   * @param {number|string} [size.width] CSS string or number(in px)<ko>CSS 문자열 또는 숫자(px)</ko>\n   * @param {number|string} [size.height] CSS string or number(in px)<ko>CSS 문자열 또는 숫자(px)</ko>\n   */\n  public setSize({\n    width,\n    height\n  }: Partial<{\n    width: number | string;\n    height: number | string;\n  }>) {\n    const el = this._el;\n    const padding = this._padding;\n    const isBorderBoxSizing = this._isBorderBoxSizing;\n\n    if (width != null) {\n      if (isString(width)) {\n        el.style.width = width;\n      } else {\n        const newWidth = isBorderBoxSizing\n          ? width + padding.left + padding.right\n          : width;\n        el.style.width = `${newWidth}px`;\n      }\n    }\n    if (height != null) {\n      if (isString(height)) {\n        el.style.height = height;\n      } else {\n        const newHeight = isBorderBoxSizing\n          ? height + padding.top + padding.bottom\n          : height;\n        el.style.height = `${newHeight}px`;\n      }\n    }\n    this.resize();\n  }\n\n  /**\n   * Update width/height to the current viewport element's size\n   * @ko 현재 뷰포트 엘리먼트의 크기로 너비/높이를 업데이트합니다\n   */\n  public resize() {\n    const el = this._el;\n    const elStyle = getStyle(el);\n\n    this._width = el.clientWidth;\n    this._height = el.clientHeight;\n    this._padding = {\n      left: parseFloat(elStyle.paddingLeft),\n      right: parseFloat(elStyle.paddingRight),\n      top: parseFloat(elStyle.paddingTop),\n      bottom: parseFloat(elStyle.paddingBottom)\n    };\n    this._isBorderBoxSizing = elStyle.boxSizing === \"border-box\";\n  }\n}\n\nexport default Viewport;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Flicking from \"../Flicking\";\n\nclass AutoResizer {\n  private _flicking: Flicking;\n  private _enabled: boolean;\n  private _resizeObserver: ResizeObserver | null;\n\n  public get enabled() { return this._enabled; }\n\n  public constructor(flicking: Flicking) {\n    this._flicking = flicking;\n    this._enabled = false;\n    this._resizeObserver = null;\n  }\n\n  public enable(): this {\n    const flicking = this._flicking;\n    const viewport = flicking.viewport;\n\n    if (this._enabled) {\n      this.disable();\n    }\n\n    if (flicking.useResizeObserver && !!window.ResizeObserver) {\n      const viewportSizeNot0 = viewport.width !== 0 || viewport.height !== 0;\n\n      const resizeObserver = viewportSizeNot0\n        ? new ResizeObserver(this._skipFirstResize)\n        : new ResizeObserver(this._onResize);\n\n      resizeObserver.observe(flicking.viewport.element);\n\n      this._resizeObserver = resizeObserver;\n    } else {\n      window.addEventListener(\"resize\", this._onResize);\n    }\n\n    this._enabled = true;\n\n    return this;\n  }\n\n  public disable(): this {\n    if (!this._enabled) return this;\n\n    const resizeObserver = this._resizeObserver;\n    if (resizeObserver) {\n      resizeObserver.disconnect();\n      this._resizeObserver = null;\n    } else {\n      window.removeEventListener(\"resize\", this._onResize);\n    }\n\n    this._enabled = false;\n\n    return this;\n  }\n\n  private _onResize = () => {\n    void this._flicking.resize();\n  };\n\n  // eslint-disable-next-line @typescript-eslint/member-ordering\n  private _skipFirstResize = (() => {\n    let isFirstResize = true;\n\n    return (() => {\n      if (isFirstResize) {\n        isFirstResize = false;\n        return;\n      }\n      this._onResize();\n    });\n  })();\n}\n\nexport default AutoResizer;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Flicking from \"../../Flicking\";\nimport { getProgress, getStyle, parseAlign, setSize } from \"../../utils\";\nimport { ALIGN, DIRECTION } from \"../../const/external\";\nimport { LiteralUnion, ValueOf } from \"../../type/internal\";\n\nimport ElementProvider from \"./provider/ElementProvider\";\n\nexport interface PanelOptions {\n  index: number;\n  align: LiteralUnion<ValueOf<typeof ALIGN>> | number;\n  flicking: Flicking;\n  elementProvider: ElementProvider;\n}\n\n/**\n * A slide data component that holds information of a single HTMLElement\n * @ko 슬라이드 데이터 컴포넌트로, 단일 HTMLElement의 정보를 갖고 있습니다\n */\nclass Panel {\n  // Internal States\n  protected _flicking: Flicking;\n  protected _elProvider: ElementProvider;\n  protected _index: number;\n  protected _pos: number;\n  protected _size: number;\n  protected _height: number;\n  protected _margin: { prev: number; next: number };\n  protected _alignPos: number; // Actual align pos\n  protected _rendered: boolean;\n  protected _removed: boolean;\n  protected _loading: boolean;\n  protected _toggleDirection: ValueOf<typeof DIRECTION>;\n  protected _toggled: boolean;\n  protected _togglePosition: number;\n\n  // Options\n  protected _align: PanelOptions[\"align\"];\n\n  // Internal States Getter\n  /**\n   * `HTMLElement` that panel's referencing\n   * @ko 패널이 참조하고 있는 `HTMLElement`\n   * @type {HTMLElement}\n   * @readonly\n   */\n  public get element() { return this._elProvider.element; }\n  /**\n   * @internal\n   * @readonly\n   */\n  public get elementProvider() { return this._elProvider; }\n  /**\n   * Index of the panel\n   * @ko 패널의 인덱스\n   * @type {number}\n   * @readonly\n   */\n  public get index() { return this._index; }\n  /**\n   * Position of the panel, including {@link Panel#alignPosition alignPosition}\n   * @ko 패널의 현재 좌표, {@link Panel#alignPosition alignPosition}을 포함하고 있습니다\n   * @type {number}\n   * @readonly\n   */\n  public get position() { return this._pos + this._alignPos; }\n  /**\n   * Cached size of the panel element\n   * This is equal to {@link Panel#element element}'s `offsetWidth` if {@link Flicking#horizontal horizontal} is `true`, and `offsetHeight` else\n   * @ko 패널 엘리먼트의 캐시된 크기\n   * 이 값은 {@link Flicking#horizontal horizontal}이 `true`일 경우 {@link Panel#element element}의 `offsetWidth`와 동일하고, `false`일 경우 `offsetHeight`와 동일합니다\n   * @type {number}\n   * @readonly\n   */\n  public get size() { return this._size; }\n  /**\n   * Panel's size including CSS `margin`\n   * This value includes {@link Panel#element element}'s margin left/right if {@link Flicking#horizontal horizontal} is `true`, and margin top/bottom else\n   * @ko CSS `margin`을 포함한 패널의 크기\n   * 이 값은 {@link Flicking#horizontal horizontal}이 `true`일 경우 margin left/right을 포함하고, `false`일 경우 margin top/bottom을 포함합니다\n   * @type {number}\n   * @readonly\n   */\n  public get sizeIncludingMargin() { return this._size + this._margin.prev + this._margin.next; }\n  /**\n   * Height of the panel element\n   * @ko 패널 엘리먼트의 높이\n   * @type {number}\n   * @readonly\n   */\n  public get height() { return this._height; }\n  /**\n   * Cached CSS `margin` value of the panel element\n   * @ko 패널 엘리먼트의 CSS `margin` 값\n   * @type {object}\n   * @property {number} prev CSS `margin-left` when the {@link Flicking#horizontal horizontal} is `true`, and `margin-top` else\n   * <ko>{@link Flicking#horizontal horizontal}이 `true`일 경우 `margin-left`, `false`일 경우 `margin-top`에 해당하는 값</ko>\n   * @property {number} next CSS `margin-right` when the {@link Flicking#horizontal horizontal} is `true`, and `margin-bottom` else\n   * <ko>{@link Flicking#horizontal horizontal}이 `true`일 경우 `margin-right`, `false`일 경우 `margin-bottom`에 해당하는 값</ko>\n   * @readonly\n   */\n  public get margin() { return this._margin; }\n  /**\n   * Align position inside the panel where {@link Camera}'s {@link Camera#alignPosition alignPosition} inside viewport should be located at\n   * @ko 패널의 정렬 기준 위치. {@link Camera}의 뷰포트 내에서의 {@link Camera#alignPosition alignPosition}이 위치해야 하는 곳입니다\n   * @type {number}\n   * @readonly\n   */\n  public get alignPosition() { return this._alignPos; }\n  /**\n   * A value indicating whether the panel's {@link Flicking#remove remove}d\n   * @ko 패널이 {@link Flicking#remove remove}되었는지 여부를 나타내는 값\n   * @type {boolean}\n   * @readonly\n   */\n  public get removed() { return this._removed; }\n  /**\n   * A value indicating whether the panel's element is being rendered on the screen\n   * @ko 패널의 엘리먼트가 화면상에 렌더링되고있는지 여부를 나타내는 값\n   * @type {boolean}\n   * @readonly\n   */\n  public get rendered() { return this._rendered; }\n  /**\n   * A value indicating whether the panel's image/video is not loaded and waiting for resize\n   * @ko 패널 내부의 이미지/비디오가 아직 로드되지 않아 {@link Panel#resize resize}될 것인지를 나타내는 값\n   * @type {boolean}\n   * @readonly\n   */\n  public get loading() { return this._loading; }\n  /**\n   * Panel element's range of the bounding box\n   * @ko 패널 엘리먼트의 Bounding box 범위\n   * @type {object}\n   * @property {number} [min] Bounding box's left({@link Flicking#horizontal horizontal}: true) / top({@link Flicking#horizontal horizontal}: false)\n   * @property {number} [max] Bounding box's right({@link Flicking#horizontal horizontal}: true) / bottom({@link Flicking#horizontal horizontal}: false)\n   * @readonly\n   */\n  public get range() { return { min: this._pos, max: this._pos + this._size }; }\n  /**\n   * A value indicating whether the panel's position is toggled by circular behavior\n   * @ko 패널의 위치가 circular 동작에 의해 토글되었는지 여부를 나타내는 값\n   * @type {boolean}\n   * @readonly\n   */\n  public get toggled() { return this._toggled; }\n  /**\n   * A direction where the panel's position is toggled\n   * @ko 패널의 위치가 circular 동작에 의해 토글되는 방향\n   * @type {DIRECTION}\n   * @readonly\n   */\n  public get toggleDirection() { return this._toggleDirection; }\n  /**\n   * Actual position offset determined by {@link Panel#order}\n   * @ko {@link Panel#order}에 의한 실제 위치 변경값\n   * @type {number}\n   * @readonly\n   */\n  public get offset() {\n    const toggleDirection = this._toggleDirection;\n    const cameraRangeDiff = this._flicking.camera.rangeDiff;\n\n    return toggleDirection === DIRECTION.NONE || !this._toggled\n      ? 0\n      : toggleDirection === DIRECTION.PREV\n        ? -cameraRangeDiff\n        : cameraRangeDiff;\n  }\n\n  /**\n   * Progress of movement between previous or next panel relative to current panel\n   * @ko 이 패널로부터 이전/다음 패널으로의 이동 진행률\n   * @type {number}\n   * @readonly\n   */\n  public get progress() {\n    const flicking = this._flicking;\n\n    return this.index - flicking.camera.progress;\n  }\n\n  /**\n   * Progress of movement between points that panel is completely invisible outside of viewport(prev direction: -1, selected point: 0, next direction: 1)\n   * @ko 현재 패널이 뷰포트 영역 밖으로 완전히 사라지는 지점을 기준으로 하는 진행도(prev방향: -1, 선택 지점: 0, next방향: 1)\n   * @type {number}\n   * @readonly\n   */\n  public get outsetProgress() {\n    const position = this.position + this.offset;\n    const alignPosition = this._alignPos;\n    const camera = this._flicking.camera;\n    const camPos = camera.position;\n\n    if (camPos === position) {\n      return 0;\n    }\n\n    if (camPos < position) {\n      const disappearPosNext = position + (camera.size - camera.alignPosition) + alignPosition;\n\n      return -getProgress(camPos, position, disappearPosNext);\n    } else {\n      const disappearPosPrev = position - (camera.alignPosition + this._size - alignPosition);\n\n      return 1 - getProgress(camPos, disappearPosPrev, position);\n    }\n  }\n\n  /**\n   * Percentage of area where panel is visible in the viewport\n   * @ko 뷰포트 안에서 패널이 보이는 영역의 비율\n   * @type {number}\n   * @readonly\n   */\n  public get visibleRatio() {\n    const range = this.range;\n    const size = this._size;\n    const offset = this.offset;\n    const visibleRange = this._flicking.camera.visibleRange;\n\n    const checkingRange = {\n      min: range.min + offset,\n      max: range.max + offset\n    };\n\n    if (checkingRange.max <= visibleRange.min || checkingRange.min >= visibleRange.max) {\n      return 0;\n    }\n\n    let visibleSize = size;\n\n    if (visibleRange.min > checkingRange.min) {\n      visibleSize -= visibleRange.min - checkingRange.min;\n    }\n    if (visibleRange.max < checkingRange.max) {\n      visibleSize -= checkingRange.max - visibleRange.max;\n    }\n\n    return visibleSize / size;\n  }\n\n  public set loading(val: boolean) { this._loading = val; }\n\n  // Options Getter\n  /**\n   * A value indicating where the {@link Panel#alignPosition alignPosition} should be located at inside the panel element\n   * @ko {@link Panel#alignPosition alignPosition}이 패널 내의 어디에 위치해야 하는지를 나타내는 값\n   * @type {Constants.ALIGN | string | number}\n   */\n  public get align() { return this._align; }\n\n  // Options Setter\n  public set align(val: PanelOptions[\"align\"]) { this._align = val; }\n\n  /**\n   * @param {object} options An options object<ko>옵션 오브젝트</ko>\n   * @param {number} [options.index] An initial index of the panel<ko>패널의 초기 인덱스</ko>\n   * @param {Constants.ALIGN | string | number} [options.align] An initial {@link Flicking#align align} value of the panel<ko>패널의 초기 {@link Flicking#align align}값</ko>\n   * @param {Flicking} [options.flicking] A Flicking instance panel's referencing<ko>패널이 참조하는 {@link Flicking} 인스턴스</ko>\n   * @param {Flicking} [options.elementProvider] A provider instance that redirects elements<ko>실제 엘리먼트를 반환하는 엘리먼트 공급자의 인스턴스</ko>\n   */\n  public constructor({\n    index,\n    align,\n    flicking,\n    elementProvider\n  }: PanelOptions) {\n    this._index = index;\n    this._flicking = flicking;\n    this._elProvider = elementProvider;\n\n    this._align = align;\n\n    this._removed = false;\n    this._rendered = true;\n    this._loading = false;\n    this._resetInternalStates();\n  }\n\n  /**\n   * Mark panel element to be appended on the camera element\n   * @internal\n   */\n  public markForShow() {\n    this._rendered = true;\n    this._elProvider.show(this._flicking);\n  }\n\n  /**\n   * Mark panel element to be removed from the camera element\n   * @internal\n   */\n  public markForHide() {\n    this._rendered = false;\n    this._elProvider.hide(this._flicking);\n  }\n\n  /**\n   * Update size of the panel\n   * @ko 패널의 크기를 갱신합니다\n   * @param {object} cached Predefined cached size of the panel<ko>사전에 캐시된 패널의 크기 정보</ko>\n   * @chainable\n   * @return {this}\n   */\n  public resize(cached?: {\n    size: number;\n    height: number;\n    margin: { prev: number; next: number };\n  }): this {\n    const el = this.element;\n    const flicking = this._flicking;\n    const horizontal = flicking.horizontal;\n\n    if (cached) {\n      this._size = cached.size;\n      this._margin = { ...cached.margin };\n      this._height = cached.height;\n    } else {\n      const elStyle = getStyle(el);\n\n      this._size = horizontal ? el.offsetWidth : el.offsetHeight;\n      this._margin = horizontal\n        ? {\n          prev: parseFloat(elStyle.marginLeft || \"0\"),\n          next: parseFloat(elStyle.marginRight || \"0\")\n        } : {\n          prev: parseFloat(elStyle.marginTop || \"0\"),\n          next: parseFloat(elStyle.marginBottom || \"0\")\n        };\n      this._height = horizontal ? el.offsetHeight : this._size;\n    }\n\n    this.updatePosition();\n    this._updateAlignPos();\n\n    return this;\n  }\n\n  /**\n   * Change panel's size. This will change the actual size of the panel element by changing its CSS width/height property\n   * @ko 패널 크기를 변경합니다. 패널 엘리먼트에 해당 크기의 CSS width/height를 적용합니다\n   * @param {object} [size] New panel size<ko>새 패널 크기</ko>\n   * @param {number|string} [size.width] CSS string or number(in px)<ko>CSS 문자열 또는 숫자(px)</ko>\n   * @param {number|string} [size.height] CSS string or number(in px)<ko>CSS 문자열 또는 숫자(px)</ko>\n   * @chainable\n   * @return {this}\n   */\n  public setSize(size: Partial<{\n    width: number | string;\n    height: number | string;\n  }>): this {\n    setSize(this.element, size);\n\n    return this;\n  }\n\n  /**\n   * Check whether the given element is inside of this panel's {@link Panel#element element}\n   * @ko 해당 엘리먼트가 이 패널의 {@link Panel#element element} 내에 포함되어 있는지를 반환합니다\n   * @param {HTMLElement} element The HTMLElement to check<ko>확인하고자 하는 HTMLElement</ko>\n   * @return {boolean} A Boolean value indicating the element is inside of this panel {@link Panel#element element}<ko>패널의 {@link Panel#element element}내에 해당 엘리먼트 포함 여부</ko>\n   */\n  public contains(element: HTMLElement): boolean {\n    return !!this.element?.contains(element);\n  }\n\n  /**\n   * Reset internal state and set {@link Panel#removed removed} to `true`\n   * @ko 내부 상태를 초기화하고 {@link Panel#removed removed}를 `true`로 설정합니다.\n   * @return {void}\n   */\n  public destroy(): void {\n    this._resetInternalStates();\n    this._removed = true;\n  }\n\n  /**\n   * Check whether the given position is inside of this panel's {@link Panel#range range}\n   * @ko 주어진 좌표가 현재 패널의 {@link Panel#range range}내에 속해있는지를 반환합니다.\n   * @param {number} pos A position to check<ko>확인하고자 하는 좌표</ko>\n   * @param {boolean} [includeMargin=false] Include {@link Panel#margin margin} to the range<ko>패널 영역에 {@link Panel#margin margin}값을 포함시킵니다</ko>\n   * @return {boolean} A Boolean value indicating whether the given position is included in the panel range<ko>해당 좌표가 패널 영역 내에 속해있는지 여부</ko>\n   */\n  public includePosition(pos: number, includeMargin: boolean = false): boolean {\n    return this.includeRange(pos, pos, includeMargin);\n  }\n\n  /**\n   * Check whether the given range is fully included in this panel's area (inclusive)\n   * @ko 주어진 범위가 이 패널 내부에 완전히 포함되는지를 반환합니다\n   * @param {number} min Minimum value of the range to check<ko>확인하고자 하는 최소 범위</ko>\n   * @param {number} max Maximum value of the range to check<ko>확인하고자 하는 최대 범위</ko>\n   * @param {boolean} [includeMargin=false] Include {@link Panel#margin margin} to the range<ko>패널 영역에 {@link Panel#margin margin}값을 포함시킵니다</ko>\n   * @returns {boolean} A Boolean value indicating whether the given range is fully included in the panel range<ko>해당 범위가 패널 영역 내에 완전히 속해있는지 여부</ko>\n   */\n  public includeRange(min: number, max: number, includeMargin: boolean = false): boolean {\n    const margin = this._margin;\n    const panelRange = this.range;\n\n    if (includeMargin) {\n      panelRange.min -= margin.prev;\n      panelRange.max += margin.next;\n    }\n\n    return max >= panelRange.min && min <= panelRange.max;\n  }\n\n  /**\n   * Check whether the panel is visble in the given range (exclusive)\n   * @ko 주어진 범위 내에서 이 패널의 일부가 보여지는지를 반환합니다\n   * @param {number} min Minimum value of the range to check<ko>확인하고자 하는 최소 범위</ko>\n   * @param {number} max Maximum value of the range to check<ko>확인하고자 하는 최대 범위</ko>\n   * @returns {boolean} A Boolean value indicating whether the panel is visible<ko>해당 범위 내에서 패널을 볼 수 있는지 여부</ko>\n   */\n  public isVisibleOnRange(min: number, max: number): boolean {\n    const panelRange = this.range;\n\n    return max > panelRange.min && min < panelRange.max;\n  }\n\n  /**\n   * Move {@link Camera} to this panel\n   * @ko {@link Camera}를 이 패널로 이동합니다\n   * @param {number} [duration] Duration of the animation (unit: ms)<ko>애니메이션 진행 시간 (단위: ms)</ko>\n   * @returns {Promise<void>} A Promise which will be resolved after reaching the panel<ko>패널 도달시에 resolve되는 Promise</ko>\n   */\n  public focus(duration?: number) {\n    return this._flicking.moveTo(this._index, duration);\n  }\n\n  /**\n   * Get previous(`index - 1`) panel. When the previous panel does not exist, this will return `null` instead\n   * If the {@link Flicking#circularEnabled circular} is enabled, this will return the last panel if called from the first panel\n   * @ko 이전(`index - 1`) 패널을 반환합니다. 이전 패널이 없을 경우 `null`을 반환합니다\n   * {@link Flicking#circularEnabled circular} 모드가 활성화되었을 때 첫번째 패널에서 이 메소드를 호출할 경우 마지막 패널을 반환합니다\n   * @returns {Panel | null} The previous panel<ko>이전 패널</ko>\n   */\n  public prev(): Panel | null {\n    const index = this._index;\n    const flicking = this._flicking;\n    const renderer = flicking.renderer;\n    const panelCount = renderer.panelCount;\n\n    if (panelCount === 1) return null;\n\n    return flicking.circularEnabled\n      ? renderer.getPanel(index === 0 ? panelCount - 1 : index - 1)\n      : renderer.getPanel(index - 1);\n  }\n\n  /**\n   * Get next(`index + 1`) panel. When the next panel does not exist, this will return `null` instead\n   * If the {@link Flicking#circularEnabled circular} is enabled, this will return the first panel if called from the last panel\n   * @ko 다음(`index + 1`) 패널을 반환합니다. 다음 패널이 없을 경우 `null`을 반환합니다\n   * {@link Flicking#circularEnabled circular} 모드가 활성화되었을 때 마지막 패널에서 이 메소드를 호출할 경우 첫번째 패널을 반환합니다\n   * @returns {Panel | null} The previous panel<ko>다음 패널</ko>\n   */\n  public next(): Panel | null {\n    const index = this._index;\n    const flicking = this._flicking;\n    const renderer = flicking.renderer;\n    const panelCount = renderer.panelCount;\n\n    if (panelCount === 1) return null;\n\n    return flicking.circularEnabled\n      ? renderer.getPanel(index === panelCount - 1 ? 0 : index + 1)\n      : renderer.getPanel(index + 1);\n  }\n\n  /**\n   * Increase panel's index by the given value\n   * @ko 패널의 인덱스를 주어진 값만큼 증가시킵니다\n   * @internal\n   * @chainable\n   * @param val An integer greater than or equal to 0<ko>0보다 같거나 큰 정수</ko>\n   * @returns {this}\n   */\n  public increaseIndex(val: number): this {\n    this._index += Math.max(val, 0);\n    return this;\n  }\n\n  /**\n   * Decrease panel's index by the given value\n   * @ko 패널의 인덱스를 주어진 값만큼 감소시킵니다\n   * @internal\n   * @chainable\n   * @param val An integer greater than or equal to 0<ko>0보다 같거나 큰 정수</ko>\n   * @returns {this}\n   */\n  public decreaseIndex(val: number): this {\n    this._index -= Math.max(val, 0);\n    return this;\n  }\n\n  /**\n   * @internal\n   */\n  public updatePosition(): this {\n    const prevPanel = this._flicking.renderer.panels[this._index - 1];\n\n    this._pos = prevPanel\n      ? prevPanel.range.max + prevPanel.margin.next + this._margin.prev\n      : this._margin.prev;\n\n    return this;\n  }\n\n  /**\n   * @internal\n   * @return {boolean} toggled\n   */\n  public toggle(prevPos: number, newPos: number): boolean {\n    const toggleDirection = this._toggleDirection;\n    const togglePosition = this._togglePosition;\n\n    if (toggleDirection === DIRECTION.NONE || newPos === prevPos) return false;\n\n    const prevToggled = this._toggled;\n\n    if (newPos > prevPos) {\n      if (togglePosition >= prevPos && togglePosition <= newPos) {\n        this._toggled = toggleDirection === DIRECTION.NEXT;\n      }\n    } else {\n      if (togglePosition <= prevPos && togglePosition >= newPos) {\n        this._toggled = toggleDirection !== DIRECTION.NEXT;\n      }\n    }\n\n    return prevToggled !== this._toggled;\n  }\n\n  /**\n   * @internal\n   */\n  public updateCircularToggleDirection(): this {\n    const flicking = this._flicking;\n\n    if (!flicking.circularEnabled) {\n      this._toggleDirection = DIRECTION.NONE;\n      this._toggled = false;\n      return this;\n    }\n\n    const camera = flicking.camera;\n    const camRange = camera.range;\n    const camAlignPosition = camera.alignPosition;\n    const camVisibleRange = camera.visibleRange;\n    const camVisibleSize = camVisibleRange.max - camVisibleRange.min;\n\n    const minimumVisible = camRange.min - camAlignPosition;\n    const maximumVisible = camRange.max - camAlignPosition + camVisibleSize;\n\n    const shouldBeVisibleAtMin = this.includeRange(maximumVisible - camVisibleSize, maximumVisible, false);\n    const shouldBeVisibleAtMax = this.includeRange(minimumVisible, minimumVisible + camVisibleSize, false);\n\n    this._toggled = false;\n    if (shouldBeVisibleAtMin) {\n      this._toggleDirection = DIRECTION.PREV;\n      this._togglePosition = this.range.max + camRange.min - camRange.max + camAlignPosition;\n      this.toggle(Infinity, camera.position);\n    } else if (shouldBeVisibleAtMax) {\n      this._toggleDirection = DIRECTION.NEXT;\n      this._togglePosition = this.range.min + camRange.max - camVisibleSize + camAlignPosition;\n      this.toggle(-Infinity, camera.position);\n    } else {\n      this._toggleDirection = DIRECTION.NONE;\n      this._togglePosition = 0;\n    }\n\n    return this;\n  }\n\n  private _updateAlignPos() {\n    this._alignPos = parseAlign(this._align, this._size);\n  }\n\n  private _resetInternalStates() {\n    this._size = 0;\n    this._pos = 0;\n    this._margin = { prev: 0, next: 0 };\n    this._height = 0;\n    this._alignPos = 0;\n    this._toggled = false;\n    this._togglePosition = 0;\n    this._toggleDirection = DIRECTION.NONE;\n  }\n}\n\nexport default Panel;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Panel, { PanelOptions } from \"./Panel\";\nimport ExternalElementProvider from \"./provider/ExternalElementProvider\";\n\nexport interface ExternalPanelOptions extends PanelOptions {\n  elementProvider: ExternalElementProvider;\n}\n\n/**\n * A slide data component that holds information of a single HTMLElement\n * @ko 슬라이드 데이터 컴포넌트로, 단일 HTMLElement의 정보를 갖고 있습니다\n */\nclass ExternalPanel extends Panel {\n  protected _elProvider: ExternalElementProvider;\n\n  public get rendered() { return this._elProvider.rendered; }\n\n  public constructor(options: ExternalPanelOptions) {\n    super(options);\n\n    this._elProvider = options.elementProvider;\n  }\n\n  public markForShow() {\n    this._elProvider.show(this._flicking);\n\n    return super.markForShow();\n  }\n\n  public markForHide() {\n    this._elProvider.hide(this._flicking);\n\n    return super.markForHide();\n  }\n}\n\nexport default ExternalPanel;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { DIRECTION } from \"../../const/external\";\nimport { circulateIndex } from \"../../utils\";\n\nimport Panel, { PanelOptions } from \"./Panel\";\nimport VirtualElementProvider from \"./provider/VirtualElementProvider\";\n\ninterface VirtualPanelOptions extends PanelOptions {\n  elementProvider: VirtualElementProvider;\n}\n\n/**\n * An slide data component that holds information of a single HTMLElement\n * @ko 슬라이드 데이터 컴포넌트로, 단일 HTMLElement의 정보를 갖고 있습니다\n */\nclass VirtualPanel extends Panel {\n  protected _elProvider: VirtualElementProvider;\n  protected _cachedInnerHTML: string | null;\n\n  /**\n   * `HTMLElement` that panel's referencing\n   * @ko 패널이 참조하고 있는 `HTMLElement`\n   * @type {HTMLElement}\n   * @readonly\n   */\n  public get element() { return this._elProvider.element; }\n\n  /**\n   * Cached innerHTML by the previous render function\n   * @ko 이전 렌더링에서 캐시된 innerHTML 정보\n   * @type {string|null}\n   * @readonly\n   */\n  public get cachedInnerHTML() { return this._cachedInnerHTML; }\n\n  /**\n   * An number for indexing which element it will be rendered on\n   * @ko 몇 번째 엘리먼트에 렌더링될 것인지를 나타내는 숫자\n   * @type {number}\n   * @readonly\n   */\n  public get elementIndex() {\n    const flicking = this._flicking;\n    const virtualElCount = flicking.panelsPerView + 1;\n    const panelCount = flicking.panelCount;\n    let index = this._index;\n\n    if (this._toggled) {\n      // To prevent element duplication\n      index = this._toggleDirection === DIRECTION.NEXT\n        ? index + panelCount\n        : index - panelCount;\n    }\n\n    return circulateIndex(index, virtualElCount);\n  }\n\n  /**\n   * @param {object} options An options object<ko>옵션 오브젝트</ko>\n   * @param {number} [options.index] An initial index of the panel<ko>패널의 초기 인덱스</ko>\n   * @param {Constants.ALIGN | string | number} [options.align] An initial {@link Flicking#align align} value of the panel<ko>패널의 초기 {@link Flicking#align align}값</ko>\n   * @param {Flicking} [options.flicking] A Flicking instance panel's referencing<ko>패널이 참조하는 {@link Flicking} 인스턴스</ko>\n   */\n  public constructor(options: VirtualPanelOptions) {\n    super(options);\n\n    options.elementProvider.init(this);\n    this._elProvider = options.elementProvider;\n    this._cachedInnerHTML = null;\n  }\n\n  public cacheRenderResult(result: string) {\n    this._cachedInnerHTML = result;\n  }\n\n  public uncacheRenderResult() {\n    this._cachedInnerHTML = null;\n  }\n\n  public render() {\n    const flicking = this._flicking;\n    const { renderPanel, cache } = flicking.virtual;\n\n    const element = this._elProvider.element;\n    const newInnerHTML = this._cachedInnerHTML || renderPanel(this, this._index);\n\n    if (newInnerHTML === element.innerHTML) return;\n\n    element.innerHTML = newInnerHTML;\n\n    if (cache) {\n      this.cacheRenderResult(newInnerHTML);\n    }\n  }\n\n  public increaseIndex(val: number) {\n    this.uncacheRenderResult();\n    return super.increaseIndex(val);\n  }\n\n  public decreaseIndex(val: number) {\n    this.uncacheRenderResult();\n    return super.decreaseIndex(val);\n  }\n}\n\nexport default VirtualPanel;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Flicking from \"../../../Flicking\";\n\nimport ElementProvider from \"./ElementProvider\";\n\n/**\n * @internal\n */\nclass VanillaElementProvider implements ElementProvider {\n  private _element: HTMLElement;\n\n  public get element() { return this._element; }\n\n  public constructor(element: HTMLElement) {\n    this._element = element;\n  }\n\n  public show(flicking: Flicking): void {\n    const el = this.element;\n    const cameraEl = flicking.camera.element;\n\n    if (el.parentElement !== cameraEl) {\n      cameraEl.appendChild(el);\n    }\n  }\n\n  public hide(flicking: Flicking): void {\n    const el = this.element;\n    const cameraEl = flicking.camera.element;\n\n    if (el.parentElement === cameraEl) {\n      cameraEl.removeChild(el);\n    }\n  }\n}\n\nexport default VanillaElementProvider;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport Flicking from \"../../../Flicking\";\nimport VirtualPanel from \"../VirtualPanel\";\n\nimport ElementProvider from \"./ElementProvider\";\n\n/**\n * @internal\n */\nclass VirtualElementProvider implements ElementProvider {\n  private _flicking: Flicking;\n  private _panel: VirtualPanel;\n\n  public get element() {\n    const flicking = this._flicking;\n    const elIndex = this._panel.elementIndex;\n    const virtualElements = flicking.virtual.elements;\n\n    return virtualElements[elIndex].nativeElement;\n  }\n\n  public constructor(flicking: Flicking) {\n    this._flicking = flicking;\n  }\n\n  public init(panel: VirtualPanel) {\n    this._panel = panel;\n  }\n\n  public show(): void {\n    // DO_NOTHING\n    // Actual element visibility is controlled by VirtualManager\n  }\n\n  public hide(): void {\n    // DO_NOTHING\n    // Actual element visibility is controlled by VirtualManager\n  }\n}\n\nexport default VirtualElementProvider;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Flicking from \"../Flicking\";\nimport { range } from \"../utils\";\nimport { CLASS } from \"../const/external\";\n\nimport VirtualPanel from \"./panel/VirtualPanel\";\n\nexport interface VirtualOptions {\n  renderPanel: (panel: VirtualPanel, index: number) => string;\n  initialPanelCount: number;\n  cache?: boolean;\n  panelClass?: string;\n}\n\n/**\n * A manager class to add / remove virtual panels\n */\nclass VirtualManager {\n  private _flicking: Flicking;\n\n  private _renderPanel: (panel: VirtualPanel, index: number) => string;\n  private _initialPanelCount: number;\n  private _cache: boolean;\n  private _panelClass: string;\n\n  private _elements: Array<{ nativeElement: HTMLElement; visible: boolean }>;\n\n  public get elements() { return this._elements; }\n\n  // Options\n  /**\n   * A rendering function for the panel element's innerHTML\n   * @ko 패널 엘리먼트의 innerHTML을 렌더링하는 함수\n   * @type {function}\n   * @param {VirtualPanel} panel Instance of the panel<ko>패널 인스턴스</ko>\n   * @param {number} index Index of the panel<ko>패널 인덱스</ko>\n   * @default \"() => {}\"\n   */\n  public get renderPanel() { return this._renderPanel; }\n  /**\n   * Initial panel count to render\n   * @ko 최초로 렌더링할 패널의 개수\n   * @readonly\n   * @type {number}\n   * @default -1\n   */\n  public get initialPanelCount() { return this._initialPanelCount; }\n  /**\n   * Whether to cache rendered panel's innerHTML\n   * @ko 렌더링된 패널의 innerHTML 정보를 캐시할지 여부\n   * @type {boolean}\n   * @default false\n   */\n  public get cache() { return this._cache; }\n  /**\n   * The class name that will be applied to rendered panel elements\n   * @ko 렌더링되는 패널 엘리먼트에 적용될 클래스 이름\n   * @type {string}\n   * @default \"flicking-panel\"\n   */\n  public get panelClass() { return this._panelClass; }\n\n  public set renderPanel(val: VirtualOptions[\"renderPanel\"]) {\n    this._renderPanel = val;\n    this._flicking.renderer.panels.forEach((panel: VirtualPanel) => panel.uncacheRenderResult());\n  }\n\n  public set cache(val: NonNullable<VirtualOptions[\"cache\"]>) { this._cache = val; }\n  public set panelClass(val: NonNullable<VirtualOptions[\"panelClass\"]>) { this._panelClass = val; }\n\n  public constructor(flicking: Flicking, options: VirtualOptions | null) {\n    this._flicking = flicking;\n\n    this._renderPanel = options?.renderPanel ?? (() => \"\");\n    this._initialPanelCount = options?.initialPanelCount ?? -1;\n    this._cache = options?.cache ?? false;\n    this._panelClass = options?.panelClass ?? CLASS.DEFAULT_VIRTUAL;\n\n    this._elements = [];\n  }\n\n  public init() {\n    const flicking = this._flicking;\n\n    if (!flicking.virtualEnabled) return;\n\n    if (!flicking.renderExternal) {\n      this._initVirtualElements();\n    }\n\n    const virtualElements = flicking.camera.children;\n    this._elements = virtualElements.map(el => ({ nativeElement: el, visible: true }));\n  }\n\n  public show(index: number) {\n    const el = this._elements[index];\n    const nativeEl = el.nativeElement;\n\n    el.visible = true;\n\n    if (nativeEl.style.display) {\n      nativeEl.style.display = \"\";\n    }\n  }\n\n  public hide(index: number) {\n    const el = this._elements[index];\n    const nativeEl = el.nativeElement;\n\n    el.visible = false;\n    nativeEl.style.display = \"none\";\n  }\n\n  /**\n   * Add new virtual panels at the end of the list\n   * @ko 새로운 가상 패널들을 리스트의 끝에 추가합니다\n   * @param {number} count The number of panels to add<ko>추가할 패널의 개수</ko>\n   * @returns {Array<VirtualPanel>} The new panels added<ko>새롭게 추가된 패널들</ko>\n   */\n  public append(count: number = 1): VirtualPanel[] {\n    const flicking = this._flicking;\n\n    return this.insert(flicking.panels.length, count);\n  }\n\n  /**\n   * Add new virtual panels at the start of the list\n   * @ko 새로운 가상 패널들을 리스트의 시작에 추가합니다\n   * @param {number} count The number of panels to add<ko>추가할 패널의 개수</ko>\n   * @returns {Array<VirtualPanel>} The new panels added<ko>새롭게 추가된 패널들</ko>\n   */\n  public prepend(count: number = 1): VirtualPanel[] {\n    return this.insert(0, count);\n  }\n\n  /**\n   * Add new virtual panels at the given index\n   * @ko 새로운 가상 패널들을 주어진 인덱스에 추가합니다\n   * @param {number} count The number of panels to add<ko>추가할 패널의 개수</ko>\n   * @returns {Array<VirtualPanel>} The new panels added<ko>새롭게 추가된 패널들</ko>\n   */\n  public insert(index: number, count: number = 1): VirtualPanel[] {\n    if (count <= 0) return [];\n\n    const flicking = this._flicking;\n\n    return flicking.renderer.batchInsert({ index, elements: range(count), hasDOMInElements: false }) as VirtualPanel[];\n  }\n\n  /**\n   * Remove panels at the given index\n   * @ko 주어진 인덱스에서 패널들을 삭제합니다\n   * @param {number} count The number of panels to remove<ko>삭제할 패널의 개수</ko>\n   * @returns {Array<VirtualPanel>} The panels removed<ko>삭제된 패널들</ko>\n   */\n  public remove(index: number, count: number): VirtualPanel[] {\n    if (count <= 0) return [];\n\n    const flicking = this._flicking;\n\n    return flicking.renderer.batchRemove({ index, deleteCount: count, hasDOMInElements: false }) as VirtualPanel[];\n  }\n\n  private _initVirtualElements() {\n    const flicking = this._flicking;\n    const cameraElement = flicking.camera.element;\n    const panelsPerView = flicking.panelsPerView;\n    const fragment = document.createDocumentFragment();\n\n    const newElements = range(panelsPerView + 1).map(idx => {\n      const panelEl = document.createElement(\"div\");\n      panelEl.className = this._panelClass;\n      panelEl.dataset.elementIndex = idx.toString();\n      return panelEl;\n    });\n\n    newElements.forEach(el => {\n      fragment.appendChild(el);\n    });\n\n    cameraElement.appendChild(fragment);\n  }\n}\n\nexport default VirtualManager;\n","/**\n * All possible @egjs/axes event keys\n * @internal\n */\nexport const EVENT = {\n  HOLD: \"hold\",\n  CHANGE: \"change\",\n  RELEASE: \"release\",\n  ANIMATION_END: \"animationEnd\",\n  FINISH: \"finish\"\n} as const;\n\n/**\n * An Axis key that Flicking uses\n * @internal\n */\nexport const POSITION_KEY = \"flick\";\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { OnAnimationEnd, OnChange, OnFinish, OnHold, OnRelease } from \"@egjs/axes\";\nimport { ComponentEvent } from \"@egjs/component\";\n\nimport Flicking from \"../../Flicking\";\nimport Panel from \"../../core/panel/Panel\";\nimport { EVENTS } from \"../../const/external\";\nimport * as AXES from \"../../const/axes\";\nimport { circulatePosition, getDirection } from \"../../utils\";\n\nexport enum STATE_TYPE {\n  IDLE,\n  HOLDING,\n  DRAGGING,\n  ANIMATING,\n  DISABLED\n}\n\n/**\n * A component that shows the current status of the user input or the animation\n * @ko 현재 사용자 입력 또는 애니메이션 상태를 나타내는 컴포넌트\n * @internal\n */\nabstract class State {\n  /**\n   * Whether user is clicking or touching\n   * @ko 현재 사용자가 클릭/터치중인지 여부\n   * @type {boolean}\n   * @readonly\n   */\n  public abstract readonly holding: boolean;\n  /**\n   * Whether Flicking's animating\n   * @ko 현재 애니메이션 동작 여부\n   * @type {boolean}\n   * @readonly\n   */\n  public abstract readonly animating: boolean;\n\n  protected _delta: number = 0;\n  protected _targetPanel: Panel | null = null;\n\n  /**\n   * A sum of delta values of change events from the last hold event of Axes\n   * @ko 이전 hold이벤트부터 change에 의해 발생한 이동 delta값의 합산\n   * @type {number}\n   * @readonly\n   */\n  public get delta() { return this._delta; }\n\n  /**\n   * A panel to set as {@link Control#activePanel} after the animation is finished\n   * @ko 애니메이션 종료시 {@link Control#activePanel}로 설정할 패널\n   * @type {number}\n   * @readonly\n   */\n  public get targetPanel() { return this._targetPanel; }\n\n  public set targetPanel(val: Panel | null) { this._targetPanel = val; }\n\n  /**\n   * An callback which is called when state has changed to this state\n   * @ko 현재 상태로 돌입했을때 호출되는 콜백 함수\n   * @param {State} prevState An previous state<ko>이전 상태값</ko>\n   * @return {void}\n   */\n  public onEnter(prevState: State): void {\n    this._delta = prevState._delta;\n    this._targetPanel = prevState._targetPanel;\n  }\n\n  /**\n   * An event handler for Axes's {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:hold hold} event\n   * @ko Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:hold hold} 이벤트 핸들러\n   * @param {object} [ctx] Event context<ko>이벤트 콘텍스트</ko>\n   * @param {Flicking} [ctx.flicking] An instance of Flicking<ko>Flicking 인스턴스</ko>\n   * @param {object} [ctx.axesEvent] A {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:hold hold} event of Axes\n   * <ko>Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:hold hold} 이벤트</ko>\n   * @param {function} [ctx.transitTo] A function for changing current state to other state<ko>다른 상태로 변경하기 위한 함수</ko>\n   * @return {void}\n   */\n  public onHold(ctx: {\n    flicking: Flicking;\n    axesEvent: OnHold;\n    transitTo: (nextState: STATE_TYPE) => State;\n  }): void {\n    // DO NOTHING\n  }\n\n  /**\n   * An event handler for Axes's {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:change change} event\n   * @ko Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:change change} 이벤트 핸들러\n   * @param {object} [ctx] Event context<ko>이벤트 콘텍스트</ko>\n   * @param {Flicking} [ctx.flicking] An instance of Flicking<ko>Flicking 인스턴스</ko>\n   * @param {object} [ctx.axesEvent] A {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:change change} event of Axes\n   * <ko>Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:change change} 이벤트</ko>\n   * @param {function} [ctx.transitTo] A function for changing current state to other state<ko>다른 상태로 변경하기 위한 함수</ko>\n   * @return {void}\n   */\n  public onChange(ctx: {\n    flicking: Flicking;\n    axesEvent: OnChange;\n    transitTo: (nextState: STATE_TYPE) => State;\n  }): void {\n    // DO NOTHING\n  }\n\n  /**\n   * An event handler for Axes's {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} event\n   * @ko Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} 이벤트 핸들러\n   * @param {object} [ctx] Event context<ko>이벤트 콘텍스트</ko>\n   * @param {Flicking} [ctx.flicking] An instance of Flicking<ko>Flicking 인스턴스</ko>\n   * @param {object} [ctx.axesEvent] A {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} event of Axes\n   * <ko>Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} 이벤트</ko>\n   * @param {function} [ctx.transitTo] A function for changing current state to other state<ko>다른 상태로 변경하기 위한 함수</ko>\n   * @return {void}\n   */\n  public onRelease(ctx: {\n    flicking: Flicking;\n    axesEvent: OnRelease;\n    transitTo: (nextState: STATE_TYPE) => State;\n  }): void {\n    // DO NOTHING\n  }\n\n  /**\n   * An event handler for Axes's {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:animationEnd animationEnd} event\n   * @ko Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:animationEnd animationEnd} 이벤트 핸들러\n   * @param {object} [ctx] Event context<ko>이벤트 콘텍스트</ko>\n   * @param {Flicking} [ctx.flicking] An instance of Flicking<ko>Flicking 인스턴스</ko>\n   * @param {object} [ctx.axesEvent] A {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:animationEnd animationEnd} event of Axes\n   * <ko>Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:animationEnd animationEnd} 이벤트</ko>\n   * @param {function} [ctx.transitTo] A function for changing current state to other state<ko>다른 상태로 변경하기 위한 함수</ko>\n   * @return {void}\n   */\n  public onAnimationEnd(ctx: {\n    flicking: Flicking;\n    axesEvent: OnAnimationEnd;\n    transitTo: (nextState: STATE_TYPE) => State;\n  }): void {\n    // DO NOTHING\n  }\n\n  /**\n   * An event handler for Axes's {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:finish finish} event\n   * @ko Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:finish finish} 이벤트 핸들러\n   * @param {object} [ctx] Event context<ko>이벤트 콘텍스트</ko>\n   * @param {Flicking} [ctx.flicking] An instance of Flicking<ko>Flicking 인스턴스</ko>\n   * @param {object} [ctx.axesEvent] A {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:finish finish} event of Axes<ko>Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:finish finish} 이벤트</ko>\n   * @param {function} [ctx.transitTo] A function for changing current state to other state<ko>다른 상태로 변경하기 위한 함수</ko>\n   * @return {void}\n   */\n  public onFinish(ctx: {\n    flicking: Flicking;\n    axesEvent: OnFinish;\n    transitTo: (nextState: STATE_TYPE) => State;\n  }): void {\n    // DO NOTHING\n  }\n\n  protected _moveToChangedPosition(ctx: Parameters<State[\"onChange\"]>[0]): void {\n    const { flicking, axesEvent, transitTo } = ctx;\n    const delta = axesEvent.delta[AXES.POSITION_KEY];\n\n    if (!delta) {\n      return;\n    }\n\n    this._delta += delta;\n\n    const camera = flicking.camera;\n    const prevPosition = camera.position;\n    const position = axesEvent.pos[AXES.POSITION_KEY];\n    const newPosition = flicking.circularEnabled\n      ? circulatePosition(position, camera.range.min, camera.range.max)\n      : position;\n\n    camera.lookAt(newPosition);\n\n    const moveEvent = new ComponentEvent(EVENTS.MOVE, {\n      isTrusted: axesEvent.isTrusted,\n      holding: this.holding,\n      direction: getDirection(0, axesEvent.delta[AXES.POSITION_KEY]),\n      axesEvent\n    });\n\n    flicking.trigger(moveEvent);\n\n    if (moveEvent.isCanceled()) {\n      // Return to previous position\n      camera.lookAt(prevPosition);\n      transitTo(STATE_TYPE.DISABLED);\n    }\n  }\n}\n\nexport default State;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { ComponentEvent } from \"@egjs/component\";\n\nimport { EVENTS } from \"../../const/external\";\nimport { getDirection } from \"../../utils\";\n\nimport State, { STATE_TYPE } from \"./State\";\n\n/**\n * A default state when there's no user input and no animation's playing\n * @ko 사용자의 입력이 없고, 애니메이션이 동작하고있지 않은 기본 상태\n * @internal\n */\nclass IdleState extends State {\n  /**\n   * Whether user is clicking or touching\n   * @ko 현재 사용자가 클릭/터치중인지 여부\n   * @type {false}\n   * @readonly\n   */\n  public readonly holding = false;\n  /**\n   * Whether Flicking's animating\n   * @ko 현재 애니메이션 동작 여부\n   * @type {false}\n   * @readonly\n   */\n  public readonly animating = false;\n\n  public onEnter() {\n    this._delta = 0;\n    this._targetPanel = null;\n  }\n\n  public onHold(ctx: Parameters<State[\"onHold\"]>[0]): void {\n    // Shouldn't do any action until any panels on flicking area\n    const { flicking, axesEvent, transitTo } = ctx;\n\n    if (flicking.renderer.panelCount <= 0) {\n      transitTo(STATE_TYPE.DISABLED);\n      return;\n    }\n\n    const holdStartEvent = new ComponentEvent(EVENTS.HOLD_START, {\n      axesEvent\n    });\n\n    flicking.trigger(holdStartEvent);\n\n    if (holdStartEvent.isCanceled()) {\n      transitTo(STATE_TYPE.DISABLED);\n    } else {\n      transitTo(STATE_TYPE.HOLDING);\n    }\n  }\n\n  // By methods call\n  public onChange(ctx: Parameters<State[\"onChange\"]>[0]): void {\n    const { flicking, axesEvent, transitTo } = ctx;\n    const controller = flicking.control.controller;\n    const animatingContext = controller.animatingContext;\n\n    const moveStartEvent = new ComponentEvent(EVENTS.MOVE_START, {\n      isTrusted: axesEvent.isTrusted,\n      holding: this.holding,\n      direction: getDirection(animatingContext.start, animatingContext.end),\n      axesEvent\n    });\n    flicking.trigger(moveStartEvent);\n\n    if (moveStartEvent.isCanceled()) {\n      transitTo(STATE_TYPE.DISABLED);\n    } else {\n      // Trigger AnimatingState's onChange, to trigger \"move\" event immediately\n      transitTo(STATE_TYPE.ANIMATING).onChange(ctx);\n    }\n  }\n}\n\nexport default IdleState;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { OnRelease } from \"@egjs/axes\";\nimport { ComponentEvent } from \"@egjs/component\";\n\nimport Panel from \"../../core/panel/Panel\";\nimport { EVENTS } from \"../../const/external\";\nimport { getDirection } from \"../../utils\";\n\nimport State, { STATE_TYPE } from \"./State\";\n\n/**\n * A state that activates when user's holding the Flicking area, but not moved a single pixel yet\n * @ko 사용자의 입력이 시작되었으나, 아직 움직이지는 않은 상태\n * @internal\n */\nclass HoldingState extends State {\n  /**\n   * Whether user is clicking or touching\n   * @ko 현재 사용자가 클릭/터치중인지 여부\n   * @type {true}\n   * @readonly\n   */\n  public readonly holding = true;\n  /**\n   * Whether Flicking's animating\n   * @ko 현재 애니메이션 동작 여부\n   * @type {false}\n   * @readonly\n   */\n  public readonly animating = false;\n\n  private _releaseEvent: OnRelease | null = null;\n\n  public onChange(ctx: Parameters<State[\"onChange\"]>[0]): void {\n    const { flicking, axesEvent, transitTo } = ctx;\n\n    const inputEvent = axesEvent.inputEvent as { offsetX: number; offsetY: number };\n\n    const offset = flicking.horizontal\n      ? inputEvent.offsetX\n      : inputEvent.offsetY;\n\n    const moveStartEvent = new ComponentEvent(EVENTS.MOVE_START, {\n      isTrusted: axesEvent.isTrusted,\n      holding: this.holding,\n      direction: getDirection(0, -offset),\n      axesEvent\n    });\n    flicking.trigger(moveStartEvent);\n\n    if (moveStartEvent.isCanceled()) {\n      transitTo(STATE_TYPE.DISABLED);\n    } else {\n      // Trigger DraggingState's onChange, to trigger \"move\" event immediately\n      transitTo(STATE_TYPE.DRAGGING).onChange(ctx);\n    }\n  }\n\n  public onRelease(ctx: Parameters<State[\"onRelease\"]>[0]): void {\n    const { flicking, axesEvent, transitTo } = ctx;\n\n    flicking.trigger(new ComponentEvent(EVENTS.HOLD_END, { axesEvent }));\n\n    if (axesEvent.delta.flick !== 0) {\n      // Sometimes \"release\" event on axes triggered before \"change\" event\n      // Especially if user flicked panel fast in really short amount of time\n      // if delta is not zero, that means above case happened.\n\n      // Event flow should be HOLD_START -> MOVE_START -> MOVE -> HOLD_END\n      // At least one move event should be included between holdStart and holdEnd\n      axesEvent.setTo({ flick: flicking.camera.position }, 0);\n      transitTo(STATE_TYPE.IDLE);\n      return;\n    }\n\n    // Can't handle select event here,\n    // As \"finish\" axes event happens\n    this._releaseEvent = axesEvent;\n  }\n\n  public onFinish(ctx: Parameters<State[\"onFinish\"]>[0]): void {\n    const { flicking, transitTo } = ctx;\n\n    // Should transite to IDLE state before select event\n    // As user expects hold is already finished\n    transitTo(STATE_TYPE.IDLE);\n\n    if (!this._releaseEvent) {\n      return;\n    }\n\n    // Handle release event here\n    // To prevent finish event called twice\n    const releaseEvent = this._releaseEvent;\n\n    // Static click\n    /* eslint-disable @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access */\n    const srcEvent = releaseEvent.inputEvent.srcEvent;\n\n    let clickedElement: HTMLElement;\n    if (srcEvent.type === \"touchend\") {\n      const touchEvent = srcEvent as TouchEvent;\n      const touch = touchEvent.changedTouches[0];\n      clickedElement = document.elementFromPoint(touch.clientX, touch.clientY) as HTMLElement;\n    } else {\n      clickedElement = srcEvent.target;\n    }\n    /* eslint-enable */\n\n    const panels = flicking.renderer.panels;\n    let clickedPanel: Panel | null = null;\n\n    for (const panel of panels) {\n      if (panel.contains(clickedElement)) {\n        clickedPanel = panel;\n        break;\n      }\n    }\n\n    if (clickedPanel) {\n      const cameraPosition = flicking.camera.position;\n      const clickedPanelPosition = clickedPanel.position;\n\n      flicking.trigger(new ComponentEvent(EVENTS.SELECT, {\n        index: clickedPanel.index,\n        panel: clickedPanel,\n        // Direction to the clicked panel\n        direction: getDirection(cameraPosition, clickedPanelPosition)\n      }));\n    }\n  }\n}\n\nexport default HoldingState;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { ComponentEvent } from \"@egjs/component\";\n\nimport { EVENTS } from \"../../const/external\";\nimport * as AXES from \"../../const/axes\";\n\nimport State, { STATE_TYPE } from \"./State\";\n\n/**\n * A state that activates when user's dragging the Flicking area\n * @ko 사용자가 드래깅중인 상태\n * @internal\n */\nclass DraggingState extends State {\n  /**\n   * Whether user is clicking or touching\n   * @ko 현재 사용자가 클릭/터치중인지 여부\n   * @type {true}\n   * @readonly\n   */\n  public readonly holding = true;\n  /**\n   * Whether Flicking's animating\n   * @ko 현재 애니메이션 동작 여부\n   * @type {true}\n   * @readonly\n   */\n  public readonly animating = true;\n\n  public onChange(ctx: Parameters<State[\"onChange\"]>[0]): void {\n    this._moveToChangedPosition(ctx);\n  }\n\n  public onRelease(ctx: Parameters<State[\"onRelease\"]>[0]): void {\n    const { flicking, axesEvent, transitTo } = ctx;\n\n    // Update last position to cope with Axes's animating behavior\n    // Axes uses start position when animation start\n    flicking.trigger(new ComponentEvent(EVENTS.HOLD_END, {\n      axesEvent\n    }));\n\n    if (flicking.renderer.panelCount <= 0) {\n      // There're no panels\n      transitTo(STATE_TYPE.IDLE);\n      return;\n    }\n\n    transitTo(STATE_TYPE.ANIMATING);\n\n    const control = flicking.control;\n    const position = axesEvent.destPos[AXES.POSITION_KEY];\n    const duration = Math.max(axesEvent.duration, flicking.duration);\n\n    void control.moveToPosition(position, duration, axesEvent);\n  }\n}\n\nexport default DraggingState;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { ComponentEvent } from \"@egjs/component\";\n\nimport { EVENTS } from \"../../const/external\";\nimport { getDirection } from \"../../utils\";\n\nimport State, { STATE_TYPE } from \"./State\";\n\n/**\n * A state that activates when Flicking's animating by user input or method call\n * @ko 사용자 입력이나 메소드 호출에 의해 Flicking의 애니메이션이 동작중인 상태\n * @internal\n */\nclass AnimatingState extends State {\n  /**\n   * Whether user is clicking or touching\n   * @ko 현재 사용자가 클릭/터치중인지 여부\n   * @type {false}\n   * @readonly\n   */\n  public readonly holding = false;\n  /**\n   * Whether Flicking's animating\n   * @ko 현재 애니메이션 동작 여부\n   * @type {true}\n   * @readonly\n   */\n  public readonly animating = true;\n\n  public onHold(ctx: Parameters<State[\"onHold\"]>[0]): void {\n    const { flicking, axesEvent, transitTo } = ctx;\n\n    this._delta = 0;\n    flicking.control.updateInput();\n\n    const holdStartEvent = new ComponentEvent(EVENTS.HOLD_START, { axesEvent });\n    flicking.trigger(holdStartEvent);\n\n    if (holdStartEvent.isCanceled()) {\n      transitTo(STATE_TYPE.DISABLED);\n    } else {\n      transitTo(STATE_TYPE.DRAGGING);\n    }\n  }\n\n  public onChange(ctx: Parameters<State[\"onChange\"]>[0]): void {\n    this._moveToChangedPosition(ctx);\n  }\n\n  public onFinish(ctx: Parameters<State[\"onFinish\"]>[0]) {\n    const { flicking, axesEvent, transitTo } = ctx;\n\n    const control = flicking.control;\n    const controller = control.controller;\n    const animatingContext = controller.animatingContext;\n\n    transitTo(STATE_TYPE.IDLE);\n\n    flicking.trigger(new ComponentEvent(EVENTS.MOVE_END, {\n      isTrusted: axesEvent.isTrusted,\n      direction: getDirection(animatingContext.start, animatingContext.end),\n      axesEvent\n    }));\n\n    control.setActive(this._targetPanel!, control.activePanel, axesEvent.isTrusted);\n  }\n}\n\nexport default AnimatingState;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport State, { STATE_TYPE } from \"./State\";\n\n/**\n * A state that activates when Flicking is stopped by event's `stop` method\n * @ko 이벤트의 `stop`호출에 의해 Flicking이 정지된 상태\n * @internal\n */\nclass DisabledState extends State {\n  /**\n   * Whether user is clicking or touching\n   * @ko 현재 사용자가 클릭/터치중인지 여부\n   * @type {false}\n   * @readonly\n   */\n  public readonly holding = false;\n  /**\n   * Whether Flicking's animating\n   * @ko 현재 애니메이션 동작 여부\n   * @type {true}\n   * @readonly\n   */\n  public readonly animating = true;\n\n  public onAnimationEnd(ctx: Parameters<State[\"onAnimationEnd\"]>[0]): void {\n    const { transitTo } = ctx;\n\n    transitTo(STATE_TYPE.IDLE);\n  }\n\n  public onChange(ctx: Parameters<State[\"onChange\"]>[0]): void {\n    const { axesEvent, transitTo } = ctx;\n\n    // Can stop Axes's change event\n    axesEvent.stop();\n\n    transitTo(STATE_TYPE.IDLE);\n  }\n\n  public onRelease(ctx: Parameters<State[\"onRelease\"]>[0]): void {\n    const { axesEvent, transitTo } = ctx;\n\n    // This is needed when stopped hold start event\n    if (axesEvent.delta.flick === 0) {\n      transitTo(STATE_TYPE.IDLE);\n    }\n  }\n}\n\nexport default DisabledState;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { AxesEvents } from \"@egjs/axes\";\n\nimport Flicking from \"../Flicking\";\nimport * as AXES from \"../const/axes\";\n\nimport IdleState from \"./states/IdleState\";\nimport HoldingState from \"./states/HoldingState\";\nimport DraggingState from \"./states/DraggingState\";\nimport AnimatingState from \"./states/AnimatingState\";\nimport DisabledState from \"./states/DisabledState\";\nimport State, { STATE_TYPE } from \"./states/State\";\n\n/**\n * @internal\n */\nclass StateMachine {\n  private _state: State;\n\n  public get state(): State { return this._state; }\n\n  public constructor() {\n    this._state = new IdleState();\n  }\n\n  public fire(eventType: keyof AxesEvents, externalCtx: {\n    flicking: Flicking;\n    axesEvent: any;\n  }) {\n    const currentState = this._state;\n    const ctx = { ...externalCtx, transitTo: this.transitTo };\n\n    switch (eventType) {\n      case AXES.EVENT.HOLD:\n        currentState.onHold(ctx);\n        break;\n      case AXES.EVENT.CHANGE:\n        currentState.onChange(ctx);\n        break;\n      case AXES.EVENT.RELEASE:\n        currentState.onRelease(ctx);\n        break;\n      case AXES.EVENT.ANIMATION_END:\n        currentState.onAnimationEnd(ctx);\n        break;\n      case AXES.EVENT.FINISH:\n        currentState.onFinish(ctx);\n        break;\n    }\n  }\n\n  public transitTo = (nextStateType: STATE_TYPE): State => {\n    let nextState: State;\n\n    switch (nextStateType) {\n      case STATE_TYPE.IDLE:\n        nextState = new IdleState();\n        break;\n      case STATE_TYPE.HOLDING:\n        nextState = new HoldingState();\n        break;\n      case STATE_TYPE.DRAGGING:\n        nextState = new DraggingState();\n        break;\n      case STATE_TYPE.ANIMATING:\n        nextState = new AnimatingState();\n        break;\n      case STATE_TYPE.DISABLED:\n        nextState = new DisabledState();\n        break;\n    }\n\n    nextState.onEnter(this._state);\n\n    this._state = nextState;\n\n    return this._state;\n  };\n}\n\nexport default StateMachine;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Axes, { PanInput, AxesEvents, OnRelease } from \"@egjs/axes\";\n\nimport Flicking from \"../Flicking\";\nimport FlickingError from \"../core/FlickingError\";\nimport * as AXES from \"../const/axes\";\nimport * as ERROR from \"../const/error\";\nimport { circulatePosition, getFlickingAttached, parseBounce } from \"../utils\";\nimport { ControlParams } from \"../type/external\";\n\nimport StateMachine from \"./StateMachine\";\n\n/**\n * A controller that handles the {@link https://naver.github.io/egjs-axes/ @egjs/axes} events\n * @ko {@link https://naver.github.io/egjs-axes/ @egjs/axes}의 이벤트를 처리하는 컨트롤러 컴포넌트\n * @internal\n */\nclass AxesController {\n  private _flicking: Flicking | null;\n  private _axes: Axes | null;\n  private _panInput: PanInput | null;\n  private _stateMachine: StateMachine;\n\n  private _animatingContext: { start: number; end: number; offset: number };\n  private _dragged: boolean;\n\n  /**\n   * An {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html Axes} instance\n   * @ko {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html Axes}의 인스턴스\n   * @type {Axes}\n   * @see https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html\n   * @readonly\n   */\n  public get axes() { return this._axes; }\n  /**\n   * @internal\n   */\n  public get stateMachine() { return this._stateMachine; }\n  /**\n   * A activated {@link State} that shows the current status of the user input or the animation\n   * @ko 현재 활성화된 {@link State} 인스턴스로 사용자 입력 또는 애니메이션 상태를 나타냅니다\n   * @type {State}\n   */\n  public get state() { return this._stateMachine.state; }\n  /**\n   * A context of the current animation playing\n   * @ko 현재 재생중인 애니메이션 정보\n   * @type {object}\n   * @property {number} start A start position of the animation<ko>애니메이션 시작 지점</ko>\n   * @property {number} end A end position of the animation<ko>애니메이션 끝 지점</ko>\n   * @property {number} offset camera offset<ko>카메라 오프셋</ko>\n   * @readonly\n   */\n  public get animatingContext() { return this._animatingContext; }\n  /**\n   * A current control parameters of the Axes instance\n   * @ko 활성화된 현재 Axes 패러미터들\n   * @type {ControlParams}\n   */\n  public get controlParams(): ControlParams {\n    const axes = this._axes;\n\n    if (!axes) {\n      return {\n        range: { min: 0, max: 0 },\n        position: 0,\n        circular: false\n      };\n    }\n\n    const axis = axes.axis[AXES.POSITION_KEY];\n\n    return {\n      range: { min: axis.range![0], max: axis.range![1] },\n      circular: (axis.circular as boolean[])[0],\n      position: this.position\n    };\n  }\n\n  /**\n   * A Boolean indicating whether the user input is enabled\n   * @ko 현재 사용자 입력이 활성화되었는지를 나타내는 값\n   * @type {boolean}\n   * @readonly\n   */\n  public get enabled() { return this._panInput?.isEnable() ?? false; }\n  /**\n   * Current position value in {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html Axes} instance\n   * @ko {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html Axes} 인스턴스 내부의 현재 좌표 값\n   * @type {number}\n   * @readonly\n   */\n  public get position() { return this._axes?.get([AXES.POSITION_KEY])[AXES.POSITION_KEY] ?? 0; }\n  /**\n   * Current range value in {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html Axes} instance\n   * @ko {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html Axes} 인스턴스 내부의 현재 이동 범위 값\n   * @type {number[]}\n   * @readonly\n   */\n  public get range() { return this._axes?.axis[AXES.POSITION_KEY].range ?? [0, 0]; }\n  /**\n   * Actual bounce size(px)\n   * @ko 적용된 bounce 크기(px 단위)\n   * @type {number[]}\n   * @readonly\n   */\n  public get bounce() { return this._axes?.axis[AXES.POSITION_KEY].bounce as number[] | undefined; }\n\n  /** */\n  public constructor() {\n    this._resetInternalValues();\n    this._stateMachine = new StateMachine();\n  }\n\n  /**\n   * Initialize AxesController\n   * @ko AxesController를 초기화합니다\n   * @param {Flicking} flicking An instance of Flicking\n   * @chainable\n   * @return {this}\n   */\n  public init(flicking: Flicking): this {\n    this._flicking = flicking;\n\n    this._axes = new Axes({\n      [AXES.POSITION_KEY]: {\n        range: [0, 0],\n        circular: false,\n        bounce: [0, 0]\n      }\n    }, {\n      deceleration: flicking.deceleration,\n      interruptable: flicking.interruptable,\n      easing: flicking.easing\n    });\n    this._panInput = new PanInput(flicking.viewport.element, {\n      inputType: flicking.inputType,\n      iOSEdgeSwipeThreshold: flicking.iOSEdgeSwipeThreshold,\n      scale: flicking.horizontal ? [-1, 0] : [0, -1],\n      releaseOnScroll: true\n    });\n\n    const axes = this._axes;\n\n    axes.connect(flicking.horizontal ? [AXES.POSITION_KEY, \"\"] : [\"\", AXES.POSITION_KEY], this._panInput);\n\n    for (const key in AXES.EVENT) {\n      const eventType = AXES.EVENT[key] as keyof AxesEvents;\n\n      axes.on(eventType, (e: AxesEvents[typeof eventType]) => {\n        this._stateMachine.fire(eventType, {\n          flicking,\n          axesEvent: e\n        });\n      });\n    }\n\n    return this;\n  }\n\n  /**\n   * Destroy AxesController and return to initial state\n   * @ko AxesController를 초기 상태로 되돌립니다\n   * @return {void}\n   */\n  public destroy(): void {\n    if (this._axes) {\n      this.removePreventClickHandler();\n      this._axes.destroy();\n    }\n\n    this._panInput?.destroy();\n\n    this._resetInternalValues();\n  }\n\n  /**\n   * Enable input from the user (mouse/touch)\n   * @ko 사용자의 입력(마우스/터치)를 활성화합니다\n   * @chainable\n   * @return {this}\n   */\n  public enable(): this {\n    this._panInput?.enable();\n\n    return this;\n  }\n\n  /**\n   * Disable input from the user (mouse/touch)\n   * @ko 사용자의 입력(마우스/터치)를 막습니다\n   * @chainable\n   * @return {this}\n   */\n  public disable(): this {\n    this._panInput?.disable();\n\n    return this;\n  }\n\n  /**\n   * Update {@link https://naver.github.io/egjs-axes/ @egjs/axes}'s state\n   * @ko {@link https://naver.github.io/egjs-axes/ @egjs/axes}의 상태를 갱신합니다\n   * @chainable\n   * @throws {FlickingError}\n   * {@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link AxesController#init init} is not called before\n   * <ko>{@link AxesController#init init}이 이전에 호출되지 않은 경우</ko>\n   * @return {this}\n   */\n  public update(controlParams: ControlParams): this {\n    const flicking = getFlickingAttached(this._flicking);\n    const camera = flicking.camera;\n    const axes = this._axes!;\n    const axis = axes.axis[AXES.POSITION_KEY];\n\n    axis.circular = [controlParams.circular, controlParams.circular];\n    axis.range = [controlParams.range.min, controlParams.range.max];\n    axis.bounce = parseBounce(flicking.bounce, camera.size);\n\n    axes.axm.set({ [AXES.POSITION_KEY]: controlParams.position });\n\n    return this;\n  }\n\n  /**\n   * Attach a handler to the camera element to prevent click events during animation\n   * @ko 카메라 엘리먼트에 애니메이션 도중에 클릭 이벤트를 방지하는 핸들러를 부착합니다\n   * @return {this}\n   */\n  public addPreventClickHandler(): this {\n    const flicking = getFlickingAttached(this._flicking);\n    const axes = this._axes!;\n    const cameraEl = flicking.camera.element;\n\n    axes.on(AXES.EVENT.HOLD, this._onAxesHold);\n    axes.on(AXES.EVENT.CHANGE, this._onAxesChange);\n    cameraEl.addEventListener(\"click\", this._preventClickWhenDragged, true);\n\n    return this;\n  }\n\n  /**\n   * Detach a handler to the camera element to prevent click events during animation\n   * @ko 카메라 엘리먼트에 애니메이션 도중에 클릭 이벤트를 방지하는 핸들러를 탈착합니다\n   * @return {this}\n   */\n  public removePreventClickHandler(): this {\n    const flicking = getFlickingAttached(this._flicking);\n    const axes = this._axes!;\n    const cameraEl = flicking.camera.element;\n\n    axes.off(AXES.EVENT.HOLD, this._onAxesHold);\n    axes.off(AXES.EVENT.CHANGE, this._onAxesChange);\n    cameraEl.removeEventListener(\"click\", this._preventClickWhenDragged, true);\n\n    return this;\n  }\n\n  /**\n   * Run Axes's {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#setTo setTo} using the given position\n   * @ko Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#setTo setTo} 메소드를 주어진 좌표를 이용하여 수행합니다\n   * @param {number} position A position to move<ko>이동할 좌표</ko>\n   * @param {number} duration Duration of the animation (unit: ms)<ko>애니메이션 진행 시간 (단위: ms)</ko>\n   * @param {number} [axesEvent] If provided, it'll use its {@link https://naver#github#io/egjs-axes/release/latest/doc/eg#Axes#html#setTo setTo} method instead<ko>이 값이 주어졌을 경우, 해당 이벤트의 {@link https://naver#github#io/egjs-axes/release/latest/doc/eg#Axes#html#setTo setTo} 메소드를 대신해서 사용합니다.</ko>\n   * @throws {FlickingError}\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|When {@link Control#init init} is not called before|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|When the animation is interrupted by user input|\n   * <ko>\n   *\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|{@link Control#init init}이 이전에 호출되지 않은 경우|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|사용자 입력에 의해 애니메이션이 중단된 경우|\n   *\n   * </ko>\n   * @return {Promise<void>} A Promise which will be resolved after reaching the target position<ko>해당 좌표 도달시에 resolve되는 Promise</ko>\n   */\n  public animateTo(position: number, duration: number, axesEvent?: OnRelease): Promise<void> {\n    const axes = this._axes;\n    const state = this._stateMachine.state;\n\n    if (!axes) {\n      return Promise.reject(new FlickingError(ERROR.MESSAGE.NOT_ATTACHED_TO_FLICKING, ERROR.CODE.NOT_ATTACHED_TO_FLICKING));\n    }\n\n    const startPos = axes.get([AXES.POSITION_KEY])[AXES.POSITION_KEY];\n\n    if (startPos === position) {\n      const flicking = getFlickingAttached(this._flicking);\n\n      flicking.camera.lookAt(position);\n\n      if (state.targetPanel) {\n        flicking.control.setActive(state.targetPanel, flicking.control.activePanel, axesEvent?.isTrusted ?? false);\n      }\n      return Promise.resolve();\n    }\n\n    this._animatingContext = {\n      start: startPos,\n      end: position,\n      offset: 0\n    };\n\n    const animate = () => {\n      const resetContext = () => {\n        this._animatingContext = { start: 0, end: 0, offset: 0 };\n      };\n\n      axes.once(AXES.EVENT.FINISH, resetContext);\n\n      if (axesEvent) {\n        axesEvent.setTo({ [AXES.POSITION_KEY]: position }, duration);\n      } else {\n        axes.setTo({ [AXES.POSITION_KEY]: position }, duration);\n      }\n    };\n\n    if (duration === 0) {\n      const flicking = getFlickingAttached(this._flicking);\n      const camera = flicking.camera;\n\n      animate();\n\n      const newPos = flicking.circularEnabled\n        ? circulatePosition(position, camera.range.min, camera.range.max)\n        : position;\n\n      axes.axm.set({ [AXES.POSITION_KEY]: newPos });\n\n      return Promise.resolve();\n    } else {\n      return new Promise((resolve, reject) => {\n        const animationFinishHandler = () => {\n          axes.off(AXES.EVENT.HOLD, interruptionHandler);\n          resolve();\n        };\n\n        const interruptionHandler = () => {\n          axes.off(AXES.EVENT.FINISH, animationFinishHandler);\n          reject(new FlickingError(ERROR.MESSAGE.ANIMATION_INTERRUPTED, ERROR.CODE.ANIMATION_INTERRUPTED));\n        };\n\n        axes.once(AXES.EVENT.FINISH, animationFinishHandler);\n        axes.once(AXES.EVENT.HOLD, interruptionHandler);\n\n        animate();\n      });\n    }\n  }\n\n  private _resetInternalValues() {\n    this._flicking = null;\n    this._axes = null;\n    this._panInput = null;\n    this._animatingContext = { start: 0, end: 0, offset: 0 };\n    this._dragged = false;\n  }\n\n  private _onAxesHold = () => {\n    this._dragged = false;\n  };\n\n  private _onAxesChange = () => {\n    this._dragged = true;\n  };\n\n  private _preventClickWhenDragged = (e: MouseEvent) => {\n    if (this._dragged) {\n      e.preventDefault();\n      e.stopPropagation();\n    }\n\n    this._dragged = false;\n  };\n}\n\nexport default AxesController;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { OnRelease } from \"@egjs/axes\";\nimport { ComponentEvent } from \"@egjs/component\";\n\nimport Flicking from \"../Flicking\";\nimport FlickingError from \"../core/FlickingError\";\nimport Panel from \"../core/panel/Panel\";\nimport AxesController from \"../control/AxesController\";\nimport { DIRECTION, EVENTS } from \"../const/external\";\nimport * as ERROR from \"../const/error\";\nimport { getDirection, getFlickingAttached } from \"../utils\";\nimport { ValueOf } from \"../type/internal\";\n\n/**\n * A component that manages inputs and animation of Flicking\n * @ko Flicking의 입력 장치 & 애니메이션을 담당하는 컴포넌트\n */\nabstract class Control {\n  // Internal States\n  protected _flicking: Flicking | null;\n  protected _controller: AxesController;\n  protected _activePanel: Panel | null;\n\n  /**\n   * A controller that handles the {@link https://naver.github.io/egjs-axes/ @egjs/axes} events\n   * @ko {@link https://naver.github.io/egjs-axes/ @egjs/axes}의 이벤트를 처리하는 컨트롤러 컴포넌트\n   * @type {AxesController}\n   * @readonly\n   */\n  public get controller() { return this._controller; }\n  /**\n   * Index number of the {@link Flicking#currentPanel currentPanel}\n   * @ko {@link Flicking#currentPanel currentPanel}의 인덱스 번호\n   * @type {number}\n   * @default 0\n   * @readonly\n   */\n  public get activeIndex() { return this._activePanel?.index ?? -1; }\n  /**\n   * An active panel\n   * @ko 현재 선택된 패널\n   * @type {Panel | null}\n   * @readonly\n   */\n  public get activePanel() { return this._activePanel; }\n  /**\n   * Whether Flicking's animating\n   * @ko 현재 애니메이션 동작 여부\n   * @type {boolean}\n   * @readonly\n   */\n  public get animating() { return this._controller.state.animating; }\n  /**\n   * Whether user is clicking or touching\n   * @ko 현재 사용자가 클릭/터치중인지 여부\n   * @type {boolean}\n   * @readonly\n   */\n  public get holding() { return this._controller.state.holding; }\n\n  /** */\n  public constructor() {\n    this._flicking = null;\n    this._controller = new AxesController();\n    this._activePanel = null;\n  }\n\n  /**\n   * Move {@link Camera} to the given position\n   * @ko {@link Camera}를 주어진 좌표로 이동합니다\n   * @method\n   * @abstract\n   * @memberof Control\n   * @instance\n   * @name moveToPosition\n   * @param {number} position The target position to move<ko>이동할 좌표</ko>\n   * @param {number} duration Duration of the panel movement animation (unit: ms).<ko>패널 이동 애니메이션 진행 시간 (단위: ms)</ko>\n   * @param {object} [axesEvent] {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} event of {@link https://naver.github.io/egjs-axes/ Axes}\n   * <ko>{@link https://naver.github.io/egjs-axes/ Axes}의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} 이벤트</ko>\n   * @fires Flicking#moveStart\n   * @fires Flicking#move\n   * @fires Flicking#moveEnd\n   * @fires Flicking#willChange\n   * @fires Flicking#changed\n   * @fires Flicking#willRestore\n   * @fires Flicking#restored\n   * @fires Flicking#needPanel\n   * @fires Flicking#visibleChange\n   * @fires Flicking#reachEdge\n   * @throws {FlickingError}\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE POSITION_NOT_REACHABLE}|When the given panel is already removed or not in the Camera's {@link Camera#range range}|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|When {@link Control#init init} is not called before|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|When the animation is interrupted by user input|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|When the animation is interrupted by user input|\n   * <ko>\n   *\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE POSITION_NOT_REACHABLE}|주어진 패널이 제거되었거나, Camera의 {@link Camera#range range} 밖에 있을 경우|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|{@link Control#init init}이 이전에 호출되지 않은 경우|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|사용자 입력에 의해 애니메이션이 중단된 경우|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|발생된 이벤트들 중 하나라도 `stop()`이 호출된 경우|\n   *\n   * </ko>\n   * @return {Promise<void>} A Promise which will be resolved after reaching the target position<ko>해당 좌표 도달시에 resolve되는 Promise</ko>\n   */\n  public abstract moveToPosition(position: number, duration: number, axesEvent?: OnRelease): Promise<void>;\n\n  /**\n   * Initialize Control\n   * @ko Control을 초기화합니다\n   * @param {Flicking} flicking An instance of {@link Flicking}<ko>Flicking의 인스턴스</ko>\n   * @chainable\n   * @return {this}\n   */\n  public init(flicking: Flicking): this {\n    this._flicking = flicking;\n    this._controller.init(flicking);\n\n    return this;\n  }\n\n  /**\n   * Destroy Control and return to initial state\n   * @ko Control을 초기 상태로 되돌립니다\n   * @return {void}\n   */\n  public destroy(): void {\n    this._controller.destroy();\n\n    this._flicking = null;\n    this._activePanel = null;\n  }\n\n  /**\n   * Enable input from the user (mouse/touch)\n   * @ko 사용자의 입력(마우스/터치)를 활성화합니다\n   * @chainable\n   * @return {this}\n   */\n  public enable(): this {\n    this._controller.enable();\n\n    return this;\n  }\n\n  /**\n   * Disable input from the user (mouse/touch)\n   * @ko 사용자의 입력(마우스/터치)를 막습니다\n   * @chainable\n   * @return {this}\n   */\n  public disable(): this {\n    this._controller.disable();\n\n    return this;\n  }\n\n  /**\n   * Update position after resizing\n   * @ko resize 이후에 position을 업데이트합니다\n   * @param {number} progressInPanel Previous camera's progress in active panel before resize<ko>Resize 이전 현재 선택된 패널 내에서의 카메라 progress 값</ko>\n   * @throws {FlickingError}\n   * {@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link Camera#init init} is not called before\n   * <ko>{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} {@link Camera#init init}이 이전에 호출되지 않은 경우</ko>\n   * @chainable\n   * @return {Promise<void>}\n   */\n  public updatePosition(_progressInPanel: number): void { // eslint-disable-line @typescript-eslint/no-unused-vars\n    const flicking = getFlickingAttached(this._flicking);\n    const camera = flicking.camera;\n    const activePanel = this._activePanel;\n\n    if (activePanel) {\n      camera.lookAt(camera.clampToReachablePosition(activePanel.position));\n    }\n  }\n\n  /**\n   * Update {@link Control#controller controller}'s state\n   * @ko {@link Control#controller controller}의 내부 상태를 갱신합니다\n   * @chainable\n   * @return {this}\n   */\n  public updateInput(): this {\n    const flicking = getFlickingAttached(this._flicking);\n    const camera = flicking.camera;\n\n    this._controller.update(camera.controlParams);\n\n    return this;\n  }\n\n  /**\n   * Reset {@link Control#activePanel activePanel} to `null`\n   * @ko {@link Control#activePanel activePanel}을 `null`로 초기화합니다\n   * @chainable\n   * @return {this}\n   */\n  public resetActive(): this {\n    this._activePanel = null;\n\n    return this;\n  }\n\n  /**\n   * Move {@link Camera} to the given panel\n   * @ko {@link Camera}를 해당 패널 위로 이동합니다\n   * @param {Panel} panel The target panel to move<ko>이동할 패널</ko>\n   * @param {object} options An options object<ko>옵션 오브젝트</ko>\n   * @param {number} duration Duration of the animation (unit: ms)<ko>애니메이션 진행 시간 (단위: ms)</ko>\n   * @param {object} [axesEvent] {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} event of {@link https://naver.github.io/egjs-axes/ Axes}\n   * <ko>{@link https://naver.github.io/egjs-axes/ Axes}의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} 이벤트</ko>\n   * @param {DIRECTION} [direction=DIRECTION.NONE] Direction to move, only available in the {@link Flicking#circular circular} mode<ko>이동할 방향. {@link Flicking#circular circular} 옵션 활성화시에만 사용 가능합니다</ko>\n   * @fires Flicking#moveStart\n   * @fires Flicking#move\n   * @fires Flicking#moveEnd\n   * @fires Flicking#willChange\n   * @fires Flicking#changed\n   * @fires Flicking#willRestore\n   * @fires Flicking#restored\n   * @fires Flicking#needPanel\n   * @fires Flicking#visibleChange\n   * @fires Flicking#reachEdge\n   * @throws {FlickingError}\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE POSITION_NOT_REACHABLE}|When the given panel is already removed or not in the Camera's {@link Camera#range range}|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|When {@link Control#init init} is not called before|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|When the animation is interrupted by user input|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|When the animation is interrupted by user input|\n   * <ko>\n   *\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE POSITION_NOT_REACHABLE}|주어진 패널이 제거되었거나, Camera의 {@link Camera#range range} 밖에 있을 경우|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|{@link Control#init init}이 이전에 호출되지 않은 경우|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|사용자 입력에 의해 애니메이션이 중단된 경우|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|발생된 이벤트들 중 하나라도 `stop()`이 호출된 경우|\n   *\n   * </ko>\n   * @return {Promise<void>} A Promise which will be resolved after reaching the target panel<ko>해당 패널 도달시에 resolve되는 Promise</ko>\n   */\n  public async moveToPanel(panel: Panel, {\n    duration,\n    direction = DIRECTION.NONE,\n    axesEvent\n  }: {\n    duration: number;\n    direction?: ValueOf<typeof DIRECTION>;\n    axesEvent?: OnRelease;\n  }) {\n    const flicking = getFlickingAttached(this._flicking);\n    const camera = flicking.camera;\n\n    let position = panel.position;\n    const nearestAnchor = camera.findNearestAnchor(position);\n\n    if (panel.removed || !nearestAnchor) {\n      return Promise.reject(new FlickingError(ERROR.MESSAGE.POSITION_NOT_REACHABLE(panel.position), ERROR.CODE.POSITION_NOT_REACHABLE));\n    }\n    if (!camera.canReach(panel)) {\n      // Override position & panel if that panel is not reachable\n      position = nearestAnchor.position;\n      panel = nearestAnchor.panel;\n    } else if (flicking.circularEnabled) {\n      // Circular mode is enabled, find nearest distance to panel\n      const camPos = this._controller.position; // Actual position of the Axes\n      const camRangeDiff = camera.rangeDiff;\n      const possiblePositions = [position, position + camRangeDiff, position - camRangeDiff]\n        .filter(pos => {\n          if (direction === DIRECTION.NONE) return true;\n\n          return direction === DIRECTION.PREV\n            ? pos <= camPos\n            : pos >= camPos;\n        });\n\n      position = possiblePositions.reduce((nearestPosition, pos) => {\n        if (Math.abs(camPos - pos) < Math.abs(camPos - nearestPosition)) {\n          return pos;\n        } else {\n          return nearestPosition;\n        }\n      }, Infinity);\n    }\n\n    this._triggerIndexChangeEvent(panel, panel.position, axesEvent);\n\n    return this._animateToPosition({ position, duration, newActivePanel: panel, axesEvent });\n  }\n\n  /**\n   * @internal\n   */\n  public setActive(newActivePanel: Panel, prevActivePanel: Panel | null, isTrusted: boolean) {\n    const flicking = getFlickingAttached(this._flicking);\n\n    this._activePanel = newActivePanel;\n\n    flicking.camera.updateAdaptiveHeight();\n\n    if (newActivePanel !== prevActivePanel) {\n      flicking.trigger(new ComponentEvent(EVENTS.CHANGED, {\n        index: newActivePanel.index,\n        panel: newActivePanel,\n        prevIndex: prevActivePanel?.index ?? -1,\n        prevPanel: prevActivePanel,\n        isTrusted,\n        direction: prevActivePanel ? getDirection(prevActivePanel.position, newActivePanel.position) : DIRECTION.NONE\n      }));\n    } else {\n      flicking.trigger(new ComponentEvent(EVENTS.RESTORED, {\n        isTrusted\n      }));\n    }\n  }\n\n  protected _triggerIndexChangeEvent(panel: Panel, position: number, axesEvent?: OnRelease): void {\n    const flicking = getFlickingAttached(this._flicking);\n    const triggeringEvent = panel !== this._activePanel ? EVENTS.WILL_CHANGE : EVENTS.WILL_RESTORE;\n    const camera = flicking.camera;\n    const activePanel = this._activePanel;\n\n    const event = new ComponentEvent(triggeringEvent, {\n      index: panel.index,\n      panel,\n      isTrusted: axesEvent?.isTrusted || false,\n      direction: getDirection(activePanel?.position ?? camera.position, position)\n    });\n    flicking.trigger(event);\n\n    if (event.isCanceled()) {\n      throw new FlickingError(ERROR.MESSAGE.STOP_CALLED_BY_USER, ERROR.CODE.STOP_CALLED_BY_USER);\n    }\n  }\n\n  protected async _animateToPosition({\n    position,\n    duration,\n    newActivePanel,\n    axesEvent\n  }: {\n    position: number;\n    duration: number;\n    newActivePanel: Panel;\n    axesEvent?: OnRelease;\n  }) {\n    const flicking = getFlickingAttached(this._flicking);\n    const animate = () => this._controller.animateTo(position, duration, axesEvent);\n    const state = this._controller.state;\n\n    state.targetPanel = newActivePanel;\n\n    if (duration <= 0) {\n      return animate();\n    } else {\n      return animate().then(async () => {\n        await flicking.renderer.render();\n      }).catch(err => {\n        if (axesEvent && err instanceof FlickingError && err.code === ERROR.CODE.ANIMATION_INTERRUPTED) return;\n        throw err;\n      });\n    }\n  }\n}\n\nexport default Control;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Panel from \"./panel/Panel\";\n\n/**\n * A data component that has actual position where the camera should be stopped at\n * @ko 카메라가 정지해야하는 실제 위치를 담고 있는 데이터 컴포넌트\n */\nclass AnchorPoint {\n  private _index: number;\n  private _pos: number;\n  private _panel: Panel;\n\n  /**\n   * Index of AnchorPoint\n   * @ko AnchorPoint의 인덱스\n   * @type {number}\n   * @readonly\n   */\n  public get index() { return this._index; }\n  /**\n   * Position of AnchorPoint\n   * @ko AnchorPoint의 좌표\n   * @type {number}\n   * @readonly\n   */\n  public get position() { return this._pos; }\n  /**\n   * A {@link Panel} instance AnchorPoint is referencing to\n   * @ko AnchorPoint가 참조하고 있는 {@link Panel}\n   * @type {Panel}\n   * @readonly\n   */\n  public get panel() { return this._panel; }\n\n  /**\n   * @param {object} options An options object<ko>옵션 객체</ko>\n   * @param {number} [options.index] Index of AnchorPoint<ko>AnchorPoint의 인덱스</ko>\n   * @param {number} [options.position] Position of AnchorPoint<ko>AnchorPoint의 좌표</ko>\n   * @param {Panel} [options.panel] A {@link Panel} instance AnchorPoint is referencing to<ko>AnchorPoint가 참조하고 있는 {@link Panel}</ko>\n   */\n  public constructor({\n    index,\n    position,\n    panel\n  }: {\n    index: number;\n    position: number;\n    panel: Panel;\n  }) {\n    this._index = index;\n    this._pos = position;\n    this._panel = panel;\n  }\n}\n\nexport default AnchorPoint;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { OnRelease } from \"@egjs/axes\";\n\nimport FlickingError from \"../core/FlickingError\";\nimport AnchorPoint from \"../core/AnchorPoint\";\nimport { circulateIndex, clamp, getFlickingAttached } from \"../utils\";\nimport * as AXES from \"../const/axes\";\nimport * as ERROR from \"../const/error\";\n\nimport Control from \"./Control\";\n\n/**\n * An options for the {@link SnapControl}\n * @ko {@link SnapControl} 생성시 사용되는 옵션\n * @interface\n * @property {number} count Maximum number of panels can go after release<ko>입력 중단 이후 통과하여 이동할 수 있는 패널의 최대 갯수</ko>\n */\nexport interface SnapControlOptions {\n  count: number;\n}\n\n/**\n * A {@link Control} that uses a release momentum to choose destination panel\n * @ko 입력을 중단한 시점의 가속도에 영향받아 도달할 패널을 계산하는 이동 방식을 사용하는 {@link Control}\n */\nclass SnapControl extends Control {\n  private _count: SnapControlOptions[\"count\"];\n\n  /**\n   * Maximum number of panels can go after release\n   * @ko 입력 중단 이후 통과하여 이동할 수 있는 패널의 최대 갯수\n   * @type {number}\n   * @default Infinity\n   */\n  public get count() { return this._count; }\n\n  public set count(val: SnapControlOptions[\"count\"]) { this._count = val; }\n\n  /** */\n  public constructor({\n    count = Infinity\n  }: Partial<SnapControlOptions> = {}) {\n    super();\n\n    this._count = count;\n  }\n\n  /**\n   * Move {@link Camera} to the given position\n   * @ko {@link Camera}를 주어진 좌표로 이동합니다\n   * @param {number} position The target position to move<ko>이동할 좌표</ko>\n   * @param {number} duration Duration of the panel movement animation (unit: ms).<ko>패널 이동 애니메이션 진행 시간 (단위: ms)</ko>\n   * @param {object} [axesEvent] {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} event of {@link https://naver.github.io/egjs-axes/ Axes}\n   * <ko>{@link https://naver.github.io/egjs-axes/ Axes}의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} 이벤트</ko>\n   * @fires Flicking#moveStart\n   * @fires Flicking#move\n   * @fires Flicking#moveEnd\n   * @fires Flicking#willChange\n   * @fires Flicking#changed\n   * @fires Flicking#willRestore\n   * @fires Flicking#restored\n   * @fires Flicking#needPanel\n   * @fires Flicking#visibleChange\n   * @fires Flicking#reachEdge\n   * @throws {FlickingError}\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE POSITION_NOT_REACHABLE}|When the given panel is already removed or not in the Camera's {@link Camera#range range}|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|When {@link Control#init init} is not called before|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|When the animation is interrupted by user input|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|When the animation is interrupted by user input|\n   * <ko>\n   *\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE POSITION_NOT_REACHABLE}|주어진 패널이 제거되었거나, Camera의 {@link Camera#range range} 밖에 있을 경우|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|{@link Control#init init}이 이전에 호출되지 않은 경우|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|사용자 입력에 의해 애니메이션이 중단된 경우|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|발생된 이벤트들 중 하나라도 `stop()`이 호출된 경우|\n   *\n   * </ko>\n   * @return {Promise<void>} A Promise which will be resolved after reaching the target position<ko>해당 좌표 도달시에 resolve되는 Promise</ko>\n   */\n  public async moveToPosition(position: number, duration: number, axesEvent?: OnRelease) {\n    const flicking = getFlickingAttached(this._flicking);\n    const camera = flicking.camera;\n    const activeAnchor = camera.findActiveAnchor();\n    const anchorAtCamera = camera.findNearestAnchor(camera.position);\n    const state = flicking.control.controller.state;\n\n    if (!activeAnchor || !anchorAtCamera) {\n      return Promise.reject(new FlickingError(ERROR.MESSAGE.POSITION_NOT_REACHABLE(position), ERROR.CODE.POSITION_NOT_REACHABLE));\n    }\n\n    const snapThreshold = this._calcSnapThreshold(position, activeAnchor);\n\n    const posDelta = flicking.animating\n      ? state.delta\n      : position - camera.position;\n    const absPosDelta = Math.abs(posDelta);\n    const snapDelta = axesEvent && axesEvent.delta[AXES.POSITION_KEY] !== 0\n      ? Math.abs(axesEvent.delta[AXES.POSITION_KEY])\n      : absPosDelta;\n    let targetAnchor: AnchorPoint;\n\n    if (snapDelta >= snapThreshold && snapDelta > 0) {\n      // Move to anchor at position\n      targetAnchor = this._findSnappedAnchor(position, anchorAtCamera);\n    } else if (absPosDelta >= flicking.threshold && absPosDelta > 0) {\n      // Move to the adjacent panel\n      targetAnchor = this._findAdjacentAnchor(posDelta, anchorAtCamera);\n    } else {\n      // Restore to active panel\n      targetAnchor = anchorAtCamera;\n    }\n\n    this._triggerIndexChangeEvent(targetAnchor.panel, position, axesEvent);\n\n    return this._animateToPosition({\n      position: camera.clampToReachablePosition(targetAnchor.position),\n      duration,\n      newActivePanel: targetAnchor.panel,\n      axesEvent\n    });\n  }\n\n  private _findSnappedAnchor(position: number, anchorAtCamera: AnchorPoint): AnchorPoint {\n    const flicking = getFlickingAttached(this._flicking);\n    const camera = flicking.camera;\n    const count = this._count;\n\n    const currentPos = camera.position;\n\n    const clampedPosition = camera.clampToReachablePosition(position);\n    const anchorAtPosition = camera.findAnchorIncludePosition(clampedPosition);\n\n    if (!anchorAtCamera || !anchorAtPosition) {\n      throw new FlickingError(ERROR.MESSAGE.POSITION_NOT_REACHABLE(position), ERROR.CODE.POSITION_NOT_REACHABLE);\n    }\n\n    if (!isFinite(count)) {\n      return anchorAtPosition;\n    }\n\n    const panelCount = flicking.panelCount;\n    const anchors = camera.anchorPoints;\n\n    let loopCount = Math.sign(position - currentPos) * Math.floor(Math.abs(position - currentPos) / camera.rangeDiff);\n    if ((position > currentPos && anchorAtPosition.index < anchorAtCamera.index)\n      || (anchorAtPosition.position > anchorAtCamera.position && anchorAtPosition.index === anchorAtCamera.index)) {\n      loopCount += 1;\n    } else if ((position < currentPos && anchorAtPosition.index > anchorAtCamera.index)\n      || (anchorAtPosition.position < anchorAtCamera.position && anchorAtPosition.index === anchorAtCamera.index)) {\n      loopCount -= 1;\n    }\n\n    const circularIndexOffset = loopCount * panelCount;\n    const anchorAtPositionIndex = anchorAtPosition.index + circularIndexOffset;\n\n    if (Math.abs(anchorAtPositionIndex - anchorAtCamera.index) <= count) {\n      const anchor = anchors[anchorAtPosition.index];\n\n      return new AnchorPoint({\n        index: anchor.index,\n        position: anchor.position + loopCount * camera.rangeDiff,\n        panel: anchor.panel\n      });\n    }\n\n    if (flicking.circularEnabled) {\n      const targetAnchor = anchors[circulateIndex(anchorAtCamera.index + Math.sign(position - currentPos) * count, panelCount)];\n      let loop = Math.floor(count / panelCount);\n\n      if (position > currentPos && targetAnchor.index < anchorAtCamera.index) {\n        loop += 1;\n      } else if (position < currentPos && targetAnchor.index > anchorAtCamera.index) {\n        loop -= 1;\n      }\n\n      return new AnchorPoint({\n        index: targetAnchor.index,\n        position: targetAnchor.position + loop * camera.rangeDiff,\n        panel: targetAnchor.panel\n      });\n    } else {\n      return anchors[clamp(anchorAtCamera.index + Math.sign(position - currentPos) * count, 0, anchors.length - 1)];\n    }\n  }\n\n  private _findAdjacentAnchor(posDelta: number, anchorAtCamera: AnchorPoint): AnchorPoint {\n    const flicking = getFlickingAttached(this._flicking);\n    const camera = flicking.camera;\n    const adjacentAnchor = (posDelta > 0 ? camera.getNextAnchor(anchorAtCamera) : camera.getPrevAnchor(anchorAtCamera)) ?? anchorAtCamera;\n\n    return adjacentAnchor;\n  }\n\n  private _calcSnapThreshold(position: number, activeAnchor: AnchorPoint): number {\n    const isNextDirection = position > activeAnchor.position;\n    const panel = activeAnchor.panel;\n    const panelSize = panel.size;\n    const alignPos = panel.alignPosition;\n\n    // Minimum distance needed to decide prev/next panel as nearest\n    /*\n     * |  Prev  |     Next     |\n     * |<------>|<------------>|\n     * [        |<-Anchor      ]\n     */\n    return isNextDirection\n      ? panelSize - alignPos + panel.margin.next\n      : alignPos + panel.margin.prev;\n  }\n}\n\nexport default SnapControl;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { OnRelease } from \"@egjs/axes\";\n\nimport FlickingError from \"../core/FlickingError\";\nimport * as ERROR from \"../const/error\";\nimport { getFlickingAttached } from \"../utils\";\n\nimport Control from \"./Control\";\n\n/**\n * An options for the {@link FreeControl}\n * @ko {@link FreeControl} 생성시 사용되는 옵션\n * @interface\n * @property {boolean} stopAtEdge Make scroll animation to stop at the start/end of the scroll area, not going out the bounce area\n * <ko>스크롤 애니메이션을 스크롤 영역의 시작과 끝부분에서 멈추도록 하여, 바운스 영역을 넘어가지 않도록 합니다</ko>\n */\nexport interface FreeControlOptions {\n  stopAtEdge: boolean;\n}\n\n/**\n * A {@link Control} that can be scrolled freely without alignment\n * @ko 패널이 정해진 지점에 정렬되지 않고, 자유롭게 스크롤할 수 있는 이동 방식을 사용하는 {@link Control}\n */\nclass FreeControl extends Control {\n  private _stopAtEdge: FreeControlOptions[\"stopAtEdge\"];\n\n  /**\n   * Make scroll animation to stop at the start/end of the scroll area, not going out the bounce area\n   * @ko 스크롤 애니메이션을 스크롤 영역의 시작과 끝부분에서 멈추도록 하여, 바운스 영역을 넘어가지 않도록 합니다\n   * @type {boolean}\n   * @default true\n   */\n  public get stopAtEdge() { return this._stopAtEdge; }\n\n  public set stopAtEdge(val: FreeControlOptions[\"stopAtEdge\"]) { this._stopAtEdge = val; }\n\n  /** */\n  public constructor({\n    stopAtEdge = true\n  }: Partial<FreeControlOptions> = {}) {\n    super();\n\n    this._stopAtEdge = stopAtEdge;\n  }\n\n  /**\n   * Update position after resizing\n   * @ko resize 이후에 position을 업데이트합니다\n   * @param {number} progressInPanel Previous camera's progress in active panel before resize<ko>Resize 이전 현재 선택된 패널 내에서의 카메라 progress 값</ko>\n   * @throws {FlickingError}\n   * {@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link Camera#init init} is not called before\n   * <ko>{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} {@link Camera#init init}이 이전에 호출되지 않은 경우</ko>\n   * @chainable\n   * @return {Promise<void>}\n   */\n  public updatePosition(progressInPanel: number): void {\n    const flicking = getFlickingAttached(this._flicking);\n    const camera = flicking.camera;\n    const activePanel = this._activePanel;\n\n    if (activePanel) {\n      const panelRange = activePanel.range;\n      const newPosition = panelRange.min + (panelRange.max - panelRange.min) * progressInPanel;\n\n      camera.lookAt(camera.clampToReachablePosition(newPosition));\n    }\n  }\n\n  /**\n   * Move {@link Camera} to the given position\n   * @ko {@link Camera}를 주어진 좌표로 이동합니다\n   * @param {number} position The target position to move<ko>이동할 좌표</ko>\n   * @param {number} duration Duration of the panel movement animation (unit: ms).<ko>패널 이동 애니메이션 진행 시간 (단위: ms)</ko>\n   * @param {object} [axesEvent] {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} event of {@link https://naver.github.io/egjs-axes/ Axes}\n   * <ko>{@link https://naver.github.io/egjs-axes/ Axes}의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} 이벤트</ko>\n   * @fires Flicking#moveStart\n   * @fires Flicking#move\n   * @fires Flicking#moveEnd\n   * @fires Flicking#willChange\n   * @fires Flicking#changed\n   * @fires Flicking#willRestore\n   * @fires Flicking#restored\n   * @fires Flicking#needPanel\n   * @fires Flicking#visibleChange\n   * @fires Flicking#reachEdge\n   * @throws {FlickingError}\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE POSITION_NOT_REACHABLE}|When the given panel is already removed or not in the Camera's {@link Camera#range range}|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|When {@link Control#init init} is not called before|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|When the animation is interrupted by user input|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|When the animation is interrupted by user input|\n   * <ko>\n   *\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE POSITION_NOT_REACHABLE}|주어진 패널이 제거되었거나, Camera의 {@link Camera#range range} 밖에 있을 경우|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|{@link Control#init init}이 이전에 호출되지 않은 경우|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|사용자 입력에 의해 애니메이션이 중단된 경우|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|발생된 이벤트들 중 하나라도 `stop()`이 호출된 경우|\n   *\n   * </ko>\n   * @return {Promise<void>} A Promise which will be resolved after reaching the target position<ko>해당 좌표 도달시에 resolve되는 Promise</ko>\n   */\n  public async moveToPosition(position: number, duration: number, axesEvent?: OnRelease) {\n    const flicking = getFlickingAttached(this._flicking);\n\n    const camera = flicking.camera;\n    const targetPos = camera.clampToReachablePosition(position);\n\n    const anchorAtPosition = camera.findAnchorIncludePosition(targetPos);\n\n    if (!anchorAtPosition) {\n      return Promise.reject(new FlickingError(ERROR.MESSAGE.POSITION_NOT_REACHABLE(position), ERROR.CODE.POSITION_NOT_REACHABLE));\n    }\n\n    const targetPanel = anchorAtPosition.panel;\n\n    // Trigger only change event\n    if (targetPanel !== this._activePanel) {\n      this._triggerIndexChangeEvent(targetPanel, position, axesEvent);\n    }\n\n    return this._animateToPosition({ position: this._stopAtEdge ? targetPos : position, duration, newActivePanel: targetPanel, axesEvent });\n  }\n}\n\nexport default FreeControl;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { OnRelease } from \"@egjs/axes\";\n\nimport Panel from \"../core/panel/Panel\";\nimport FlickingError from \"../core/FlickingError\";\nimport { clamp, getFlickingAttached, getMinusCompensatedIndex, isBetween } from \"../utils\";\nimport * as ERROR from \"../const/error\";\n\nimport Control from \"./Control\";\n/**\n * An options for the {@link StrictControl}\n * @ko {@link StrictControl} 생성시 사용되는 옵션\n * @interface\n * @property {number} count Maximum number of panels that can be moved at a time<ko>최대로 움직일 수 있는 패널의 개수</ko>\n */\nexport interface StrictControlOptions {\n  count: number;\n}\n\n/**\n * A {@link Control} that allow you to select the maximum number of panels to move at a time\n * @ko 한번에 최대로 이동할 패널의 개수를 선택 가능한 {@link Control}\n */\nclass StrictControl extends Control {\n  private _count: number;\n  private _indexRange: { min: number; max: number };\n\n  /**\n   * Maximum number of panels that can be moved at a time\n   * @ko 최대로 움직일 수 있는 패널의 개수\n   * @type {number}\n   * @default 1\n   */\n  public get count() { return this._count; }\n\n  public set count(val: StrictControlOptions[\"count\"]) { this._count = val; }\n\n  /** */\n  public constructor({\n    count = 1\n  }: Partial<StrictControlOptions> = {}) {\n    super();\n\n    this._count = count;\n    this._resetIndexRange();\n  }\n\n  /**\n   * Destroy Control and return to initial state\n   * @ko Control을 초기 상태로 되돌립니다\n   * @return {void}\n   */\n  public destroy() {\n    super.destroy();\n\n    this._resetIndexRange();\n  }\n\n  /**\n   * Update {@link Control#controller controller}'s state\n   * @ko {@link Control#controller controller}의 내부 상태를 갱신합니다\n   * @chainable\n   * @return {this}\n   */\n  public updateInput(): this {\n    const flicking = getFlickingAttached(this._flicking);\n    const camera = flicking.camera;\n    const renderer = flicking.renderer;\n    const controller = this._controller;\n    const controlParams = camera.controlParams;\n    const count = this._count;\n\n    const activePanel = controller.state.animating\n      ? camera.findNearestAnchor(camera.position)?.panel\n      : this._activePanel;\n\n    if (!activePanel) {\n      controller.update(controlParams);\n      this._resetIndexRange();\n      return this;\n    }\n\n    const cameraRange = controlParams.range;\n    const currentPos = activePanel.position;\n    const currentIndex = activePanel.index;\n    const panelCount = renderer.panelCount;\n\n    let prevPanelIndex = currentIndex - count;\n    let nextPanelIndex = currentIndex + count;\n\n    if (prevPanelIndex < 0) {\n      prevPanelIndex = flicking.circularEnabled\n        ? getMinusCompensatedIndex((prevPanelIndex + 1) % panelCount - 1, panelCount)\n        : clamp(prevPanelIndex, 0, panelCount - 1);\n    }\n    if (nextPanelIndex >= panelCount) {\n      nextPanelIndex = flicking.circularEnabled\n        ? nextPanelIndex % panelCount\n        : clamp(nextPanelIndex, 0, panelCount - 1);\n    }\n\n    const prevPanel = renderer.panels[prevPanelIndex];\n    const nextPanel = renderer.panels[nextPanelIndex];\n\n    let prevPos = Math.max(prevPanel.position, cameraRange.min);\n    let nextPos = Math.min(nextPanel.position, cameraRange.max);\n\n    if (prevPos > currentPos) {\n      prevPos -= camera.rangeDiff;\n    }\n    if (nextPos < currentPos) {\n      nextPos += camera.rangeDiff;\n    }\n\n    controlParams.range = {\n      min: prevPos,\n      max: nextPos\n    };\n\n    if (controlParams.circular) {\n      if (controlParams.position < prevPos) {\n        controlParams.position += camera.rangeDiff;\n      }\n\n      if (controlParams.position > nextPos) {\n        controlParams.position -= camera.rangeDiff;\n      }\n    }\n\n    controlParams.circular = false;\n    controller.update(controlParams);\n\n    this._indexRange = {\n      min: prevPanel.index,\n      max: nextPanel.index\n    };\n\n    return this;\n  }\n\n  /**\n   * Move {@link Camera} to the given position\n   * @ko {@link Camera}를 주어진 좌표로 이동합니다\n   * @param {number} position The target position to move<ko>이동할 좌표</ko>\n   * @param {number} duration Duration of the panel movement animation (unit: ms).<ko>패널 이동 애니메이션 진행 시간 (단위: ms)</ko>\n   * @param {object} [axesEvent] {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} event of {@link https://naver.github.io/egjs-axes/ Axes}\n   * <ko>{@link https://naver.github.io/egjs-axes/ Axes}의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} 이벤트</ko>\n   * @fires Flicking#moveStart\n   * @fires Flicking#move\n   * @fires Flicking#moveEnd\n   * @fires Flicking#willChange\n   * @fires Flicking#changed\n   * @fires Flicking#willRestore\n   * @fires Flicking#restored\n   * @fires Flicking#needPanel\n   * @fires Flicking#visibleChange\n   * @fires Flicking#reachEdge\n   * @throws {FlickingError}\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE POSITION_NOT_REACHABLE}|When the given panel is already removed or not in the Camera's {@link Camera#range range}|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|When {@link Control#init init} is not called before|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|When the animation is interrupted by user input|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|When the animation is interrupted by user input|\n   * <ko>\n   *\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE POSITION_NOT_REACHABLE}|주어진 패널이 제거되었거나, Camera의 {@link Camera#range range} 밖에 있을 경우|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|{@link Control#init init}이 이전에 호출되지 않은 경우|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|사용자 입력에 의해 애니메이션이 중단된 경우|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|발생된 이벤트들 중 하나라도 `stop()`이 호출된 경우|\n   *\n   * </ko>\n   * @return {Promise<void>} A Promise which will be resolved after reaching the target position<ko>해당 좌표 도달시에 resolve되는 Promise</ko>\n   */\n  public async moveToPosition(position: number, duration: number, axesEvent?: OnRelease) {\n    const flicking = getFlickingAttached(this._flicking);\n    const camera = flicking.camera;\n    const activePanel = this._activePanel;\n    const axesRange = this._controller.range;\n    const indexRange = this._indexRange;\n    const cameraRange = camera.range;\n\n    const clampedPosition = clamp(camera.clampToReachablePosition(position), axesRange[0], axesRange[1]);\n    const anchorAtPosition = camera.findAnchorIncludePosition(clampedPosition);\n\n    if (!anchorAtPosition || !activePanel) {\n      return Promise.reject(new FlickingError(ERROR.MESSAGE.POSITION_NOT_REACHABLE(position), ERROR.CODE.POSITION_NOT_REACHABLE));\n    }\n\n    const prevPos = activePanel.position;\n\n    const isOverThreshold = Math.abs(position - prevPos) >= flicking.threshold;\n    const adjacentAnchor = (position > prevPos)\n      ? camera.getNextAnchor(anchorAtPosition)\n      : camera.getPrevAnchor(anchorAtPosition);\n\n    let targetPos: number;\n    let targetPanel: Panel;\n\n    const anchors = camera.anchorPoints;\n    const firstAnchor = anchors[0];\n    const lastAnchor = anchors[anchors.length - 1];\n\n    const shouldBounceToFirst = position <= cameraRange.min && isBetween(firstAnchor.panel.index, indexRange.min, indexRange.max);\n    const shouldBounceToLast = position >= cameraRange.max && isBetween(lastAnchor.panel.index, indexRange.min, indexRange.max);\n\n    if (shouldBounceToFirst || shouldBounceToLast) {\n      // In bounce area\n      const targetAnchor = position < cameraRange.min ? firstAnchor : lastAnchor;\n\n      targetPanel = targetAnchor.panel;\n      targetPos = targetAnchor.position;\n    } else if (isOverThreshold && anchorAtPosition.position !== activePanel.position) {\n      // Move to anchor at position\n      targetPanel = anchorAtPosition.panel;\n      targetPos = anchorAtPosition.position;\n    } else if (isOverThreshold && adjacentAnchor && isBetween(adjacentAnchor.index, indexRange.min, indexRange.max)) {\n      // Move to adjacent anchor\n      targetPanel = adjacentAnchor.panel;\n      targetPos = adjacentAnchor.position;\n    } else {\n      // Restore to active panel\n      targetPos = camera.clampToReachablePosition(activePanel.position);\n      targetPanel = activePanel;\n    }\n\n    this._triggerIndexChangeEvent(targetPanel, position, axesEvent);\n\n    return this._animateToPosition({\n      position: targetPos,\n      duration,\n      newActivePanel: targetPanel,\n      axesEvent\n    });\n  }\n\n  public setActive = (newActivePanel: Panel, prevActivePanel: Panel | null, isTrusted: boolean) => {\n    super.setActive(newActivePanel, prevActivePanel, isTrusted);\n    this.updateInput();\n  };\n\n  private _resetIndexRange() {\n    this._indexRange = { min: 0, max: 0 };\n  }\n}\n\nexport default StrictControl;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Control from \"./Control\";\nimport SnapControl, { SnapControlOptions } from \"./SnapControl\";\nimport FreeControl, { FreeControlOptions } from \"./FreeControl\";\nimport StrictControl, { StrictControlOptions } from \"./StrictControl\";\nimport AxesController from \"./AxesController\";\nimport State from \"./states/State\";\nimport IdleState from \"./states/IdleState\";\nimport HoldingState from \"./states/HoldingState\";\nimport DraggingState from \"./states/DraggingState\";\nimport AnimatingState from \"./states/AnimatingState\";\nimport DisabledState from \"./states/DisabledState\";\nimport StateMachine from \"./StateMachine\";\n\nexport {\n  Control,\n  SnapControl,\n  FreeControl,\n  StrictControl,\n  AxesController,\n  State,\n  IdleState,\n  HoldingState,\n  DraggingState,\n  AnimatingState,\n  DisabledState,\n  StateMachine\n};\n\nexport type {\n  SnapControlOptions,\n  FreeControlOptions,\n  StrictControlOptions\n};\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { ComponentEvent } from \"@egjs/component\";\n\nimport Flicking, { FlickingOptions } from \"../Flicking\";\nimport FlickingError from \"../core/FlickingError\";\nimport Panel from \"../core/panel/Panel\";\nimport AnchorPoint from \"../core/AnchorPoint\";\nimport * as ERROR from \"../const/error\";\nimport { ALIGN, DIRECTION, EVENTS } from \"../const/external\";\nimport { checkExistence, clamp, find, getFlickingAttached, getProgress, includes, parseAlign, toArray } from \"../utils\";\n\nexport interface CameraOptions {\n  align: FlickingOptions[\"align\"];\n}\n\n/**\n * A component that manages actual movement inside the viewport\n * @ko 뷰포트 내에서의 실제 움직임을 담당하는 컴포넌트\n */\nabstract class Camera {\n  // Options\n  protected _align: FlickingOptions[\"align\"];\n\n  // Internal states\n  protected _flicking: Flicking | null;\n  protected _el: HTMLElement;\n  protected _transform: string;\n  protected _position: number;\n  protected _alignPos: number;\n  protected _offset: number;\n  protected _range: { min: number; max: number };\n  protected _visiblePanels: Panel[];\n  protected _anchors: AnchorPoint[];\n  protected _needPanelTriggered: { prev: boolean; next: boolean };\n\n  // Internal states getter\n  /**\n   * The camera element(`.flicking-camera`)\n   * @ko 카메라 엘리먼트(`.flicking-camera`)\n   * @type {HTMLElement}\n   * @readonly\n   */\n  public get element() { return this._el; }\n  /**\n   * An array of the child elements of the camera element(`.flicking-camera`)\n   * @ko 카메라 엘리먼트(`.flicking-camera`)의 자식 엘리먼트 배열\n   * @type {HTMLElement[]}\n   * @readonly\n   */\n  public get children() { return toArray(this._el.children) as HTMLElement[]; }\n  /**\n   * Current position of the camera\n   * @ko Camera의 현재 좌표\n   * @type {number}\n   * @readonly\n   */\n  public get position() { return this._position; }\n  /**\n   * Align position inside the viewport where {@link Panel}'s {@link Panel#alignPosition alignPosition} should be located at\n   * @ko 패널의 정렬 기준 위치. 뷰포트 내에서 {@link Panel}의 {@link Panel#alignPosition alignPosition}이 위치해야 하는 곳입니다\n   * @type {number}\n   * @readonly\n   */\n  public get alignPosition() { return this._alignPos; }\n  /**\n   * Position offset, used for the {@link Flicking#renderOnlyVisible renderOnlyVisible} option\n   * @ko Camera의 좌표 오프셋. {@link Flicking#renderOnlyVisible renderOnlyVisible} 옵션을 위해 사용됩니다.\n   * @type {number}\n   * @default 0\n   * @readonly\n   */\n  public get offset() { return this._offset; }\n  /**\n   * A range that Camera's {@link Camera#position position} can reach\n   * @ko Camera의 {@link Camera#position position}이 도달 가능한 범위\n   * @type {object}\n   * @property {number} min A minimum position<ko>최소 위치</ko>\n   * @property {number} min A maximum position<ko>최대 위치</ko>\n   * @readonly\n   */\n  public get range() { return this._range; }\n  /**\n   * A difference between Camera's minimum and maximum position that can reach\n   * @ko Camera가 도달 가능한 최소/최대 좌표의 차이\n   * @type {number}\n   * @readonly\n   */\n  public get rangeDiff() { return this._range.max - this._range.min; }\n  /**\n   * An array of visible panels from the current position\n   * @ko 현재 보이는 패널들의 배열\n   * @type {Panel[]}\n   * @readonly\n   */\n  public get visiblePanels() { return this._visiblePanels; }\n  /**\n   * A range of the visible area from the current position\n   * @ko 현재 위치에서 보이는 범위\n   * @type {object}\n   * @property {number} min A minimum position<ko>최소 위치</ko>\n   * @property {number} min A maximum position<ko>최대 위치</ko>\n   * @readonly\n   */\n  public get visibleRange() { return { min: this._position - this._alignPos, max: this._position - this._alignPos + this.size }; }\n  /**\n   * An array of {@link AnchorPoint}s that Camera can be stopped at\n   * @ko 카메라가 도달 가능한 {@link AnchorPoint}의 목록\n   * @type {AnchorPoint[]}\n   * @readonly\n   */\n  public get anchorPoints() { return this._anchors; }\n  /**\n   * A current parameters of the Camera for updating {@link AxesController}\n   * @ko {@link AxesController}를 업데이트하기 위한 현재 Camera 패러미터들\n   * @type {ControlParams}\n   * @readonly\n   */\n  public get controlParams() { return { range: this._range, position: this._position, circular: false }; }\n  /**\n   * A Boolean value indicating whether Camera's over the minimum or maximum position reachable\n   * @ko 현재 카메라가 도달 가능한 범위의 최소 혹은 최대점을 넘어섰는지를 나타냅니다\n   * @type {boolean}\n   * @readonly\n   */\n  public get atEdge() { return this._position <= this._range.min || this._position >= this._range.max; }\n  /**\n   * Return the size of the viewport\n   * @ko 뷰포트 크기를 반환합니다\n   * @type {number}\n   * @readonly\n   */\n  public get size() {\n    const flicking = this._flicking;\n    return flicking\n      ? flicking.horizontal\n        ? flicking.viewport.width\n        : flicking.viewport.height\n      : 0;\n  }\n\n  /**\n   * Return the camera's position progress from the first panel to last panel\n   * Range is from 0 to last panel's index\n   * @ko 첫번째 패널로부터 마지막 패널까지의 카메라 위치의 진행도를 반환합니다\n   * 범위는 0부터 마지막 패널의 인덱스까지입니다\n   * @type {number}\n   * @readonly\n   */\n  public get progress() {\n    const flicking = this._flicking;\n    const position = this._position + this._offset;\n    const nearestAnchor = this.findNearestAnchor(this._position);\n\n    if (!flicking || !nearestAnchor) {\n      return NaN;\n    }\n\n    const nearestPanel = nearestAnchor.panel;\n    const panelPos = nearestPanel.position + nearestPanel.offset;\n    const bounceSize = flicking.control.controller.bounce!;\n\n    const { min: prevRange, max: nextRange } = this.range;\n    const rangeDiff = this.rangeDiff;\n\n    if (position === panelPos) {\n      return nearestPanel.index;\n    }\n\n    if (position < panelPos) {\n      const prevPanel = nearestPanel.prev();\n      let prevPosition = prevPanel\n        ? prevPanel.position + prevPanel.offset\n        : prevRange - bounceSize[0];\n\n      // Looped\n      if (prevPosition > panelPos) {\n        prevPosition -= rangeDiff;\n      }\n\n      return nearestPanel.index - 1 + getProgress(position, prevPosition, panelPos);\n    } else {\n      const nextPanel = nearestPanel.next();\n      let nextPosition = nextPanel\n        ? nextPanel.position + nextPanel.offset\n        : nextRange + bounceSize[1];\n\n      // Looped\n      if (nextPosition < panelPos) {\n        nextPosition += rangeDiff;\n      }\n\n      return nearestPanel.index + getProgress(position, panelPos, nextPosition);\n    }\n  }\n\n  // Options Getter\n  /**\n   * A value indicating where the {@link Camera#alignPosition alignPosition} should be located at inside the viewport element\n   * @ko {@link Camera#alignPosition alignPosition}이 뷰포트 엘리먼트 내의 어디에 위치해야 하는지를 나타내는 값\n   * @type {ALIGN | string | number}\n   */\n  public get align() { return this._align; }\n\n  // Options Setter\n  public set align(val: FlickingOptions[\"align\"]) {\n    this._align = val;\n  }\n\n  /** */\n  public constructor({\n    align = ALIGN.CENTER\n  }: Partial<CameraOptions> = {}) {\n    this._flicking = null;\n    this._resetInternalValues();\n\n    // Options\n    this._align = align;\n  }\n\n  /**\n   * Update {@link Camera#range range} of Camera\n   * @ko Camera의 {@link Camera#range range}를 업데이트합니다\n   * @method\n   * @abstract\n   * @memberof Camera\n   * @instance\n   * @name updateRange\n   * @chainable\n   * @throws {FlickingError}\n   * {@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link Camera#init init} is not called before\n   * <ko>{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} {@link Camera#init init}이 이전에 호출되지 않은 경우</ko>\n   * @return {this}\n   */\n  public abstract updateRange(): this;\n\n  /**\n   * Initialize Camera\n   * @ko Camera를 초기화합니다\n   * @param {Flicking} flicking An instance of {@link Flicking}<ko>Flicking의 인스턴스</ko>\n   * @chainable\n   * @throws {FlickingError}\n   * {@link ERROR_CODE VAL_MUST_NOT_NULL} If the camera element(`.flicking-camera`) does not exist inside viewport element\n   * <ko>{@link ERROR_CODE VAL_MUST_NOT_NULL} 뷰포트 엘리먼트 내부에 카메라 엘리먼트(`.flicking-camera`)가 존재하지 않을 경우</ko>\n   * @return {this}\n   */\n  public init(flicking: Flicking): this {\n    this._flicking = flicking;\n\n    const viewportEl = flicking.viewport.element;\n\n    checkExistence(viewportEl.firstElementChild, \"First element child of the viewport element\");\n    this._el = viewportEl.firstElementChild as HTMLElement;\n    this._checkTranslateSupport();\n\n    return this;\n  }\n\n  /**\n   * Destroy Camera and return to initial state\n   * @ko Camera를 초기 상태로 되돌립니다\n   * @return {void}\n   */\n  public destroy(): this {\n    this._flicking = null;\n    this._resetInternalValues();\n    return this;\n  }\n\n  /**\n   * Move to the given position and apply CSS transform\n   * @ko 해당 좌표로 이동하고, CSS transform을 적용합니다\n   * @param {number} pos A new position<ko>움직일 위치</ko>\n   * @throws {FlickingError}\n   * {@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link Camera#init init} is not called before\n   * <ko>{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} {@link Camera#init init}이 이전에 호출되지 않은 경우</ko>\n   * @return {this}\n   */\n  public lookAt(pos: number): void {\n    const prevPos = this._position;\n\n    this._position = pos;\n    this._refreshVisiblePanels();\n    this._checkNeedPanel();\n    this._checkReachEnd(prevPos, pos);\n    this.applyTransform();\n  }\n\n  /**\n   * Return a previous {@link AnchorPoint} of given {@link AnchorPoint}\n   * If it does not exist, return `null` instead\n   * @ko 주어진 {@link AnchorPoint}의 이전 {@link AnchorPoint}를 반환합니다\n   * 존재하지 않을 경우 `null`을 반환합니다\n   * @param {AnchorPoint} anchor A reference {@link AnchorPoint}<ko>기준 {@link AnchorPoint}</ko>\n   * @return {AnchorPoint | null} The previous {@link AnchorPoint}<ko>이전 {@link AnchorPoint}</ko>\n   */\n  public getPrevAnchor(anchor: AnchorPoint): AnchorPoint | null {\n    return this._anchors[anchor.index - 1] || null;\n  }\n\n  /**\n   * Return a next {@link AnchorPoint} of given {@link AnchorPoint}\n   * If it does not exist, return `null` instead\n   * @ko 주어진 {@link AnchorPoint}의 다음 {@link AnchorPoint}를 반환합니다\n   * 존재하지 않을 경우 `null`을 반환합니다\n   * @param {AnchorPoint} anchor A reference {@link AnchorPoint}<ko>기준 {@link AnchorPoint}</ko>\n   * @return {AnchorPoint | null} The next {@link AnchorPoint}<ko>다음 {@link AnchorPoint}</ko>\n   */\n  public getNextAnchor(anchor: AnchorPoint): AnchorPoint | null {\n    return this._anchors[anchor.index + 1] || null;\n  }\n\n  /**\n   * Return the camera's position progress in the panel below\n   * Value is from 0 to 1 when the camera's inside panel\n   * Value can be lower than 0 or bigger than 1 when it's in the margin area\n   * @ko 현재 카메라 아래 패널에서의 위치 진행도를 반환합니다\n   * 반환값은 카메라가 패널 내부에 있을 경우 0부터 1까지의 값을 갖습니다\n   * 패널의 margin 영역에 있을 경우 0보다 작거나 1보다 큰 값을 반환할 수 있습니다\n   */\n  public getProgressInPanel(panel: Panel) {\n    const panelRange = panel.range;\n\n    return (this._position - panelRange.min) / (panelRange.max - panelRange.min);\n  }\n\n  /**\n   * Return {@link AnchorPoint} that includes given position\n   * If there's no {@link AnchorPoint} that includes the given position, return `null` instead\n   * @ko 주어진 좌표를 포함하는 {@link AnchorPoint}를 반환합니다\n   * 주어진 좌표를 포함하는 {@link AnchorPoint}가 없을 경우 `null`을 반환합니다\n   * @param {number} position A position to check<ko>확인할 좌표</ko>\n   * @return {AnchorPoint | null} The {@link AnchorPoint} that includes the given position<ko>해당 좌표를 포함하는 {@link AnchorPoint}</ko>\n   */\n  public findAnchorIncludePosition(position: number): AnchorPoint | null {\n    const anchors = this._anchors;\n    const anchorsIncludingPosition = anchors.filter(anchor => anchor.panel.includePosition(position, true));\n\n    return anchorsIncludingPosition.reduce((nearest: AnchorPoint | null, anchor) => {\n      if (!nearest) return anchor;\n\n      return Math.abs(nearest.position - position) < Math.abs(anchor.position - position)\n        ? nearest\n        : anchor;\n    }, null);\n  }\n\n  /**\n   * Return {@link AnchorPoint} nearest to given position\n   * If there're no {@link AnchorPoint}s, return `null` instead\n   * @ko 해당 좌표에서 가장 가까운 {@link AnchorPoint}를 반환합니다\n   * {@link AnchorPoint}가 하나도 없을 경우 `null`을 반환합니다\n   * @param {number} position A position to check<ko>확인할 좌표</ko>\n   * @return {AnchorPoint | null} The {@link AnchorPoint} nearest to the given position<ko>해당 좌표에 가장 인접한 {@link AnchorPoint}</ko>\n   */\n  public findNearestAnchor(position: number): AnchorPoint | null {\n    const anchors = this._anchors;\n\n    if (anchors.length <= 0) return null;\n\n    let prevDist = Infinity;\n    for (let anchorIdx = 0; anchorIdx < anchors.length; anchorIdx++) {\n      const anchor = anchors[anchorIdx];\n      const dist = Math.abs(anchor.position - position);\n\n      if (dist > prevDist) {\n        // Return previous anchor\n        return anchors[anchorIdx - 1];\n      }\n\n      prevDist = dist;\n    }\n\n    // Return last anchor\n    return anchors[anchors.length - 1];\n  }\n\n  /**\n   * Return {@link AnchorPoint} that matches {@link Flicking#currentPanel}\n   * @ko 현재 {@link Flicking#currentPanel}에 해당하는 {@link AnchorPoint}를 반환합니다\n   * @return {AnchorPoint | null}\n   */\n  public findActiveAnchor(): AnchorPoint | null {\n    const flicking = getFlickingAttached(this._flicking);\n    const activeIndex = flicking.control.activeIndex;\n\n    return find(this._anchors, anchor => anchor.panel.index === activeIndex);\n  }\n\n  /**\n   * Clamp the given position between camera's range\n   * @ko 주어진 좌표를 Camera가 도달 가능한 범위 사이의 값으로 만듭니다\n   * @param {number} position A position to clamp<ko>범위를 제한할 좌표</ko>\n   * @return {number} A clamped position<ko>범위 제한된 좌표</ko>\n   */\n  public clampToReachablePosition(position: number): number {\n    const range = this._range;\n    return clamp(position, range.min, range.max);\n  }\n\n  /**\n   * Check whether the given panel is inside of the Camera's range\n   * @ko 해당 {@link Panel}이 Camera가 도달 가능한 범위 내에 있는지를 반환합니다\n   * @param panel An instance of {@link Panel} to check<ko>확인할 {@link Panel}의 인스턴스</ko>\n   * @return {boolean} Whether the panel's inside Camera's range<ko>도달 가능한 범위 내에 해당 패널이 존재하는지 여부</ko>\n   */\n  public canReach(panel: Panel): boolean {\n    const range = this._range;\n\n    if (panel.removed) return false;\n\n    const panelPos = panel.position;\n\n    return panelPos >= range.min && panelPos <= range.max;\n  }\n\n  /**\n   * Check whether the given panel element is visible at the current position\n   * @ko 현재 좌표에서 해당 패널 엘리먼트를 볼 수 있는지 여부를 반환합니다\n   * @param panel An instance of {@link Panel} to check<ko>확인할 {@link Panel}의 인스턴스</ko>\n   * @return Whether the panel element is visible at the current position<ko>현재 위치에서 해당 패널 엘리먼트가 보이는지 여부</ko>\n   */\n  public canSee(panel: Panel): boolean {\n    const visibleRange = this.visibleRange;\n    // Should not include margin, as we don't declare what the margin is visible as what the panel is visible.\n    return panel.isVisibleOnRange(visibleRange.min, visibleRange.max);\n  }\n\n  /**\n   * Update Camera's {@link Camera#alignPosition alignPosition}\n   * @ko Camera의 {@link Camera#alignPosition alignPosition}을 업데이트합니다\n   * @chainable\n   * @return {this}\n   */\n  public updateAlignPos(): this {\n    const align = this._align;\n\n    const alignVal = typeof align === \"object\"\n      ? (align as { camera: string | number }).camera\n      : align;\n\n    this._alignPos = parseAlign(alignVal, this.size);\n\n    return this;\n  }\n\n  /**\n   * Update Camera's {@link Camera#anchorPoints anchorPoints}\n   * @ko Camera의 {@link Camera#anchorPoints anchorPoints}를 업데이트합니다\n   * @throws {FlickingError}\n   * {@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link Camera#init init} is not called before\n   * <ko>{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} {@link Camera#init init}이 이전에 호출되지 않은 경우</ko>\n   * @chainable\n   * @return {this}\n   */\n  public updateAnchors(): this {\n    const flicking = getFlickingAttached(this._flicking);\n    const panels = flicking.renderer.panels;\n\n    this._anchors = panels.map((panel, index) => new AnchorPoint({\n      index,\n      position: panel.position,\n      panel\n    }));\n\n    return this;\n  }\n\n  /**\n   * Update Viewport's height to active panel's height\n   * @ko 현재 선택된 패널의 높이와 동일하도록 뷰포트의 높이를 업데이트합니다\n   * @throws {FlickingError}\n   * {@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link Camera#init init} is not called before\n   * <ko>{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} {@link Camera#init init}이 이전에 호출되지 않은 경우</ko>\n   * @chainable\n   * @return {this}\n   */\n  public updateAdaptiveHeight() {\n    const flicking = getFlickingAttached(this._flicking);\n    const activePanel = flicking.control.activePanel;\n\n    if (!flicking.horizontal || !flicking.adaptive || !activePanel) return;\n\n    flicking.viewport.setSize({\n      height: activePanel.height\n    });\n  }\n\n  /**\n   * Update current offset of the camera\n   * @ko 현재 카메라의 오프셋을 업데이트합니다\n   * @chainable\n   * @return {this}\n   */\n  public updateOffset(): this {\n    const flicking = getFlickingAttached(this._flicking);\n    const position = this._position;\n    const unRenderedPanels = flicking.panels.filter(panel => !panel.rendered);\n\n    this._offset = unRenderedPanels\n      .filter(panel => panel.position + panel.offset < position)\n      .reduce((offset, panel) => offset + panel.sizeIncludingMargin, 0);\n\n    this.applyTransform();\n\n    return this;\n  }\n\n  /**\n   * Reset the history of {@link Flicking#event:needPanel needPanel} events so it can be triggered again\n   * @ko 발생한 {@link Flicking#event:needPanel needPanel} 이벤트들을 초기화하여 다시 발생할 수 있도록 합니다\n   * @chainable\n   * @return {this}\n   */\n  public resetNeedPanelHistory(): this {\n    this._needPanelTriggered = { prev: false, next: false };\n    return this;\n  }\n\n  /**\n   * Apply \"transform\" style with the current position to camera element\n   * @ko 현재 위치를 기준으로한 transform 스타일을 카메라 엘리먼트에 적용합니다.\n   * @chainable\n   * @return {this}\n   */\n  public applyTransform(): this {\n    const el = this._el;\n    const flicking = getFlickingAttached(this._flicking);\n\n    const actualPosition = this._position - this._alignPos - this._offset;\n\n    el.style[this._transform] = flicking.horizontal\n      ? `translate(${-actualPosition}px)`\n      : `translate(0, ${-actualPosition}px)`;\n\n    return this;\n  }\n\n  protected _resetInternalValues() {\n    this._position = 0;\n    this._alignPos = 0;\n    this._offset = 0;\n    this._range = { min: 0, max: 0 };\n    this._visiblePanels = [];\n    this._anchors = [];\n    this._needPanelTriggered = { prev: false, next: false };\n  }\n\n  protected _refreshVisiblePanels() {\n    const flicking = getFlickingAttached(this._flicking);\n    const panels = flicking.renderer.panels;\n\n    const newVisiblePanels = panels.filter(panel => this.canSee(panel));\n    const prevVisiblePanels = this._visiblePanels;\n    this._visiblePanels = newVisiblePanels;\n\n    const added: Panel[] = newVisiblePanels.filter(panel => !includes(prevVisiblePanels, panel));\n    const removed: Panel[] = prevVisiblePanels.filter(panel => !includes(newVisiblePanels, panel));\n\n    if (added.length > 0 || removed.length > 0) {\n      void flicking.renderer.render().then(() => {\n        flicking.trigger(new ComponentEvent(EVENTS.VISIBLE_CHANGE, {\n          added,\n          removed,\n          visiblePanels: newVisiblePanels\n        }));\n      });\n    }\n  }\n\n  protected _checkNeedPanel(): void {\n    const needPanelTriggered = this._needPanelTriggered;\n\n    if (needPanelTriggered.prev && needPanelTriggered.next) return;\n\n    const flicking = getFlickingAttached(this._flicking);\n    const panels = flicking.renderer.panels;\n\n    if (panels.length <= 0) {\n      if (!needPanelTriggered.prev) {\n        flicking.trigger(new ComponentEvent(EVENTS.NEED_PANEL, { direction: DIRECTION.PREV }));\n        needPanelTriggered.prev = true;\n      }\n      if (!needPanelTriggered.next) {\n        flicking.trigger(new ComponentEvent(EVENTS.NEED_PANEL, { direction: DIRECTION.NEXT }));\n        needPanelTriggered.next = true;\n      }\n\n      return;\n    }\n\n    const cameraPosition = this._position;\n    const cameraSize = this.size;\n    const cameraRange = this._range;\n    const needPanelThreshold = flicking.needPanelThreshold;\n\n    const cameraPrev = cameraPosition - this._alignPos;\n    const cameraNext = cameraPrev + cameraSize;\n\n    const firstPanel = panels[0];\n    const lastPanel = panels[panels.length - 1];\n\n    if (!needPanelTriggered.prev) {\n      const firstPanelPrev = firstPanel.range.min;\n\n      if (cameraPrev <= (firstPanelPrev + needPanelThreshold) || cameraPosition <= (cameraRange.min + needPanelThreshold)) {\n        flicking.trigger(new ComponentEvent(EVENTS.NEED_PANEL, { direction: DIRECTION.PREV }));\n        needPanelTriggered.prev = true;\n      }\n    }\n\n    if (!needPanelTriggered.next) {\n      const lastPanelNext = lastPanel.range.max;\n\n      if (cameraNext >= (lastPanelNext - needPanelThreshold) || cameraPosition >= (cameraRange.max - needPanelThreshold)) {\n        flicking.trigger(new ComponentEvent(EVENTS.NEED_PANEL, { direction: DIRECTION.NEXT }));\n        needPanelTriggered.next = true;\n      }\n    }\n  }\n\n  protected _checkReachEnd(prevPos: number, newPos: number): void {\n    const flicking = getFlickingAttached(this._flicking);\n    const range = this._range;\n\n    const wasBetweenRange = prevPos > range.min && prevPos < range.max;\n    const isBetweenRange = newPos > range.min && newPos < range.max;\n\n    if (!wasBetweenRange || isBetweenRange) return;\n\n    const direction = newPos <= range.min ? DIRECTION.PREV : DIRECTION.NEXT;\n\n    flicking.trigger(new ComponentEvent(EVENTS.REACH_EDGE, {\n      direction\n    }));\n  }\n\n  protected _checkTranslateSupport = () => {\n    const transforms = [\"webkitTransform\", \"msTransform\", \"MozTransform\", \"OTransform\", \"transform\"];\n\n    const supportedStyle = document.documentElement.style;\n    let transformName = \"\";\n    for (const prefixedTransform of transforms) {\n      if (prefixedTransform in supportedStyle) {\n        transformName = prefixedTransform;\n      }\n    }\n\n    if (!transformName) {\n      throw new FlickingError(ERROR.MESSAGE.TRANSFORM_NOT_SUPPORTED, ERROR.CODE.TRANSFORM_NOT_SUPPORTED);\n    }\n\n    this._transform = transformName;\n  };\n}\n\nexport default Camera;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { getFlickingAttached } from \"../utils\";\n\nimport Camera from \"./Camera\";\n\n/**\n * A {@link Camera} that can move from the position of the first panel to the position of the last panel\n * @ko 첫번째 패널의 좌표로부터 마지막 패널의 좌표로까지 이동할 수 있는 종류의 {@link Camera}\n */\nclass LinearCamera extends Camera {\n  /**\n   * Update {@link Camera#range range} of Camera\n   * @ko Camera의 {@link Camera#range range}를 업데이트합니다\n   * @chainable\n   * @throws {FlickingError}\n   * {@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link Camera#init init} is not called before\n   * <ko>{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} {@link Camera#init init}이 이전에 호출되지 않은 경우</ko>\n   * @return {this}\n   */\n  public updateRange() {\n    const flicking = getFlickingAttached(this._flicking);\n    const renderer = flicking.renderer;\n\n    const firstPanel = renderer.getPanel(0);\n    const lastPanel = renderer.getPanel(renderer.panelCount - 1);\n\n    this._range = { min: firstPanel?.position ?? 0, max: lastPanel?.position ?? 0 };\n    return this;\n  }\n}\n\nexport default LinearCamera;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Panel from \"../core/panel/Panel\";\nimport AnchorPoint from \"../core/AnchorPoint\";\nimport { DIRECTION } from \"../const/external\";\nimport { circulatePosition, getFlickingAttached } from \"../utils\";\nimport { ValueOf } from \"../type/internal\";\n\nimport Camera from \"./Camera\";\n\n/**\n * A data of the position that changes order of the panel elements\n * @ko 패널 엘리먼트 순서가 변경되는 좌표의 데이터\n * @interface\n * @property {Panel} panel Toggling panel<ko>순서를 변경할 패널</ko>\n * @property {DIRECTION} direction Toggling position<ko>순서를 변경할 방향</ko>\n * @property {boolean} toggled Whether the panel has toggled its position to `direction`<ko>`direction` 방향으로 패널 위치를 변경했는지 여부를 나타내는 값</ko>\n */\nexport interface TogglePoint {\n  panel: Panel;\n  direction: ValueOf<typeof DIRECTION>;\n  toggled: boolean;\n}\n\n/**\n * A {@link Camera} that connects the last panel and the first panel, enabling continuous loop\n * @ko 첫번째 패널과 마지막 패널이 이어진 상태로, 무한히 회전할 수 있는 종류의 {@link Camera}\n */\nclass CircularCamera extends Camera {\n  private _circularOffset: number = 0;\n  private _circularEnabled: boolean = false;\n\n  public get offset() { return this._offset - this._circularOffset; }\n  public get controlParams() { return { range: this._range, position: this._position, circular: this._circularEnabled }; }\n\n  public getPrevAnchor(anchor: AnchorPoint): AnchorPoint | null {\n    if (!this._circularEnabled || anchor.index !== 0) return super.getPrevAnchor(anchor);\n\n    const anchors = this._anchors;\n    const rangeDiff = this.rangeDiff;\n    const lastAnchor = anchors[anchors.length - 1];\n\n    return new AnchorPoint({\n      index: lastAnchor.index,\n      position: lastAnchor.position - rangeDiff,\n      panel: lastAnchor.panel\n    });\n  }\n\n  public getNextAnchor(anchor: AnchorPoint): AnchorPoint | null {\n    const anchors = this._anchors;\n\n    if (!this._circularEnabled || anchor.index !== anchors.length - 1) return super.getNextAnchor(anchor);\n\n    const rangeDiff = this.rangeDiff;\n    const firstAnchor = anchors[0];\n\n    return new AnchorPoint({\n      index: firstAnchor.index,\n      position: firstAnchor.position + rangeDiff,\n      panel: firstAnchor.panel\n    });\n  }\n\n  public findAnchorIncludePosition(position: number): AnchorPoint | null {\n    if (!this._circularEnabled) return super.findAnchorIncludePosition(position);\n\n    const range = this._range;\n    const anchors = this._anchors;\n    const rangeDiff = this.rangeDiff;\n    const anchorCount = anchors.length;\n    const positionInRange = circulatePosition(position, range.min, range.max);\n\n    let anchorInRange: AnchorPoint | null = super.findAnchorIncludePosition(positionInRange);\n\n    if (anchorCount > 0 && (position === range.min || position === range.max)) {\n      const possibleAnchors = [\n        anchorInRange,\n        new AnchorPoint({\n          index: 0,\n          position: anchors[0].position + rangeDiff,\n          panel: anchors[0].panel\n        }),\n        new AnchorPoint({\n          index: anchorCount - 1,\n          position: anchors[anchorCount - 1].position - rangeDiff,\n          panel: anchors[anchorCount - 1].panel\n        })\n      ].filter(anchor => !!anchor) as AnchorPoint[];\n\n      anchorInRange = possibleAnchors.reduce((nearest: AnchorPoint | null, anchor) => {\n        if (!nearest) return anchor;\n\n        return Math.abs(nearest.position - position) < Math.abs(anchor.position - position)\n          ? nearest\n          : anchor;\n      }, null);\n    }\n\n    if (!anchorInRange) return null;\n\n    if (position < range.min) {\n      const loopCount = -Math.floor((range.min - position) / rangeDiff) - 1;\n\n      return new AnchorPoint({\n        index: anchorInRange.index,\n        position: anchorInRange.position + rangeDiff * loopCount,\n        panel: anchorInRange.panel\n      });\n    } else if (position > range.max) {\n      const loopCount = Math.floor((position - range.max) / rangeDiff) + 1;\n\n      return new AnchorPoint({\n        index: anchorInRange.index,\n        position: anchorInRange.position + rangeDiff * loopCount,\n        panel: anchorInRange.panel\n      });\n    }\n\n    return anchorInRange;\n  }\n\n  public clampToReachablePosition(position: number): number {\n    // Basically all position is reachable for circular camera\n    return this._circularEnabled\n      ? position\n      : super.clampToReachablePosition(position);\n  }\n\n  public canReach(panel: Panel): boolean {\n    if (panel.removed) return false;\n\n    return this._circularEnabled\n      // Always reachable on circular mode\n      ? true\n      : super.canReach(panel);\n  }\n\n  public canSee(panel: Panel): boolean {\n    const range = this._range;\n    const rangeDiff = this.rangeDiff;\n    const visibleRange = this.visibleRange;\n    const visibleInCurrentRange = super.canSee(panel);\n\n    if (!this._circularEnabled) {\n      return visibleInCurrentRange;\n    }\n\n    // Check looped visible area for circular case\n    if (visibleRange.min < range.min) {\n      return visibleInCurrentRange || panel.isVisibleOnRange(visibleRange.min + rangeDiff, visibleRange.max + rangeDiff);\n    } else if (visibleRange.max > range.max) {\n      return visibleInCurrentRange || panel.isVisibleOnRange(visibleRange.min - rangeDiff, visibleRange.max - rangeDiff);\n    }\n\n    return visibleInCurrentRange;\n  }\n\n  /**\n   * Update {@link Camera#range range} of Camera\n   * @ko Camera의 {@link Camera#range range}를 업데이트합니다\n   * @chainable\n   * @throws {FlickingError}\n   * {@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link Camera#init init} is not called before\n   * <ko>{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} {@link Camera#init init}이 이전에 호출되지 않은 경우</ko>\n   * @return {this}\n   */\n  public updateRange() {\n    const flicking = getFlickingAttached(this._flicking);\n    const renderer = flicking.renderer;\n\n    const panels = renderer.panels;\n    if (panels.length <= 0) {\n      this._resetInternalValues();\n      return this;\n    }\n\n    const firstPanel = panels[0]!;\n    const lastPanel = panels[panels.length - 1]!;\n    const firstPanelPrev = firstPanel.range.min - firstPanel.margin.prev;\n    const lastPanelNext = lastPanel.range.max + lastPanel.margin.next;\n\n    const visibleSize = this.size;\n    const panelSizeSum = lastPanelNext - firstPanelPrev;\n\n    const canSetCircularMode = panels\n      .every(panel => panelSizeSum - panel.size >= visibleSize);\n    this._circularEnabled = canSetCircularMode;\n\n    if (canSetCircularMode) {\n      this._range = { min: firstPanelPrev, max: lastPanelNext };\n\n      panels.forEach(panel => panel.updateCircularToggleDirection());\n    } else {\n      this._range = { min: firstPanel.position, max: lastPanel.position };\n    }\n\n    this.updateOffset();\n\n    return this;\n  }\n\n  public updateOffset() {\n    this._updateCircularOffset();\n\n    return super.updateOffset();\n  }\n\n  public lookAt(pos: number) {\n    const flicking = getFlickingAttached(this._flicking);\n    const prevPos = this._position;\n\n    if (pos === prevPos) return super.lookAt(pos);\n\n    const panels = flicking.renderer.panels;\n    const toggled = panels.map(panel => panel.toggle(prevPos, pos));\n\n    this._position = pos;\n    super.lookAt(pos);\n\n    if (toggled.some(isToggled => isToggled)) {\n      void flicking.renderer.render().then(() => {\n        this.updateOffset();\n      });\n    }\n  }\n\n  public applyTransform(): this {\n    const el = this._el;\n    const flicking = getFlickingAttached(this._flicking);\n\n    const actualPosition = this._position - this._alignPos - this._offset + this._circularOffset;\n\n    el.style[this._transform] = flicking.horizontal\n      ? `translate(${-actualPosition}px)`\n      : `translate(0, ${-actualPosition}px)`;\n\n    return this;\n  }\n\n  protected _resetInternalValues() {\n    super._resetInternalValues();\n    this._circularOffset = 0;\n    this._circularEnabled = false;\n  }\n\n  private _calcPanelAreaSum(panels: Panel[]) {\n    return panels.reduce((sum: number, panel: Panel) => sum + panel.sizeIncludingMargin, 0);\n  }\n\n  private _updateCircularOffset() {\n    if (!this._circularEnabled) {\n      this._circularOffset = 0;\n      return;\n    }\n\n    const flicking = getFlickingAttached(this._flicking);\n    const toggled = flicking.panels.filter(panel => panel.toggled);\n    const toggledPrev = toggled.filter(panel => panel.toggleDirection === DIRECTION.PREV);\n    const toggledNext = toggled.filter(panel => panel.toggleDirection === DIRECTION.NEXT);\n\n    this._circularOffset = this._calcPanelAreaSum(toggledPrev) - this._calcPanelAreaSum(toggledNext);\n  }\n}\n\nexport default CircularCamera;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Panel from \"../core/panel/Panel\";\nimport AnchorPoint from \"../core/AnchorPoint\";\nimport { getFlickingAttached, parseAlign } from \"../utils\";\n\nimport Camera from \"./Camera\";\n\n/**\n * A {@link Camera} that set range not to go out of the first/last panel, so it won't show empty spaces before/after the first/last panel\n * @ko 첫번째와 마지막 패널 밖으로 넘어가지 못하도록 범위를 설정하여, 첫번째/마지막 패널 전/후의 빈 공간을 보이지 않도록 하는 종류의 {@link Camera}\n */\nclass BoundCamera extends Camera {\n  /**\n   * Update {@link Camera#range range} of Camera\n   * @ko Camera의 {@link Camera#range range}를 업데이트합니다\n   * @chainable\n   * @throws {FlickingError}\n   * {@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link Camera#init init} is not called before\n   * <ko>{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} {@link Camera#init init}이 이전에 호출되지 않은 경우</ko>\n   * @return {this}\n   */\n  public updateRange() {\n    const flicking = getFlickingAttached(this._flicking);\n    const renderer = flicking.renderer;\n    const alignPos = this._alignPos;\n\n    const firstPanel = renderer.getPanel(0);\n    const lastPanel = renderer.getPanel(renderer.panelCount - 1);\n\n    if (!firstPanel || !lastPanel) {\n      this._range = { min: 0, max: 0 };\n      return this;\n    }\n\n    const viewportSize = this.size;\n    const firstPanelPrev = firstPanel.range.min;\n    const lastPanelNext = lastPanel.range.max;\n    const panelAreaSize = lastPanelNext - firstPanelPrev;\n    const isBiggerThanViewport = viewportSize < panelAreaSize;\n\n    const firstPos = firstPanelPrev + alignPos;\n    const lastPos = lastPanelNext - viewportSize + alignPos;\n\n    if (isBiggerThanViewport) {\n      this._range = { min: firstPos, max: lastPos };\n    } else {\n      const align = this._align;\n      const alignVal = typeof align === \"object\"\n        ? (align as { camera: string | number }).camera\n        : align;\n\n      const pos = firstPos + parseAlign(alignVal, lastPos - firstPos);\n\n      this._range = { min: pos, max: pos };\n    }\n\n    return this;\n  }\n\n  public updateAnchors(): this {\n    const flicking = getFlickingAttached(this._flicking);\n    const panels = flicking.renderer.panels;\n\n    if (panels.length <= 0) {\n      this._anchors = [];\n      return this;\n    }\n\n    const range = this._range;\n    const reachablePanels = panels.filter(panel => this.canReach(panel));\n\n    if (reachablePanels.length > 0) {\n      const shouldPrependBoundAnchor = reachablePanels[0].position !== range.min;\n      const shouldAppendBoundAnchor = reachablePanels[reachablePanels.length - 1].position !== range.max;\n      const indexOffset = shouldPrependBoundAnchor ? 1 : 0;\n\n      const newAnchors = reachablePanels.map((panel, idx) => new AnchorPoint({\n        index: idx + indexOffset,\n        position: panel.position,\n        panel\n      }));\n\n      if (shouldPrependBoundAnchor) {\n        newAnchors.splice(0, 0, new AnchorPoint({\n          index: 0,\n          position: range.min,\n          panel: panels[reachablePanels[0].index - 1]\n        }));\n      }\n\n      if (shouldAppendBoundAnchor) {\n        newAnchors.push(new AnchorPoint({\n          index: newAnchors.length,\n          position: range.max,\n          panel: panels[reachablePanels[reachablePanels.length - 1].index + 1]\n        }));\n      }\n\n      this._anchors = newAnchors;\n    } else if (range.min !== range.max) {\n      // There're more than 2 panels\n      const nearestPanelAtMin = this._findNearestPanel(range.min, panels);\n      const panelAtMin = nearestPanelAtMin.index === panels.length - 1\n        ? nearestPanelAtMin.prev()!\n        : nearestPanelAtMin;\n      const panelAtMax = panelAtMin.next()!;\n\n      this._anchors = [\n        new AnchorPoint({\n          index: 0,\n          position: range.min,\n          panel: panelAtMin\n        }),\n        new AnchorPoint({\n          index: 1,\n          position: range.max,\n          panel: panelAtMax\n        })\n      ];\n    } else {\n      this._anchors = [new AnchorPoint({\n        index: 0,\n        position: range.min,\n        panel: this._findNearestPanel(range.min, panels)\n      })];\n    }\n\n    return this;\n  }\n\n  public findAnchorIncludePosition(position: number): AnchorPoint | null {\n    const range = this._range;\n    const anchors = this._anchors;\n\n    if (anchors.length <= 0) return null;\n\n    if (position <= range.min) {\n      return anchors[0];\n    } else if (position >= range.max) {\n      return anchors[anchors.length - 1];\n    } else {\n      return super.findAnchorIncludePosition(position);\n    }\n  }\n\n  private _findNearestPanel(pos: number, panels: Panel[]): Panel {\n    let prevDist = Infinity;\n    for (let panelIdx = 0; panelIdx < panels.length; panelIdx++) {\n      const panel = panels[panelIdx];\n      const dist = Math.abs(panel.position - pos);\n\n      if (dist > prevDist) {\n        // Return previous anchor\n        return panels[panelIdx - 1];\n      }\n\n      prevDist = dist;\n    }\n\n    // Return last anchor\n    return panels[panels.length - 1];\n  }\n}\n\nexport default BoundCamera;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Camera, { CameraOptions } from \"./Camera\";\nimport LinearCamera from \"./LinearCamera\";\nimport CircularCamera from \"./CircularCamera\";\nimport BoundCamera from \"./BoundCamera\";\n\nexport {\n  Camera,\n  LinearCamera,\n  CircularCamera,\n  BoundCamera\n};\n\nexport type {\n  CameraOptions\n};\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { ComponentEvent } from \"@egjs/component\";\nimport ImReady from \"@egjs/imready\";\n\nimport Flicking, { FlickingOptions } from \"../Flicking\";\nimport Panel, { PanelOptions } from \"../core/panel/Panel\";\nimport FlickingError from \"../core/FlickingError\";\nimport { ALIGN, EVENTS } from \"../const/external\";\nimport * as ERROR from \"../const/error\";\nimport { getFlickingAttached, getMinusCompensatedIndex, includes, parsePanelAlign } from \"../utils\";\n\nimport RenderingStrategy from \"./strategy/RenderingStrategy\";\n\nexport interface RendererOptions {\n  align?: FlickingOptions[\"align\"];\n  strategy: RenderingStrategy;\n}\n\n/**\n * A component that manages {@link Panel} and its elements\n * @ko {@link Panel}과 그 엘리먼트들을 관리하는 컴포넌트\n */\nabstract class Renderer {\n  // Internal States\n  protected _flicking: Flicking | null;\n  protected _panels: Panel[];\n\n  // Options\n  protected _align: NonNullable<RendererOptions[\"align\"]>;\n  protected _strategy: RendererOptions[\"strategy\"];\n\n  // Internal states Getter\n  /**\n   * Array of panels\n   * @ko 전체 패널들의 배열\n   * @type {Panel[]}\n   * @readonly\n   * @see Panel\n   */\n  public get panels() { return this._panels; }\n  /**\n   * Count of panels\n   * @ko 전체 패널의 개수\n   * @type {number}\n   * @readonly\n   */\n  public get panelCount() { return this._panels.length; }\n  /**\n   * @internal\n   */\n  public get strategy() { return this._strategy; }\n\n  // Options Getter\n  /**\n   * A {@link Panel}'s {@link Panel#align align} value that applied to all panels\n   * @ko {@link Panel}에 공통적으로 적용할 {@link Panel#align align} 값\n   * @type {Constants.ALIGN | string | number}\n   */\n  public get align() { return this._align; }\n\n  // Options Setter\n  public set align(val: NonNullable<RendererOptions[\"align\"]>) {\n    this._align = val;\n\n    const panelAlign = parsePanelAlign(val);\n    this._panels.forEach(panel => { panel.align = panelAlign; });\n  }\n\n  /**\n   * @param {object} options An options object<ko>옵션 오브젝트</ko>\n   * @param {Constants.ALIGN | string | number} [options.align=\"center\"] An {@link Flicking#align align} value that will be applied to all panels<ko>전체 패널에 적용될 {@link Flicking#align align} 값</ko>\n   * @param {object} [options.strategy] An instance of RenderingStrategy(internal module)<ko>RenderingStrategy의 인스턴스(내부 모듈)</ko>\n   */\n  public constructor({\n    align = ALIGN.CENTER,\n    strategy\n  }: RendererOptions) {\n    this._flicking = null;\n    this._panels = [];\n\n    // Bind options\n    this._align = align;\n    this._strategy = strategy;\n  }\n\n  /**\n   * Render panel elements inside the camera element\n   * @ko 패널 엘리먼트들을 카메라 엘리먼트 내부에 렌더링합니다\n   * @method\n   * @abstract\n   * @memberof Renderer\n   * @instance\n   * @name render\n   * @chainable\n   * @return {this}\n   */\n  public abstract render(): Promise<void>;\n\n  protected abstract _collectPanels(): void;\n  protected abstract _createPanel(el: any, options: Omit<PanelOptions, \"elementProvider\">): Panel;\n\n  /**\n   * Initialize Renderer\n   * @ko Renderer를 초기화합니다\n   * @param {Flicking} flicking An instance of {@link Flicking}<ko>Flicking의 인스턴스</ko>\n   * @chainable\n   * @return {this}\n   */\n  public init(flicking: Flicking): this {\n    this._flicking = flicking;\n    this._collectPanels();\n\n    return this;\n  }\n\n  /**\n   * Destroy Renderer and return to initial state\n   * @ko Renderer를 초기 상태로 되돌립니다\n   * @return {void}\n   */\n  public destroy(): void {\n    this._flicking = null;\n    this._panels = [];\n  }\n\n  /**\n   * Return the {@link Panel} at the given index. `null` if it doesn't exists.\n   * @ko 주어진 인덱스에 해당하는 {@link Panel}을 반환합니다. 주어진 인덱스에 해당하는 패널이 존재하지 않을 경우 `null`을 반환합니다.\n   * @return {Panel | null} Panel at the given index<ko>주어진 인덱스에 해당하는 패널</ko>\n   * @see Panel\n   */\n  public getPanel(index: number): Panel | null {\n    return this._panels[index] || null;\n  }\n\n  public forceRenderAllPanels(): Promise<void> {\n    this._panels.forEach(panel => panel.markForShow());\n\n    return Promise.resolve();\n  }\n\n  /**\n   * Update all panel sizes\n   * @ko 모든 패널의 크기를 업데이트합니다\n   * @chainable\n   * @return {this}\n   */\n  public updatePanelSize(): this {\n    const flicking = getFlickingAttached(this._flicking);\n    const panels = this._panels;\n\n    if (panels.length <= 0) return this;\n\n    if (flicking.panelsPerView > 0) {\n      const firstPanel = panels[0];\n      firstPanel.resize();\n\n      this._updatePanelSizeByGrid(firstPanel, panels);\n    } else {\n      flicking.panels.forEach(panel => panel.resize());\n    }\n\n    return this;\n  }\n\n  /**\n   * Insert new panels at given index\n   * This will increase index of panels after by the number of panels added\n   * @ko 주어진 인덱스에 새로운 패널들을 추가합니다\n   * 해당 인덱스보다 같거나 큰 인덱스를 가진 기존 패널들은 추가한 패널의 개수만큼 인덱스가 증가합니다.\n   * @param {Array<object>} items An array of items to insert<ko>추가할 아이템들의 배열</ko>\n   * @param {number} [items.index] Index to insert new panels at<ko>새로 패널들을 추가할 인덱스</ko>\n   * @param {any[]} [items.elements] An array of element or framework component with element in it<ko>엘리먼트의 배열 혹은 프레임워크에서 엘리먼트를 포함한 컴포넌트들의 배열</ko>\n   * @param {boolean} [items.hasDOMInElements] Whether it contains actual DOM elements. If set to true, renderer will add them to the camera element<ko>내부에 실제 DOM 엘리먼트들을 포함하고 있는지 여부. true로 설정할 경우, 렌더러는 해당 엘리먼트들을 카메라 엘리먼트 내부에 추가합니다</ko>\n   * @return {Panel[]} An array of prepended panels<ko>추가된 패널들의 배열</ko>\n   */\n  public batchInsert(...items: Array<{\n    index: number;\n    elements: any[];\n    hasDOMInElements: boolean;\n  }>): Panel[] {\n    const panels = this._panels;\n    const flicking = getFlickingAttached(this._flicking);\n\n    const { control } = flicking;\n    const prevFirstPanel = panels[0];\n    const align = parsePanelAlign(this._align);\n\n    const allPanelsInserted = items.reduce((addedPanels, item) => {\n      const insertingIdx = getMinusCompensatedIndex(item.index, panels.length);\n      const panelsPushed = panels.slice(insertingIdx);\n      const panelsInserted = item.elements.map((el, idx) => this._createPanel(el, { index: insertingIdx + idx, align, flicking }));\n\n      panels.splice(insertingIdx, 0, ...panelsInserted);\n\n      if (item.hasDOMInElements) {\n        // Insert the actual elements as camera element's children\n        this._insertPanelElements(panelsInserted, panelsPushed[0] ?? null);\n      }\n\n      // Resize the newly added panels\n      if (flicking.panelsPerView > 0) {\n        const firstPanel = prevFirstPanel || panelsInserted[0].resize();\n\n        this._updatePanelSizeByGrid(firstPanel, panelsInserted);\n      } else {\n        panelsInserted.forEach(panel => panel.resize());\n      }\n\n      // Update panel indexes & positions\n      panelsPushed.forEach(panel => {\n        panel.increaseIndex(panelsInserted.length);\n        panel.updatePosition();\n      });\n\n      return [...addedPanels, ...panelsInserted];\n    }, []);\n\n    if (allPanelsInserted.length <= 0) return [];\n\n    // Update camera & control\n    this._updateCameraAndControl();\n\n    void this.render();\n\n    // Move to the first panel added if no panels existed\n    // FIXME: fix for animating case\n    if (allPanelsInserted.length > 0 && !control.animating) {\n      void control.moveToPanel(control.activePanel || allPanelsInserted[0], {\n        duration: 0\n      }).catch(() => void 0);\n    }\n\n    flicking.camera.updateOffset();\n\n    flicking.trigger(new ComponentEvent(EVENTS.PANEL_CHANGE, {\n      added: allPanelsInserted,\n      removed: []\n    }));\n\n    this.checkPanelContentsReady(allPanelsInserted);\n\n    return allPanelsInserted;\n  }\n\n  /**\n   * Remove the panel at the given index\n   * This will decrease index of panels after by the number of panels removed\n   * @ko 주어진 인덱스의 패널을 제거합니다\n   * 해당 인덱스보다 큰 인덱스를 가진 기존 패널들은 제거한 패널의 개수만큼 인덱스가 감소합니다\n   * @param {Array<object>} items An array of items to remove<ko>제거할 아이템들의 배열</ko>\n   * @param {number} [items.index] Index of panel to remove<ko>제거할 패널의 인덱스</ko>\n   * @param {number} [items.deleteCount=1] Number of panels to remove from index<ko>`index` 이후로 제거할 패널의 개수</ko>\n   * @param {boolean} [items.hasDOMInElements=1] Whether it contains actual DOM elements. If set to true, renderer will remove them from the camera element<ko>내부에 실제 DOM 엘리먼트들을 포함하고 있는지 여부. true로 설정할 경우, 렌더러는 해당 엘리먼트들을 카메라 엘리먼트 내부에서 제거합니다</ko>\n   * @return An array of removed panels<ko>제거된 패널들의 배열</ko>\n   */\n  public batchRemove(...items: Array<{ index: number; deleteCount: number; hasDOMInElements: boolean }>): Panel[] {\n    const panels = this._panels;\n    const flicking = getFlickingAttached(this._flicking);\n\n    const { camera, control } = flicking;\n    const activePanel = control.activePanel;\n    const activeIndex = control.activeIndex;\n\n    const allPanelsRemoved = items.reduce((removed, item) => {\n      const { index, deleteCount } = item;\n      const removingIdx = getMinusCompensatedIndex(index, panels.length);\n\n      const panelsPulled = panels.slice(removingIdx + deleteCount);\n      const panelsRemoved = panels.splice(removingIdx, deleteCount);\n\n      if (panelsRemoved.length <= 0) return [];\n\n      // Update panel indexes & positions\n      panelsPulled.forEach(panel => {\n        panel.decreaseIndex(panelsRemoved.length);\n        panel.updatePosition();\n      });\n\n      if (item.hasDOMInElements) {\n        this._removePanelElements(panelsRemoved);\n      }\n\n      // Remove panel elements\n      panelsRemoved.forEach(panel => panel.destroy());\n\n      if (includes(panelsRemoved, activePanel)) {\n        control.resetActive();\n      }\n\n      return [...removed, ...panelsRemoved];\n    }, []);\n\n    // Update camera & control\n    this._updateCameraAndControl();\n\n    void this.render();\n\n    // FIXME: fix for animating case\n    if (allPanelsRemoved.length > 0 && !control.animating) {\n      const targetPanel = includes(allPanelsRemoved, activePanel)\n        ? (panels[activeIndex] || panels[panels.length - 1])\n        : activePanel;\n\n      if (targetPanel) {\n        void control.moveToPanel(targetPanel, {\n          duration: 0\n        }).catch(() => void 0);\n      } else {\n        // All panels removed\n        camera.lookAt(0);\n      }\n    }\n\n    flicking.camera.updateOffset();\n\n    flicking.trigger(new ComponentEvent(EVENTS.PANEL_CHANGE, {\n      added: [],\n      removed: allPanelsRemoved\n    }));\n\n    return allPanelsRemoved;\n  }\n\n  /**\n   * @internal\n   */\n  public checkPanelContentsReady(checkingPanels: Panel[]) {\n    const flicking = getFlickingAttached(this._flicking);\n    const resizeOnContentsReady = flicking.resizeOnContentsReady;\n    const panels = this._panels;\n\n    if (!resizeOnContentsReady || flicking.virtualEnabled) return;\n\n    const hasContents = (panel: Panel) => !!panel.element.querySelector(\"img, video\");\n    checkingPanels = checkingPanels.filter(panel => hasContents(panel));\n\n    if (checkingPanels.length <= 0) return;\n\n    const contentsReadyChecker = new ImReady();\n\n    checkingPanels.forEach(panel => {\n      panel.loading = true;\n    });\n\n    contentsReadyChecker.on(\"readyElement\", e => {\n      if (!this._flicking) {\n        // Renderer's destroy() is called before\n        contentsReadyChecker.destroy();\n        return;\n      }\n\n      const panel = checkingPanels[e.index];\n      const camera = flicking.camera;\n      const control = flicking.control;\n      const prevProgressInPanel = control.activePanel\n        ? camera.getProgressInPanel(control.activePanel)\n        : 0;\n\n      panel.loading = false;\n      panel.resize();\n      panels.slice(panel.index + 1).forEach(panelBehind => panelBehind.updatePosition());\n\n      if (!flicking.initialized) return;\n\n      camera.updateRange();\n      camera.updateAnchors();\n\n      if (control.animating) {\n        // TODO: Need Axes update\n      } else {\n        control.updatePosition(prevProgressInPanel);\n        control.updateInput();\n      }\n    });\n\n    contentsReadyChecker.on(\"preReady\", e => {\n      if (this._flicking) {\n        void this.render();\n      }\n\n      if (e.readyCount === e.totalCount) {\n        contentsReadyChecker.destroy();\n      }\n    });\n\n    contentsReadyChecker.on(\"ready\", () => {\n      if (this._flicking) {\n        void this.render();\n      }\n      contentsReadyChecker.destroy();\n    });\n\n    contentsReadyChecker.check(checkingPanels.map(panel => panel.element));\n  }\n\n  protected _updateCameraAndControl() {\n    const flicking = getFlickingAttached(this._flicking);\n    const { camera, control } = flicking;\n\n    camera.updateRange();\n    camera.updateAnchors();\n    camera.resetNeedPanelHistory();\n    control.updateInput();\n  }\n\n  protected _showOnlyVisiblePanels(flicking: Flicking) {\n    const panels = flicking.renderer.panels;\n    const camera = flicking.camera;\n\n    const visibleIndexes = camera.visiblePanels.reduce((visibles, panel) => {\n      visibles[panel.index] = true;\n      return visibles;\n    }, {});\n\n    panels.forEach(panel => {\n      if (panel.index in visibleIndexes || panel.loading) {\n        panel.markForShow();\n      } else if (!flicking.holding) {\n        // During the input sequence,\n        // Do not remove panel elements as it won't trigger touchend event.\n        panel.markForHide();\n      }\n    });\n  }\n\n  protected _updatePanelSizeByGrid(referencePanel: Panel, panels: Panel[]) {\n    const flicking = getFlickingAttached(this._flicking);\n    const panelsPerView = flicking.panelsPerView;\n\n    if (panelsPerView <= 0) {\n      throw new FlickingError(ERROR.MESSAGE.WRONG_OPTION(\"panelsPerView\", panelsPerView), ERROR.CODE.WRONG_OPTION);\n    }\n    if (panels.length <= 0) return;\n\n    const viewportSize = flicking.camera.size;\n    const gap = referencePanel.margin.prev + referencePanel.margin.next;\n\n    const panelSize = (viewportSize - gap * (panelsPerView - 1)) / panelsPerView;\n    const panelSizeObj = flicking.horizontal\n      ? { width: panelSize }\n      : { height: panelSize };\n    const firstPanelSizeObj = {\n      size: panelSize,\n      height: referencePanel.height,\n      margin: referencePanel.margin\n    };\n\n    if (!flicking.noPanelStyleOverride) {\n      this._strategy.updatePanelSizes(flicking, panelSizeObj);\n    }\n\n    flicking.panels.forEach(panel => panel.resize(firstPanelSizeObj));\n  }\n\n  protected _removeAllChildsFromCamera() {\n    const flicking = getFlickingAttached(this._flicking);\n    const cameraElement = flicking.camera.element;\n\n    // Remove other elements\n    while (cameraElement.firstChild) {\n      cameraElement.removeChild(cameraElement.firstChild);\n    }\n  }\n\n  protected _insertPanelElements(panels: Panel[], nextSibling: Panel | null = null) {\n    const flicking = getFlickingAttached(this._flicking);\n    const camera = flicking.camera;\n    const cameraElement = camera.element;\n    const nextSiblingElement = nextSibling?.element || null;\n    const fragment = document.createDocumentFragment();\n\n    panels.forEach(panel => fragment.appendChild(panel.element));\n    cameraElement.insertBefore(fragment, nextSiblingElement);\n  }\n\n  protected _removePanelElements(panels: Panel[]) {\n    const flicking = getFlickingAttached(this._flicking);\n    const cameraElement = flicking.camera.element;\n\n    panels.forEach(panel => {\n      cameraElement.removeChild(panel.element);\n    });\n  }\n}\n\nexport default Renderer;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { getFlickingAttached, toArray } from \"../utils\";\nimport Panel, { PanelOptions } from \"../core/panel/Panel\";\n\nimport Renderer from \"./Renderer\";\n\n/**\n *\n */\nclass VanillaRenderer extends Renderer {\n  // eslint-disable-next-line @typescript-eslint/require-await\n  public async render() {\n    const flicking = getFlickingAttached(this._flicking);\n    const strategy = this._strategy;\n\n    strategy.updateRenderingPanels(flicking);\n    strategy.renderPanels(flicking);\n\n    this._resetPanelElementOrder();\n  }\n\n  protected _collectPanels() {\n    const flicking = getFlickingAttached(this._flicking);\n    const camera = flicking.camera;\n\n    this._removeAllTextNodes();\n    this._panels = this._strategy.collectPanels(flicking, camera.children);\n  }\n\n  protected _createPanel(el: HTMLElement, options: Omit<PanelOptions, \"elementProvider\">): Panel {\n    return this._strategy.createPanel(el, options);\n  }\n\n  private _resetPanelElementOrder() {\n    const flicking = getFlickingAttached(this._flicking);\n    const cameraEl = flicking.camera.element;\n\n    // We're using reversed panels here as last panel should be the last element of camera element\n    const reversedElements = this._strategy\n      .getRenderingElementsByOrder(flicking)\n      .reverse();\n\n    reversedElements.forEach((el, idx) => {\n      const nextEl = reversedElements[idx - 1] ? reversedElements[idx - 1] : null;\n\n      if (el.nextElementSibling !== nextEl) {\n        cameraEl.insertBefore(el, nextEl);\n      }\n    });\n  }\n\n  private _removeAllTextNodes() {\n    const flicking = getFlickingAttached(this._flicking);\n    const cameraElement = flicking.camera.element;\n\n    // Remove all text nodes in the camera element\n    toArray(cameraElement.childNodes).forEach(node => {\n      if (node.nodeType === Node.TEXT_NODE) {\n        cameraElement.removeChild(node);\n      }\n    });\n  }\n}\n\nexport default VanillaRenderer;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Panel from \"../core/panel/Panel\";\n\nimport Renderer from \"./Renderer\";\n\n/**\n *\n */\nabstract class ExternalRenderer extends Renderer {\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  protected _insertPanelElements(panels: Panel[], nextSibling: Panel | null): void {\n    // DO NOTHING, overrided to prevent an unexpected error\n  }\n\n  protected _removePanelElements(panels: Panel[]): void {\n    // DO NOTHING, overrided to prevent an unexpected error\n  }\n\n  protected _removeAllChildsFromCamera(): void {\n    // DO NOTHING, overrided to prevent an unexpected error\n  }\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n\n  // protected _renderVirtualPanels() {\n  //   const flicking = getFlickingAttached(this._flicking);\n  //   const virtualManager = this._virtualManager;\n\n  //   if (!virtualManager) return;\n\n  //   const elements = virtualManager.elements;\n  //   const visiblePanels = flicking.visiblePanels as VirtualPanel[];\n  //   const invisibles = elements.map((_, idx) => idx);\n\n  //   visiblePanels.forEach(panel => {\n  //     const virtualEl = panel.virtualElement;\n\n  //     invisibles[virtualEl.index] = -1;\n  //     virtualEl.renderingPanel = panel;\n  //     virtualEl.show();\n  //     panel.markForShow();\n  //   });\n\n  //   invisibles.filter(val => val >= 0)\n  //     .forEach(idx => {\n  //       const virtualEl = elements[idx];\n  //       virtualEl.hide();\n  //       virtualEl.renderingPanel?.markForHide();\n  //       virtualEl.renderingPanel = null;\n  //     });\n  // }\n}\n\nexport default ExternalRenderer;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Flicking from \"../../Flicking\";\nimport Panel, { PanelOptions } from \"../../core/panel/Panel\";\nimport ElementProvider from \"../../core/panel/provider/ElementProvider\";\nimport { DIRECTION } from \"../../const/external\";\nimport { parsePanelAlign } from \"../../utils\";\n\nimport RenderingStrategy from \"./RenderingStrategy\";\n\nexport interface NormalRenderingStrategyOptions {\n  providerCtor: new (...args: any) => ElementProvider;\n  panelCtor: new (options: PanelOptions) => Panel;\n}\n\n\nclass NormalRenderingStrategy implements RenderingStrategy {\n  private _providerCtor: NormalRenderingStrategyOptions[\"providerCtor\"];\n  private _panelCtor: NormalRenderingStrategyOptions[\"panelCtor\"];\n\n  public constructor({ providerCtor, panelCtor }: NormalRenderingStrategyOptions) {\n    this._providerCtor = providerCtor;\n    this._panelCtor = panelCtor;\n  }\n\n  public renderPanels() {\n    // DO_NOTHING\n  }\n\n  public getRenderingIndexesByOrder(flicking: Flicking) {\n    const renderedPanels = flicking.renderer.panels.filter(panel => panel.rendered);\n    const toggledPrev = renderedPanels.filter(panel => panel.toggled && panel.toggleDirection === DIRECTION.PREV);\n    const toggledNext = renderedPanels.filter(panel => panel.toggled && panel.toggleDirection === DIRECTION.NEXT);\n    const notToggled = renderedPanels.filter(panel => !panel.toggled);\n\n    return [...toggledPrev, ...notToggled, ...toggledNext].map(panel => panel.index);\n  }\n\n  public getRenderingElementsByOrder(flicking: Flicking) {\n    const panels = flicking.panels;\n\n    return this.getRenderingIndexesByOrder(flicking).map(index => panels[index].element);\n  }\n\n  public updateRenderingPanels(flicking: Flicking) {\n    if (flicking.renderOnlyVisible) {\n      this._showOnlyVisiblePanels(flicking);\n    } else {\n      flicking.panels.forEach(panel => panel.markForShow());\n    }\n  }\n\n  public collectPanels(\n    flicking: Flicking,\n    elements: any[]\n  ) {\n    const align = parsePanelAlign(flicking.renderer.align);\n\n    return elements.map((el, index) => new this._panelCtor({\n      index,\n      elementProvider: new this._providerCtor(el),\n      align,\n      flicking\n    }));\n  }\n\n  public createPanel(\n    element: any,\n    options: Omit<PanelOptions, \"elementProvider\">\n  ) {\n    return new this._panelCtor({\n      ...options,\n      elementProvider: new this._providerCtor(element)\n    });\n  }\n\n  public updatePanelSizes(flicking: Flicking, size: Partial<{\n    width: number | string;\n    height: number | string;\n  }>) {\n    flicking.panels.forEach(panel => panel.setSize(size));\n  }\n\n  private _showOnlyVisiblePanels(flicking: Flicking) {\n    const panels = flicking.renderer.panels;\n    const camera = flicking.camera;\n\n    const visibleIndexes = camera.visiblePanels.reduce((visibles, panel) => {\n      visibles[panel.index] = true;\n      return visibles;\n    }, {});\n\n    panels.forEach(panel => {\n      if (panel.index in visibleIndexes || panel.loading) {\n        panel.markForShow();\n      } else if (!flicking.holding) {\n        // During the input sequence,\n        // Do not remove panel elements as it won't trigger touchend event.\n        panel.markForHide();\n      }\n    });\n\n    camera.updateOffset();\n  }\n}\n\nexport default NormalRenderingStrategy;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Flicking from \"../../Flicking\";\nimport { PanelOptions } from \"../../core/panel/Panel\";\nimport VirtualPanel from \"../../core/panel/VirtualPanel\";\nimport VirtualElementProvider from \"../../core/panel/provider/VirtualElementProvider\";\nimport { parsePanelAlign, range, setSize } from \"../../utils\";\n\nimport RenderingStrategy from \"./RenderingStrategy\";\n\nclass VirtualRenderingStrategy implements RenderingStrategy {\n  public renderPanels(flicking: Flicking) {\n    const virtualManager = flicking.virtual;\n    const visiblePanels = flicking.visiblePanels as VirtualPanel[];\n    const invisibleIndexes = range(flicking.panelsPerView + 1);\n\n    visiblePanels.forEach(panel => {\n      const elementIndex = panel.elementIndex;\n\n      panel.render();\n\n      virtualManager.show(elementIndex);\n      invisibleIndexes[elementIndex] = -1;\n    });\n\n    invisibleIndexes\n      .filter(val => val >= 0)\n      .forEach(idx => {\n        virtualManager.hide(idx);\n      });\n  }\n\n  public getRenderingIndexesByOrder(flicking: Flicking) {\n    const virtualManager = flicking.virtual;\n    const visiblePanels = [...flicking.visiblePanels]\n      .filter(panel => panel.rendered)\n      .sort((panel1, panel2) => {\n        return (panel1.position + panel1.offset) - (panel2.position + panel2.offset);\n      }) as VirtualPanel[];\n\n    if (visiblePanels.length <= 0) return virtualManager.elements.map((_, idx) => idx);\n\n    const visibleIndexes = visiblePanels.map(panel => panel.elementIndex);\n    const invisibleIndexes = virtualManager.elements\n      .map((el, idx) => ({ ...el, idx }))\n      .filter(el => !el.visible)\n      .map(el => el.idx);\n\n    return [...visibleIndexes, ...invisibleIndexes];\n  }\n\n  public getRenderingElementsByOrder(flicking: Flicking) {\n    const virtualManager = flicking.virtual;\n    const elements = virtualManager.elements;\n\n    return this.getRenderingIndexesByOrder(flicking).map(index => elements[index].nativeElement);\n  }\n\n  public updateRenderingPanels(flicking: Flicking) {\n    const panels = flicking.renderer.panels;\n    const camera = flicking.camera;\n\n    const visibleIndexes = camera.visiblePanels.reduce((visibles, panel) => {\n      visibles[panel.index] = true;\n      return visibles;\n    }, {});\n\n    panels.forEach(panel => {\n      if (panel.index in visibleIndexes || panel.loading) {\n        panel.markForShow();\n      } else {\n        panel.markForHide();\n      }\n    });\n\n    camera.updateOffset();\n  }\n\n  public collectPanels(flicking: Flicking) {\n    const align = parsePanelAlign(flicking.renderer.align);\n\n    return range(flicking.virtual.initialPanelCount).map(index => new VirtualPanel({\n      index,\n      elementProvider: new VirtualElementProvider(flicking),\n      align,\n      flicking\n    }));\n  }\n\n  public createPanel(_el: any, options: PanelOptions) {\n    return new VirtualPanel({\n      ...options,\n      elementProvider: new VirtualElementProvider(options.flicking)\n    });\n  }\n\n  public updatePanelSizes(flicking: Flicking, size: Partial<{\n    width: number | string;\n    height: number | string;\n  }>) {\n    flicking.virtual.elements.forEach(el => {\n      setSize(el.nativeElement, size);\n    });\n    flicking.panels.forEach(panel => panel.setSize(size));\n  }\n}\n\nexport default VirtualRenderingStrategy;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Renderer, { RendererOptions } from \"./Renderer\";\nimport VanillaRenderer from \"./VanillaRenderer\";\nimport ExternalRenderer from \"./ExternalRenderer\";\n\nexport * from \"./strategy\";\n\nexport {\n  Renderer,\n  VanillaRenderer,\n  ExternalRenderer\n};\n\nexport type {\n  RendererOptions\n};\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Component, { ComponentEvent } from \"@egjs/component\";\n\nimport FlickingError from \"./core/FlickingError\";\nimport Viewport from \"./core/Viewport\";\nimport AutoResizer from \"./core/AutoResizer\";\nimport { Panel } from \"./core/panel\";\nimport { VanillaElementProvider } from \"./core/panel/provider\";\nimport VirtualManager, { VirtualOptions } from \"./core/VirtualManager\";\nimport { Control, SnapControl, SnapControlOptions, FreeControl, StrictControl, FreeControlOptions, StrictControlOptions } from \"./control\";\nimport { BoundCamera, Camera, CircularCamera, LinearCamera } from \"./camera\";\nimport { Renderer, VanillaRenderer, ExternalRenderer, RendererOptions, NormalRenderingStrategy, VirtualRenderingStrategy } from \"./renderer\";\nimport { EVENTS, ALIGN, MOVE_TYPE, DIRECTION } from \"./const/external\";\nimport * as ERROR from \"./const/error\";\nimport { findIndex, getElement, includes, parseElement } from \"./utils\";\nimport { HoldStartEvent, HoldEndEvent, MoveStartEvent, SelectEvent, MoveEvent, MoveEndEvent, WillChangeEvent, WillRestoreEvent, NeedPanelEvent, VisibleChangeEvent, ReachEdgeEvent, ReadyEvent, AfterResizeEvent, BeforeResizeEvent, ChangedEvent, RestoredEvent, PanelChangeEvent } from \"./type/event\";\nimport { LiteralUnion, ValueOf } from \"./type/internal\";\nimport { ElementLike, Plugin, Status, MoveTypeOptions } from \"./type/external\";\n\n/**\n * @interface\n */\nexport interface FlickingEvents {\n  [EVENTS.READY]: ReadyEvent;\n  [EVENTS.BEFORE_RESIZE]: BeforeResizeEvent;\n  [EVENTS.AFTER_RESIZE]: AfterResizeEvent;\n  [EVENTS.HOLD_START]: HoldStartEvent;\n  [EVENTS.HOLD_END]: HoldEndEvent;\n  [EVENTS.MOVE_START]: MoveStartEvent;\n  [EVENTS.MOVE]: MoveEvent;\n  [EVENTS.MOVE_END]: MoveEndEvent;\n  [EVENTS.WILL_CHANGE]: WillChangeEvent;\n  [EVENTS.CHANGED]: ChangedEvent;\n  [EVENTS.WILL_RESTORE]: WillRestoreEvent;\n  [EVENTS.RESTORED]: RestoredEvent;\n  [EVENTS.SELECT]: SelectEvent;\n  [EVENTS.NEED_PANEL]: NeedPanelEvent;\n  [EVENTS.VISIBLE_CHANGE]: VisibleChangeEvent;\n  [EVENTS.REACH_EDGE]: ReachEdgeEvent;\n  [EVENTS.PANEL_CHANGE]: PanelChangeEvent;\n}\n\n/**\n * @interface\n */\nexport interface FlickingOptions {\n  // UI / LAYOUT\n  align: LiteralUnion<ValueOf<typeof ALIGN>> | number | { panel: number | string; camera: number | string };\n  defaultIndex: number;\n  horizontal: boolean;\n  circular: boolean;\n  bound: boolean;\n  adaptive: boolean;\n  panelsPerView: number;\n  noPanelStyleOverride: boolean;\n  resizeOnContentsReady: boolean;\n  // EVENT\n  needPanelThreshold: number;\n  preventEventsBeforeInit: boolean;\n  // ANIMATION\n  deceleration: number;\n  duration: number;\n  easing: (x: number) => number;\n  // INPUT\n  inputType: string[];\n  moveType: ValueOf<typeof MOVE_TYPE> | MoveTypeOptions<ValueOf<typeof MOVE_TYPE>>;\n  threshold: number;\n  interruptable: boolean;\n  bounce: number | string | [number | string, number | string];\n  iOSEdgeSwipeThreshold: number;\n  preventClickOnDrag: boolean;\n  disableOnInit: boolean;\n  // PERFORMANCE\n  renderOnlyVisible: boolean;\n  virtual: VirtualOptions | null;\n  // OTHERS\n  autoInit: boolean;\n  autoResize: boolean;\n  useResizeObserver: boolean;\n  renderExternal: {\n    renderer: new (options: RendererOptions) => ExternalRenderer;\n    rendererOptions: RendererOptions;\n  } | null;\n}\n\n/**\n * @extends Component\n * @support {\"ie\": \"9+(with polyfill)\", \"ch\" : \"latest\", \"ff\" : \"latest\",  \"sf\" : \"latest\", \"edge\" : \"latest\", \"ios\" : \"7+\", \"an\" : \"4.X+\"}\n * @requires {@link https://github.com/naver/egjs-component|@egjs/component}\n * @requires {@link https://github.com/naver/egjs-axes|@egjs/axes}\n */\nclass Flicking extends Component<FlickingEvents> {\n  /**\n   * Version info string\n   * @ko 버전정보 문자열\n   * @type {string}\n   * @readonly\n   * @example\n   * ```ts\n   * Flicking.VERSION;  // ex) 4.0.0\n   * ```\n   */\n  public static VERSION = \"#__VERSION__#\";\n\n  // Core components\n  private _viewport: Viewport;\n  private _autoResizer: AutoResizer;\n  private _camera: Camera;\n  private _control: Control;\n  private _renderer: Renderer;\n  private _virtualManager: VirtualManager;\n\n  // Options\n  private _align: FlickingOptions[\"align\"];\n  private _defaultIndex: FlickingOptions[\"defaultIndex\"];\n  private _horizontal: FlickingOptions[\"horizontal\"];\n  private _circular: FlickingOptions[\"circular\"];\n  private _bound: FlickingOptions[\"bound\"];\n  private _adaptive: FlickingOptions[\"adaptive\"];\n  private _panelsPerView: FlickingOptions[\"panelsPerView\"];\n  private _noPanelStyleOverride: FlickingOptions[\"noPanelStyleOverride\"];\n  private _resizeOnContentsReady: FlickingOptions[\"resizeOnContentsReady\"];\n  private _virtual: FlickingOptions[\"virtual\"];\n\n  private _needPanelThreshold: FlickingOptions[\"needPanelThreshold\"];\n  private _preventEventsBeforeInit: FlickingOptions[\"preventEventsBeforeInit\"];\n\n  private _deceleration: FlickingOptions[\"deceleration\"];\n  private _duration: FlickingOptions[\"duration\"];\n  private _easing: FlickingOptions[\"easing\"];\n\n  private _inputType: FlickingOptions[\"inputType\"];\n  private _moveType: FlickingOptions[\"moveType\"];\n  private _threshold: FlickingOptions[\"threshold\"];\n  private _interruptable: FlickingOptions[\"interruptable\"];\n  private _bounce: FlickingOptions[\"bounce\"];\n  private _iOSEdgeSwipeThreshold: FlickingOptions[\"iOSEdgeSwipeThreshold\"];\n  private _preventClickOnDrag: FlickingOptions[\"preventClickOnDrag\"];\n  private _disableOnInit: FlickingOptions[\"disableOnInit\"];\n\n  private _renderOnlyVisible: FlickingOptions[\"renderOnlyVisible\"];\n\n  private _autoInit: FlickingOptions[\"autoInit\"];\n  private _autoResize: FlickingOptions[\"autoResize\"];\n  private _useResizeObserver: FlickingOptions[\"useResizeObserver\"];\n  private _renderExternal: FlickingOptions[\"renderExternal\"];\n\n  // Internal State\n  private _initialized: boolean;\n  private _plugins: Plugin[];\n\n  // Components\n  /**\n   * {@link Control} instance of the Flicking\n   * @ko 현재 Flicking에 활성화된 {@link Control} 인스턴스\n   * @type {Control}\n   * @default SnapControl\n   * @readonly\n   * @see Control\n   * @see SnapControl\n   * @see FreeControl\n   */\n  public get control() { return this._control; }\n  /**\n   * {@link Camera} instance of the Flicking\n   * @ko 현재 Flicking에 활성화된 {@link Camera} 인스턴스\n   * @type {Camera}\n   * @default LinearCamera\n   * @readonly\n   * @see Camera\n   * @see LinearCamera\n   * @see BoundCamera\n   * @see CircularCamera\n   */\n  public get camera() { return this._camera; }\n  /**\n   * {@link Renderer} instance of the Flicking\n   * @ko 현재 Flicking에 활성화된 {@link Renderer} 인스턴스\n   * @type {Renderer}\n   * @default VanillaRenderer\n   * @readonly\n   * @see Renderer\n   * @see VanillaRenderer\n   * @see ExternalRenderer\n   */\n  public get renderer() { return this._renderer; }\n  /**\n   * A component that manages viewport size\n   * @ko 뷰포트 크기 정보를 담당하는 컴포넌트\n   * @type {Viewport}\n   * @readonly\n   * @see Viewport\n   */\n  public get viewport() { return this._viewport; }\n  // Internal States\n  /**\n   * Whether Flicking's {@link Flicking#init init()} is called.\n   * This is `true` when {@link Flicking#init init()} is called, and is `false` after calling {@link Flicking#destroy destroy()}.\n   * @ko Flicking의 {@link Flicking#init init()}이 호출되었는지를 나타내는 멤버 변수.\n   * 이 값은 {@link Flicking#init init()}이 호출되었으면 `true`로 변하고, {@link Flicking#destroy destroy()}호출 이후에 다시 `false`로 변경됩니다.\n   * @type {boolean}\n   * @default false\n   * @readonly\n   */\n  public get initialized() { return this._initialized; }\n  /**\n   * Whether the `circular` option is enabled.\n   * The {@link Flicking#circular circular} option can't be enabled when sum of the panel sizes are too small.\n   * @ko {@link Flicking#circular circular} 옵션이 활성화되었는지 여부를 나타내는 멤버 변수.\n   * {@link Flicking#circular circular} 옵션은 패널의 크기의 합이 충분하지 않을 경우 비활성화됩니다.\n   * @type {boolean}\n   * @default false\n   * @readonly\n   */\n  public get circularEnabled() { return this._camera.controlParams.circular; }\n  /**\n   * Whether the `virtual` option is enabled.\n   * The {@link Flicking#virtual virtual} option can't be enabled when  {@link Flicking#panelsPerView panelsPerView} is less or equal than zero.\n   * @ko {@link Flicking#virtual virtual} 옵션이 활성화되었는지 여부를 나타내는 멤버 변수.\n   * {@link Flicking#virtual virtual} 옵션은 {@link Flicking#panelsPerView panelsPerView} 옵션의 값이 0보다 같거나 작으면 비활성화됩니다.\n   * @type {boolean}\n   * @default false\n   * @readonly\n   */\n  public get virtualEnabled() { return this._panelsPerView > 0 && this._virtual != null; }\n  /**\n   * Index number of the {@link Flicking#currentPanel currentPanel}\n   * @ko {@link Flicking#currentPanel currentPanel}의 인덱스 번호\n   * @type {number}\n   * @default 0\n   * @readonly\n   */\n  public get index() { return this._control.activeIndex; }\n  /**\n   * The root(`.flicking-viewport`) element\n   * @ko root(`.flicking-viewport`) 엘리먼트\n   * @type {HTMLElement}\n   * @readonly\n   */\n  public get element() { return this._viewport.element; }\n  /**\n   * Currently active panel\n   * @ko 현재 선택된 패널\n   * @type {Panel}\n   * @readonly\n   * @see Panel\n   */\n  public get currentPanel() { return this._control.activePanel; }\n  /**\n   * Array of panels\n   * @ko 전체 패널들의 배열\n   * @type {Panel[]}\n   * @readonly\n   * @see Panel\n   */\n  public get panels() { return this._renderer.panels; }\n  /**\n   * Count of panels\n   * @ko 전체 패널의 개수\n   * @type {number}\n   * @readonly\n   */\n  public get panelCount() { return this._renderer.panelCount; }\n  /**\n   * Array of panels that is visible at the current position\n   * @ko 현재 보이는 패널의 배열\n   * @type {Panel[]}\n   * @readonly\n   * @see Panel\n   */\n  public get visiblePanels() { return this._camera.visiblePanels; }\n  /**\n   * Whether Flicking's animating\n   * @ko 현재 애니메이션 동작 여부\n   * @type {boolean}\n   * @readonly\n   */\n  public get animating() { return this._control.animating; }\n  /**\n   * Whether user is clicking or touching\n   * @ko 현재 사용자가 클릭/터치중인지 여부\n   * @type {boolean}\n   * @readonly\n   */\n  public get holding() { return this._control.holding; }\n  /**\n   * A current list of activated plugins\n   * @ko 현재 활성화된 플러그인 목록\n   * @type {Plugin[]}\n   * @readonly\n   */\n  public get activePlugins() { return this._plugins; }\n\n  // Options Getter\n  // UI / LAYOUT\n  /**\n   * Align position of the panels within viewport. You can set different values each for the panel and camera\n   * @ko 뷰포트 내에서 패널 정렬방식을 설정하는 옵션. 카메라와 패널 개별로 옵션을 설정할 수도 있습니다\n   * @type {ALIGN | string | number | { panel: string | number, camera: string | number }}\n   * @property {ALIGN | string | number} panel The align value for each {@link Panel}s<ko>개개의 {@link Panel}에 적용할 값</ko>\n   * @property {ALIGN | string | number} camera The align value for {@link Camera}<ko>{@link Camera}에 적용할 값</ko>\n   * @default \"center\"\n   * @example\n   * ```ts\n   * const possibleOptions = [\n   *   // Literal strings\n   *   \"prev\", \"center\", \"next\",\n   *   // % values, applied to both panel & camera\n   *   \"0%\", \"25%\", \"42%\",\n   *   // px values, arithmetic calculation with (+/-) is also allowed.\n   *   \"0px\", \"100px\", \"50% - 25px\",\n   *   // numbers, same to number + px (\"0px\", \"100px\")\n   *   0, 100, 1000,\n   *   // Setting a different value for panel & camera\n   *   { panel: \"10%\", camera: \"25%\" }\n   * ];\n   *\n   * possibleOptions.forEach(align => {\n   *   new Flicking(\"#el\", { align });\n   * });\n   * ```\n   */\n  public get align() { return this._align; }\n  /**\n   * Index of the panel to move when Flicking's {@link Flicking#init init()} is called. A zero-based integer\n   * @ko Flicking의 {@link Flicking#init init()}이 호출될 때 이동할 디폴트 패널의 인덱스로, 0부터 시작하는 정수입니다\n   * @type {number}\n   * @default 0\n   */\n  public get defaultIndex() { return this._defaultIndex; }\n  /**\n   * Direction of panel movement (true: horizontal, false: vertical)\n   * @ko 패널 이동 방향 (true: 가로방향, false: 세로방향)\n   * @type {boolean}\n   * @default true\n   */\n  public get horizontal() { return this._horizontal; }\n  /**\n   * Enables circular(continuous loop) mode, which connects first/last panel for continuous scrolling.\n   * @ko 순환 모드를 활성화합니다. 순환 모드에서는 양 끝의 패널이 서로 연결되어 끊김없는 스크롤이 가능합니다.\n   * @type {boolean}\n   * @default false\n   */\n  public get circular() { return this._circular; }\n  /**\n   * Prevent the view(camera element) from going out of the first/last panel, so it won't show empty spaces before/after the first/last panel\n   * Only can be enabled when `circular=false`\n   * @ko 뷰(카메라 엘리먼트)가 첫번째와 마지막 패널 밖으로 넘어가지 못하게 하여, 첫번째/마지막 패널 전/후의 빈 공간을 보이지 않도록 하는 옵션입니다\n   * `circular=false`인 경우에만 사용할 수 있습니다\n   * @type {boolean}\n   * @default false\n   */\n  public get bound() { return this._bound; }\n  /**\n   * Update height of the viewport element after movement same to the height of the panel below. This can be only enabled when `horizontal=true`\n   * @ko 이동한 후 뷰포트 엘리먼트의 크기를 현재 패널의 높이와 동일하게 설정합니다. `horizontal=true`인 경우에만 사용할 수 있습니다.\n   * @type {boolean}\n   * @default false\n   */\n  public get adaptive() { return this._adaptive; }\n  /**\n   * A visible number of panels on viewport. Enabling this option will automatically resize panel size\n   * @ko 한 화면에 보이는 패널의 개수. 이 옵션을 활성화할 경우 패널의 크기를 강제로 재조정합니다\n   * @type {number}\n   * @default -1\n   */\n  public get panelsPerView() { return this._panelsPerView; }\n  /**\n   * Enabling this option will not change `width/height` style of the panels if {@link Flicking#panelsPerView} is enabled.\n   * This behavior can be useful in terms of performance when you're manually managing all panel sizes\n   * @ko 이 옵션을 활성화할 경우, {@link Flicking#panelsPerView} 옵션이 활성화되었을 때 패널의 `width/height` 스타일을 변경하지 않도록 설정합니다.\n   * 모든 패널들의 크기를 직접 관리하고 있을 경우, 이 옵션을 활성화하면 성능면에서 유리할 수 있습니다\n   * @type {boolean}\n   * @default false\n   */\n  public get noPanelStyleOverride() { return this._noPanelStyleOverride; }\n  /**\n   * Enabling this option will automatically call {@link Flicking#resize} when all image/video inside panels are loaded.\n   * This can be useful when you have contents inside Flicking that changes its size when it's loaded\n   * @ko 이 옵션을 활성화할 경우, Flicking 패널 내부의 이미지/비디오들이 로드되었을 때 자동으로 {@link Flicking#resize}를 호출합니다.\n   * 이 동작은 Flicking 내부에 로드 전/후로 크기가 변하는 콘텐츠를 포함하고 있을 때 유용하게 사용하실 수 있습니다.\n   * @type {boolean}\n   * @default false\n   */\n  public get resizeOnContentsReady() { return this._resizeOnContentsReady; }\n  // EVENTS\n  /**\n   * A Threshold from viewport edge before triggering `needPanel` event\n   * @ko `needPanel`이벤트가 발생하기 위한 뷰포트 끝으로부터의 최대 거리\n   * @type {number}\n   * @default 0\n   */\n  public get needPanelThreshold() { return this._needPanelThreshold; }\n  /**\n   * When enabled, events are not triggered before `ready` when initializing\n   * @ko 활성화할 경우 초기화시 `ready` 이벤트 이전의 이벤트가 발생하지 않습니다.\n   * @type {boolean}\n   * @default true\n   */\n  public get preventEventsBeforeInit() { return this._preventEventsBeforeInit; }\n  // ANIMATION\n  /**\n   * Deceleration value for panel movement animation which is triggered by user input. A higher value means a shorter animation time\n   * @ko 사용자의 동작으로 가속도가 적용된 패널 이동 애니메이션의 감속도. 값이 높을수록 애니메이션 실행 시간이 짧아집니다\n   * @type {number}\n   * @default 0.0075\n   */\n  public get deceleration() { return this._deceleration; }\n  /**\n   * An easing function applied to the panel movement animation. Default value is `easeOutCubic`\n   * @ko 패널 이동 애니메이션에 적용할 easing 함수. 기본값은 `easeOutCubic`이다\n   * @type {function}\n   * @default x => 1 - Math.pow(1 - x, 3)\n   * @see Easing Functions Cheat Sheet {@link http://easings.net/} <ko>이징 함수 Cheat Sheet {@link http://easings.net/}</ko>\n   */\n  public get easing() { return this._easing; }\n  /**\n   * Default duration of the animation (ms)\n   * @ko 디폴트 애니메이션 재생 시간 (ms)\n   * @type {number}\n   * @default 500\n   */\n  public get duration() { return this._duration; }\n  // INPUT\n  /**\n   * Types of input devices to enable\n   * @ko 활성화할 입력 장치 종류\n   * @type {string[]}\n   * @default [\"touch\", \"mouse\"]\n   * @see {@link https://naver.github.io/egjs-axes/release/latest/doc/global.html#PanInputOption Possible values (PanInputOption#inputType)}\n   * <ko>{@link https://naver.github.io/egjs-axes/release/latest/doc/global.html#PanInputOption 가능한 값들 (PanInputOption#inputType)}</ko>\n   */\n  public get inputType() { return this._inputType; }\n  /**\n   * Movement style by user input. This will change instance type of {@link Flicking#control}\n   * You can use the values of the constant {@link MOVE_TYPE}\n   * @ko 사용자 입력에 의한 이동 방식. 이 값에 따라 {@link Flicking#control}의 인스턴스 타입이 결정됩니다\n   * 상수 {@link MOVE_TYPE}에 정의된 값들을 이용할 수 있습니다\n   * @type {MOVE_TYPE | Pair<string, object>}\n   * @default \"snap\"\n   * @example\n   * |moveType|control|options|\n   * |:---:|:---:|:---:|\n   * |\"snap\"|{@link SnapControl}||\n   * |\"freeScroll\"|{@link FreeControl}|{@link FreeControlOptions}|\n   *\n   * ```ts\n   * import Flicking, { MOVE_TYPE } from \"@egjs/flicking\";\n   *\n   * const flicking = new Flicking({\n   *   moveType: MOVE_TYPE.SNAP\n   * });\n   * ```\n   *\n   * ```ts\n   * const flicking = new Flicking({\n   *   // If you want more specific settings for the moveType\n   *   // [moveType, options for that moveType]\n   *   // In this case, it's [\"freeScroll\", FreeControlOptions]\n   *   moveType: [MOVE_TYPE.FREE_SCROLL, { stopAtEdge: true }]\n   * });\n   * ```\n   */\n  public get moveType() { return this._moveType; }\n  /**\n   * Movement threshold to change panel (unit: px). It should be dragged above the threshold to change the current panel.\n   * @ko 패널 변경을 위한 이동 임계값 (단위: px). 주어진 값 이상으로 스크롤해야만 패널 변경이 가능하다.\n   * @type {number}\n   * @default 40\n   */\n  public get threshold() { return this._threshold; }\n  /**\n   * Set animation to be interruptable by click/touch.\n   * @ko 사용자의 클릭/터치로 인해 애니메이션을 도중에 멈출 수 있도록 설정합니다.\n   * @type {boolean}\n   * @default true\n   */\n  public get interruptable() { return this._interruptable; }\n  /**\n   * The size value of the bounce area. Only can be enabled when `circular=false`.\n   * You can set different bounce value for prev/next direction by using array.\n   * `number` for px value, and `string` for px, and % value relative to viewport size.\n   * You have to call {@link Control#updateInput} after changing this to take effect.\n   * @ko Flicking이 최대 영역을 넘어서 갈 수 있는 최대 크기. `circular=false`인 경우에만 사용할 수 있습니다.\n   * 배열을 통해 prev/next 방향에 대해 서로 다른 바운스 값을 지정할 수 있습니다.\n   * `number`를 통해 px값을, `stirng`을 통해 px 혹은 뷰포트 크기 대비 %값을 사용할 수 있습니다.\n   * 이 값을 변경시 {@link Control#updateInput}를 호출해야 합니다.\n   * @type {string | number | Array<string | number>}\n   * @default \"20%\"\n   * @example\n   * ```ts\n   * const possibleOptions = [\n   *   // % values, relative to viewport element(\".flicking-viewport\")'s size\n   *   \"0%\", \"25%\", \"42%\",\n   *   // px values, arithmetic calculation with (+/-) is also allowed.\n   *   \"0px\", \"100px\", \"50% - 25px\",\n   *   // numbers, same to number + px (\"0px\", \"100px\")\n   *   0, 100, 1000\n   * ];\n   * ```\n   *\n   * @example\n   * ```ts\n   * const flicking = new Flicking(\"#el\", { bounce: \"20%\" });\n   *\n   * flicking.bounce = \"100%\";\n   * flicking.control.updateInput(); // Call this to update!\n   * ```\n   */\n  public get bounce() { return this._bounce; }\n  /**\n   * Size of the area from the right edge in iOS safari (in px) which enables swipe-back or swipe-forward\n   * @ko iOS Safari에서 swipe를 통한 뒤로가기/앞으로가기를 활성화하는 오른쪽 끝으로부터의 영역의 크기 (px)\n   * @type {number}\n   * @default 30\n   */\n  public get iOSEdgeSwipeThreshold() { return this._iOSEdgeSwipeThreshold; }\n  /**\n   * Automatically prevent `click` event if the user has dragged at least a single pixel on the viewport element\n   * @ko 사용자가 뷰포트 영역을 1픽셀이라도 드래그했을 경우 자동으로 {@link https://developer.mozilla.org/ko/docs/Web/API/Element/click_event click} 이벤트를 취소합니다\n   * @type {boolean}\n   * @default true\n   */\n  public get preventClickOnDrag() { return this._preventClickOnDrag; }\n  /**\n   * Automatically call {@link Flicking#disableInput disableInput()} on initialization\n   * @ko Flicking init시에 {@link Flicking#disableInput disableInput()}을 바로 호출합니다\n   * @type {boolean}\n   * @default false\n   */\n  public get disableOnInit() { return this._disableOnInit; }\n  // PERFORMANCE\n  /**\n   * Whether to render visible panels only. This can dramatically increase performance when there're many panels\n   * @ko 보이는 패널만 렌더링할지 여부를 설정합니다. 패널이 많을 경우에 퍼포먼스를 크게 향상시킬 수 있습니다\n   * @type {boolean}\n   * @default false\n   */\n  public get renderOnlyVisible() { return this._renderOnlyVisible; }\n  /**\n   * By enabling this option, it will reduce memory consumption by restricting the number of DOM elements to `panelsPerView + 1`\n   * Must be used with `panelsPerview`.\n   * After Flicking's initialized, this property can be used to add/remove the panel count.\n   * @ko 이 옵션을 활성화할 경우 패널 엘리먼트의 개수를 `panelsPerView + 1` 개로 고정함으로써, 메모리 사용량을 줄일 수 있습니다.\n   * `panelsPerView` 옵션과 함께 사용되어야만 합니다.\n   * Flicking 초기화 이후에, 이 프로퍼티는 렌더링하는 패널의 개수를 추가/제거하기 위해 사용될 수 있습니다.\n   * @type {VirtualManager}\n   * @property {function} renderPanel A rendering function for the panel element's innerHTML<ko>패널 엘리먼트의 innerHTML을 렌더링하는 함수</ko>\n   * @property {number} initialPanelCount Initial panel count to render<ko>최초로 렌더링할 패널의 개수</ko>\n   * @property {boolean} [cache=false] Whether to cache rendered panel's innerHTML<ko>렌더링된 패널의 innerHTML 정보를 캐시할지 여부</ko>\n   * @property {string} [panelClass=\"flicking-panel\"] The class name that will be applied to rendered panel elements<ko>렌더링되는 패널 엘리먼트에 적용될 클래스 이름</ko>\n   * @example\n   * ```ts\n   * import Flicking, { VirtualPanel } from \"@egjs/flicking\";\n   *\n   * const flicking = new Flicking(\"#some_el\", {\n   *   panelsPerView: 3,\n   *   virtual: {\n   *     renderPanel: (panel: VirtualPanel, index: number) => `Panel ${index}`,\n   *     initialPanelCount: 100\n   *   }\n   * });\n   *\n   * // Add 100 virtual panels (at the end)\n   * flicking.virtual.append(100);\n   *\n   * // Remove 100 virtual panels from 0 to 100\n   * flicking.virtual.remove(0, 100);\n   * ```\n   */\n  public get virtual() { return this._virtualManager; }\n\n  // OTHERS\n  /**\n   * Call {@link Flicking#init init()} automatically when creating Flicking's instance\n   * @ko Flicking 인스턴스를 생성할 때 자동으로 {@link Flicking#init init()}를 호출합니다\n   * @type {boolean}\n   * @default true\n   * @readonly\n   */\n  public get autoInit() { return this._autoInit; }\n  /**\n   * Whether to automatically call {@link Flicking#resize resize()} when the viewport element(.flicking-viewport)'s size is changed\n   * @ko 뷰포트 엘리먼트(.flicking-viewport)의 크기 변경시 {@link Flicking#resize resize()} 메소드를 자동으로 호출할지 여부를 설정합니다\n   * @type {boolean}\n   * @default true\n   */\n  public get autoResize() { return this._autoResize; }\n  /**\n   * Whether to listen {@link https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver ResizeObserver}'s event instead of Window's {@link https://developer.mozilla.org/ko/docs/Web/API/Window/resize_event resize} event when using the `autoResize` option\n   * @ko autoResize 옵션 사용시 {@link https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver ResizeObserver}의 이벤트를 Window객체의 {@link https://developer.mozilla.org/ko/docs/Web/API/Window/resize_event resize} 이벤트 대신 수신할지 여부를 설정합니다\n   * @type {boolean}\n   * @default true\n   */\n  public get useResizeObserver() { return this._useResizeObserver; }\n  /**\n   * This is an option for the frameworks(React, Vue, Angular, ...). Don't set it as it's automatically managed by Flicking.\n   * @ko 프레임워크(React, Vue, Angular, ...)에서만 사용하는 옵션으로, 자동으로 설정되므로 따로 사용하실 필요 없습니다!\n   * @type {boolean}\n   * @default false\n   * @internal\n   * @readonly\n   */\n  public get renderExternal() { return this._renderExternal; }\n\n  // Options Setter\n  // UI / LAYOUT\n  public set align(val: FlickingOptions[\"align\"]) {\n    this._align = val;\n    this._renderer.align = val;\n    this._camera.align = val;\n  }\n\n  public set defaultIndex(val: FlickingOptions[\"defaultIndex\"]) { this._defaultIndex = val; }\n  public set horizontal(val: FlickingOptions[\"horizontal\"]) { this._horizontal = val; }\n  public set circular(val: FlickingOptions[\"circular\"]) { this._circular = val; }\n  public set bound(val: FlickingOptions[\"bound\"]) { this._bound = val; }\n  public set adaptive(val: FlickingOptions[\"adaptive\"]) { this._adaptive = val; }\n  public set panelsPerView(val: FlickingOptions[\"panelsPerView\"]) { this._panelsPerView = val; }\n  public set noPanelStyleOverride(val: FlickingOptions[\"noPanelStyleOverride\"]) { this._noPanelStyleOverride = val; }\n  public set resizeOnContentsReady(val: FlickingOptions[\"resizeOnContentsReady\"]) { this._resizeOnContentsReady = val; }\n  // EVENTS\n  public set needPanelThreshold(val: FlickingOptions[\"needPanelThreshold\"]) { this._needPanelThreshold = val; }\n  public set preventEventsBeforeInit(val: FlickingOptions[\"preventEventsBeforeInit\"]) { this._preventEventsBeforeInit = val; }\n  // ANIMATION\n  public set deceleration(val: FlickingOptions[\"deceleration\"]) { this._deceleration = val; }\n  public set easing(val: FlickingOptions[\"easing\"]) { this._easing = val; }\n  public set duration(val: FlickingOptions[\"duration\"]) { this._duration = val; }\n  // INPUT\n  public set inputType(val: FlickingOptions[\"inputType\"]) { this._inputType = val; }\n  public set moveType(val: FlickingOptions[\"moveType\"]) { this._moveType = val; }\n  public set threshold(val: FlickingOptions[\"threshold\"]) { this._threshold = val; }\n  public set interruptable(val: FlickingOptions[\"interruptable\"]) { this._interruptable = val; }\n  public set bounce(val: FlickingOptions[\"bounce\"]) { this._bounce = val; }\n  public set iOSEdgeSwipeThreshold(val: FlickingOptions[\"iOSEdgeSwipeThreshold\"]) { this._iOSEdgeSwipeThreshold = val; }\n  public set preventClickOnDrag(val: FlickingOptions[\"preventClickOnDrag\"]) {\n    const prevVal = this._preventClickOnDrag;\n\n    if (val === prevVal) return;\n\n    const controller = this._control.controller;\n\n    if (val) {\n      controller.addPreventClickHandler();\n    } else {\n      controller.removePreventClickHandler();\n    }\n\n    this._preventClickOnDrag = val;\n  }\n\n  public set disableOnInit(val: FlickingOptions[\"disableOnInit\"]) { this._disableOnInit = val; }\n  // PERFORMANCE\n  public set renderOnlyVisible(val: FlickingOptions[\"renderOnlyVisible\"]) { this._renderOnlyVisible = val; }\n  // OTHERS\n  public set autoResize(val: FlickingOptions[\"autoResize\"]) {\n    this._autoResize = val;\n\n    if (val) {\n      this._autoResizer.enable();\n    } else {\n      this._autoResizer.disable();\n    }\n  }\n\n  public set useResizeObserver(val: FlickingOptions[\"useResizeObserver\"]) {\n    this._useResizeObserver = val;\n\n    if (this._autoResize) {\n      this._autoResizer.enable();\n    }\n  }\n\n  /**\n   * @param root A root HTMLElement to initialize Flicking on it. When it's a typeof `string`, it should be a css selector string\n   * <ko>Flicking을 초기화할 HTMLElement로, `string` 타입으로 지정시 css 선택자 문자열을 지정해야 합니다.</ko>\n   * @param {object} [options={}] An options object for Flicking.<ko>Flicking에 적용할 옵션 오브젝트</ko>\n   * @throws {FlickingError}\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE WRONG_TYPE}|When the root is not either string or HTMLElement|\n   * |{@link ERROR_CODE ELEMENT_NOT_FOUND}|When the element with given CSS selector does not exist|\n   * <ko>\n   *\n   * |code|조건|\n   * |---|---|\n   * |{@link ERROR_CODE WRONG_TYPE}|루트 엘리먼트가 string이나 HTMLElement가 아닐 경우|\n   * |{@link ERROR_CODE ELEMENT_NOT_FOUND}|주어진 CSS selector로 엘리먼트를 찾지 못했을 경우|\n   *\n   * </ko>\n   * @example\n   * ```ts\n   * import Flicking from \"@egjs/flicking\";\n   *\n   * // Creating new instance of Flicking with HTMLElement\n   * const flicking = new Flicking(document.querySelector(\".flicking-viewport\"), { circular: true });\n   *\n   * // Creating new instance of Flicking with CSS selector\n   * const flicking2 = new Flicking(\".flicking-viewport\", { circular: true });\n   * ```\n   */\n  public constructor(root: HTMLElement | string, {\n    align = ALIGN.CENTER,\n    defaultIndex = 0,\n    horizontal = true,\n    circular = false,\n    bound = false,\n    adaptive = false,\n    panelsPerView = -1,\n    noPanelStyleOverride = false,\n    resizeOnContentsReady = false,\n    needPanelThreshold = 0,\n    preventEventsBeforeInit = true,\n    deceleration = 0.0075,\n    duration = 500,\n    easing = x => 1 - Math.pow(1 - x, 3),\n    inputType = [\"mouse\", \"touch\"],\n    moveType = \"snap\",\n    threshold = 40,\n    interruptable = true,\n    bounce = \"20%\",\n    iOSEdgeSwipeThreshold = 30,\n    preventClickOnDrag = true,\n    disableOnInit = false,\n    renderOnlyVisible = false,\n    virtual = null,\n    autoInit = true,\n    autoResize = true,\n    useResizeObserver = true,\n    renderExternal = null\n  }: Partial<FlickingOptions> = {}) {\n    super();\n\n    // Internal states\n    this._initialized = false;\n    this._plugins = [];\n\n    // Bind options\n    this._align = align;\n    this._defaultIndex = defaultIndex;\n    this._horizontal = horizontal;\n    this._circular = circular;\n    this._bound = bound;\n    this._adaptive = adaptive;\n    this._panelsPerView = panelsPerView;\n    this._noPanelStyleOverride = noPanelStyleOverride;\n    this._resizeOnContentsReady = resizeOnContentsReady;\n    this._virtual = virtual;\n    this._needPanelThreshold = needPanelThreshold;\n    this._preventEventsBeforeInit = preventEventsBeforeInit;\n    this._deceleration = deceleration;\n    this._duration = duration;\n    this._easing = easing;\n    this._inputType = inputType;\n    this._moveType = moveType;\n    this._threshold = threshold;\n    this._interruptable = interruptable;\n    this._bounce = bounce;\n    this._iOSEdgeSwipeThreshold = iOSEdgeSwipeThreshold;\n    this._preventClickOnDrag = preventClickOnDrag;\n    this._disableOnInit = disableOnInit;\n    this._renderOnlyVisible = renderOnlyVisible;\n    this._autoInit = autoInit;\n    this._autoResize = autoResize;\n    this._useResizeObserver = useResizeObserver;\n    this._renderExternal = renderExternal;\n\n    // Create core components\n    this._viewport = new Viewport(getElement(root));\n    this._autoResizer = new AutoResizer(this);\n    this._renderer = this._createRenderer();\n    this._camera = this._createCamera();\n    this._control = this._createControl();\n    this._virtualManager = new VirtualManager(this, virtual);\n\n    if (this._autoInit) {\n      void this.init();\n    }\n  }\n\n  /**\n   * Initialize Flicking and move to the default index\n   * This is automatically called on Flicking's constructor when `autoInit` is true(default)\n   * @ko Flicking을 초기화하고, 디폴트 인덱스로 이동합니다\n   * 이 메소드는 `autoInit` 옵션이 true(default)일 경우 Flicking이 생성될 때 자동으로 호출됩니다\n   * @fires Flicking#ready\n   * @return {this}\n   */\n  public async init(): Promise<void> {\n    if (this._initialized) return;\n\n    const camera = this._camera;\n    const renderer = this._renderer;\n    const control = this._control;\n    const virtualManager = this._virtualManager;\n    const originalTrigger = this.trigger;\n    const preventEventsBeforeInit = this._preventEventsBeforeInit;\n\n    camera.init(this);\n    virtualManager.init();\n    renderer.init(this);\n    control.init(this);\n\n    if (preventEventsBeforeInit) {\n      this.trigger = () => this;\n    }\n\n    await this.resize();\n\n    // Look at initial panel\n    await this._moveToInitialPanel();\n\n    if (this._autoResize) {\n      this._autoResizer.enable();\n    }\n    if (this._preventClickOnDrag) {\n      control.controller.addPreventClickHandler();\n    }\n    if (this._disableOnInit) {\n      this.disableInput();\n    }\n    renderer.checkPanelContentsReady(renderer.panels);\n\n    this._plugins.forEach(plugin => plugin.init(this));\n\n    // Done initializing & emit ready event\n    this._initialized = true;\n    if (preventEventsBeforeInit) {\n      this.trigger = originalTrigger;\n    }\n    this.trigger(new ComponentEvent(EVENTS.READY));\n\n    return;\n  }\n\n  /**\n   * Destroy Flicking and remove all event handlers\n   * @ko Flicking과 하위 컴포넌트들을 초기 상태로 되돌리고, 부착된 모든 이벤트 핸들러를 제거합니다\n   * @return {void}\n   */\n  public destroy(): void {\n    this.off();\n\n    this._autoResizer.disable();\n    this._control.destroy();\n    this._camera.destroy();\n    this._renderer.destroy();\n\n    this._plugins.forEach(plugin => plugin.destroy());\n\n    this._initialized = false;\n  }\n\n  /**\n   * Move to the previous panel (current index - 1)\n   * @ko 이전 패널로 이동합니다 (현재 인덱스 - 1)\n   * @param {number} [duration={@link Flicking#duration options.duration}] Duration of the panel movement animation (unit: ms)<ko>패널 이동 애니메이션 진행 시간 (단위: ms)</ko>\n   * @async\n   * @fires Flicking#moveStart\n   * @fires Flicking#move\n   * @fires Flicking#moveEnd\n   * @fires Flicking#willChange\n   * @fires Flicking#changed\n   * @fires Flicking#willRestore\n   * @fires Flicking#restored\n   * @fires Flicking#needPanel\n   * @fires Flicking#visibleChange\n   * @fires Flicking#reachEdge\n   * @throws {FlickingError}\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE INDEX_OUT_OF_RANGE}|When the previous panel does not exist|\n   * |{@link ERROR_CODE ANIMATION_ALREADY_PLAYING}|When the animation is already playing|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|When the animation is interrupted by user input|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|When the any of the event's `stop()` is called|\n   * <ko>\n   *\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE INDEX_OUT_OF_RANGE}|이전 패널이 존재하지 않을 경우|\n   * |{@link ERROR_CODE ANIMATION_ALREADY_PLAYING}|애니메이션이 이미 진행중인 경우|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|사용자 입력에 의해 애니메이션이 중단된 경우|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|발생된 이벤트들 중 하나라도 `stop()`이 호출된 경우|\n   * </ko>\n   * @return {Promise<void>} A Promise which will be resolved after reaching the previous panel<ko>이전 패널 도달시에 resolve되는 Promise</ko>\n   */\n  public prev(duration: number = this._duration): Promise<void> {\n    return this.moveTo(this._control.activePanel?.prev()?.index ?? -1, duration, DIRECTION.PREV);\n  }\n\n  /**\n   * Move to the next panel (current index + 1)\n   * @ko 다음 패널로 이동합니다 (현재 인덱스 + 1)\n   * @param {number} [duration={@link Flicking#duration options.duration}] Duration of the panel movement animation (unit: ms).<ko>패널 이동 애니메이션 진행 시간 (단위: ms)</ko>\n   * @async\n   * @fires Flicking#moveStart\n   * @fires Flicking#move\n   * @fires Flicking#moveEnd\n   * @fires Flicking#willChange\n   * @fires Flicking#changed\n   * @fires Flicking#willRestore\n   * @fires Flicking#restored\n   * @fires Flicking#needPanel\n   * @fires Flicking#visibleChange\n   * @fires Flicking#reachEdge\n   * @throws {FlickingError}\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE INDEX_OUT_OF_RANGE}|When the next panel does not exist|\n   * |{@link ERROR_CODE ANIMATION_ALREADY_PLAYING}|When the animation is already playing|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|When the animation is interrupted by user input|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|When the any of the event's `stop()` is called|\n   * <ko>\n   *\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE INDEX_OUT_OF_RANGE}|다음 패널이 존재하지 않을 경우|\n   * |{@link ERROR_CODE ANIMATION_ALREADY_PLAYING}|애니메이션이 이미 진행중인 경우|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|사용자 입력에 의해 애니메이션이 중단된 경우|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|발생된 이벤트들 중 하나라도 `stop()`이 호출된 경우|\n   *\n   * </ko>\n   * @return {Promise<void>} A Promise which will be resolved after reaching the next panel<ko>다음 패널 도달시에 resolve되는 Promise</ko>\n   */\n  public next(duration: number = this._duration) {\n    return this.moveTo(this._control.activePanel?.next()?.index ?? this._renderer.panelCount, duration, DIRECTION.NEXT);\n  }\n\n  /**\n   * Move to the panel with given index\n   * @ko 주어진 인덱스에 해당하는 패널로 이동합니다\n   * @param {number} index The index of the panel to move<ko>이동할 패널의 인덱스</ko>\n   * @param {number} [duration={@link Flicking#duration options.duration}] Duration of the animation (unit: ms)<ko>애니메이션 진행 시간 (단위: ms)</ko>\n   * @param {DIRECTION} [direction=DIRECTION.NONE] Direction to move, only available in the {@link Flicking#circular circular} mode<ko>이동할 방향. {@link Flicking#circular circular} 옵션 활성화시에만 사용 가능합니다</ko>\n   * @async\n   * @fires Flicking#moveStart\n   * @fires Flicking#move\n   * @fires Flicking#moveEnd\n   * @fires Flicking#willChange\n   * @fires Flicking#changed\n   * @fires Flicking#willRestore\n   * @fires Flicking#restored\n   * @fires Flicking#needPanel\n   * @fires Flicking#visibleChange\n   * @fires Flicking#reachEdge\n   * @throws {FlickingError}\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE INDEX_OUT_OF_RANGE}|When the root is not either string or HTMLElement|\n   * |{@link ERROR_CODE ANIMATION_ALREADY_PLAYING}|When the animation is already playing|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|When the animation is interrupted by user input|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|When the any of the event's `stop()` is called|\n   * <ko>\n   *\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE INDEX_OUT_OF_RANGE}|해당 인덱스를 가진 패널이 존재하지 않을 경우|\n   * |{@link ERROR_CODE ANIMATION_ALREADY_PLAYING}|애니메이션이 이미 진행중인 경우|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|사용자 입력에 의해 애니메이션이 중단된 경우|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|발생된 이벤트들 중 하나라도 `stop()`이 호출된 경우|\n   *\n   * </ko>\n   * @return {Promise<void>} A Promise which will be resolved after reaching the target panel<ko>해당 패널 도달시에 resolve되는 Promise</ko>\n   */\n  public moveTo(index: number, duration: number = this._duration, direction: ValueOf<typeof DIRECTION> = DIRECTION.NONE) {\n    const renderer = this._renderer;\n    const panelCount = renderer.panelCount;\n\n    const panel = renderer.getPanel(index);\n\n    if (!panel) {\n      return Promise.reject(new FlickingError(ERROR.MESSAGE.INDEX_OUT_OF_RANGE(index, 0, panelCount - 1), ERROR.CODE.INDEX_OUT_OF_RANGE));\n    }\n\n    if (this._control.animating) {\n      return Promise.reject(new FlickingError(ERROR.MESSAGE.ANIMATION_ALREADY_PLAYING, ERROR.CODE.ANIMATION_ALREADY_PLAYING));\n    }\n\n    return this._control.moveToPanel(panel, {\n      duration,\n      direction\n    });\n  }\n\n  /**\n   * Return the {@link Panel} at the given index. `null` if it doesn't exists.\n   * @ko 주어진 인덱스에 해당하는 {@link Panel}을 반환합니다. 주어진 인덱스에 해당하는 패널이 존재하지 않을 경우 `null`을 반환합니다.\n   * @return {Panel | null} Panel at the given index<ko>주어진 인덱스에 해당하는 패널</ko>\n   * @see Panel\n   * @example\n   * ```ts\n   * const panel = flicking.getPanel(0);\n   * // Which is a shorthand to...\n   * const samePanel = flicking.panels[0];\n   * ```\n   */\n  public getPanel(index: number): Panel | null {\n    return this._renderer.getPanel(index);\n  }\n\n  /**\n   * Enable input from the user (mouse/touch)\n   * @ko 사용자의 입력(마우스/터치)를 활성화합니다\n   * @return {this}\n   */\n  public enableInput(): this {\n    this._control.enable();\n    return this;\n  }\n\n  /**\n   * Disable input from the user (mouse/touch)\n   * @ko 사용자의 입력(마우스/터치)를 막습니다\n   * @return {this}\n   */\n  public disableInput(): this {\n    this._control.disable();\n    return this;\n  }\n\n  /**\n   * Get current flicking status. You can restore current state by giving returned value to {@link Flicking#setStatus setStatus()}\n   * @ko 현재 상태를 반환합니다. 반환받은 값을 {@link Flicking#setStatus setStatus()} 메소드의 인자로 지정하면 현재 상태를 복원할 수 있습니다\n   * @param {object} options Status retrieving options<ko>Status 반환 옵션</ko>\n   * @param {boolean} [options.index=true] Include current panel index to the returning status. Camera will automatically move to the given index when the {@link Flicking#setStatus setStatus} is called<ko>현재 패널 인덱스를 반환값에 포함시킵니다. {@link Flicking#setStatus setStatus} 호출시 자동으로 해당 인덱스로 카메라를 움직입니다</ko>\n   * @param {boolean} [options.position=true] Include camera position to the returning status. This works only when the {@link Flicking#moveType moveType} is `freeScroll`<ko>카메라의 현재 위치를 반환값에 포함시킵니다. 이 옵션은 {@link Flicking#moveType moveType}이 `freeScroll`일 경우에만 동작합니다</ko>\n   * @param {boolean} [options.includePanelHTML=false] Include panel's `outerHTML` to the returning status<ko>패널의 `outerHTML`을 반환값에 포함시킵니다</ko>\n   * @param {boolean} [options.visiblePanelsOnly=false] Include only {@link Flicking#visiblePanel visiblePanel}'s HTML. This option is available only when the `includePanelHTML` is true\n   * <ko>현재 보이는 패널({@link Flicking#visiblePanel visiblePanel})의 HTML만 반환합니다. `includePanelHTML`이 `true`일 경우에만 동작합니다.</ko>\n   * @return {Status} An object with current status value information<ko>현재 상태값 정보를 가진 객체.</ko>\n   */\n  public getStatus({\n    index = true,\n    position = true,\n    includePanelHTML = false,\n    visiblePanelsOnly = false\n  }: Partial<{\n    index: boolean;\n    position: boolean;\n    includePanelHTML: boolean;\n    visiblePanelsOnly: boolean;\n  }> = {}): Status {\n    const camera = this._camera;\n    const panels = visiblePanelsOnly ? this.visiblePanels : this.panels;\n\n    const status: Status = {\n      panels: panels.map(panel => {\n        const panelInfo: Status[\"panels\"][0] = { index: panel.index };\n\n        if (includePanelHTML) {\n          panelInfo.html = panel.element.outerHTML;\n        }\n\n        return panelInfo;\n      })\n    };\n\n    if (index) {\n      status.index = this.index;\n    }\n    if (position) {\n      const nearestAnchor = camera.findNearestAnchor(camera.position);\n\n      if (nearestAnchor) {\n        status.position = {\n          panel: nearestAnchor.panel.index,\n          progressInPanel: camera.getProgressInPanel(nearestAnchor.panel)\n        };\n      }\n\n    }\n\n    if (visiblePanelsOnly) {\n      const visiblePanels = this.visiblePanels;\n\n      status.visibleOffset = visiblePanels[0]?.index ?? 0;\n    }\n\n    return status;\n  }\n\n  /**\n   * Restore to the state of the given {@link Status}\n   * @ko 주어진 {@link Status}의 상태로 복원합니다\n   * @param {Partial<Status>} status Status value to be restored. You should use the return value of the {@link Flicking#getStatus getStatus()} method<ko>복원할 상태 값. {@link Flicking#getStatus getStatus()} 메서드의 반환값을 지정하면 됩니다</ko>\n   * @return {void}\n   */\n  public setStatus(status: Status): void {\n    if (!this._initialized) {\n      throw new FlickingError(ERROR.MESSAGE.NOT_INITIALIZED, ERROR.CODE.NOT_INITIALIZED);\n    }\n\n    const {\n      index,\n      position,\n      visibleOffset,\n      panels\n    } = status;\n\n    const renderer = this._renderer;\n    const control = this._control;\n\n    // Can't add/remove panels on external rendering\n    if (panels[0]?.html && !this._renderExternal) {\n      renderer.batchRemove({ index: 0, deleteCount: this.panels.length, hasDOMInElements: true });\n      renderer.batchInsert({ index: 0, elements: parseElement(panels.map(panel => panel.html!)), hasDOMInElements: true });\n    }\n\n    if (index) {\n      const panelIndex = visibleOffset\n        ? index - visibleOffset\n        : index;\n\n      void this.moveTo(panelIndex, 0).catch(() => void 0);\n    }\n\n    if (position && this._moveType === MOVE_TYPE.FREE_SCROLL) {\n      const { panel, progressInPanel } = position;\n      const panelIndex = visibleOffset\n        ? panel - visibleOffset\n        : panel;\n      const panelRange = renderer.panels[panelIndex].range;\n      const newCameraPos = panelRange.min + (panelRange.max - panelRange.min) * progressInPanel;\n\n      void control.moveToPosition(newCameraPos, 0).catch(() => void 0);\n    }\n  }\n\n  /**\n   * Add plugins that can have different effects on Flicking\n   * @ko 플리킹에 다양한 효과를 부여할 수 있는 플러그인을 추가합니다\n   * @param {...Plugin} plugins The plugin(s) to add<ko>추가할 플러그인(들)</ko>\n   * @return {this}\n   * @see https://github.com/naver/egjs-flicking-plugins\n   */\n  public addPlugins(...plugins: Plugin[]) {\n    if (this._initialized) {\n      plugins.forEach(item => item.init(this));\n    }\n\n    this._plugins.push(...plugins);\n\n    return this;\n  }\n\n  /**\n   * Remove plugins from Flicking.\n   * @ko 플리킹으로부터 플러그인들을 제거합니다.\n   * @param {...Plugin} plugin The plugin(s) to remove.<ko>제거 플러그인(들).</ko>\n   * @return {this}\n   * @see https://github.com/naver/egjs-flicking-plugins\n   */\n  public removePlugins(...plugins: Plugin[]) {\n    plugins.forEach(item => {\n      const foundIndex = findIndex(this._plugins, val => val === item);\n\n      if (foundIndex >= 0) {\n        item.destroy();\n        this._plugins.splice(foundIndex, 1);\n      }\n    });\n\n    return this;\n  }\n\n  /**\n   * Update viewport/panel sizes\n   * @ko 패널 및 뷰포트의 크기를 갱신합니다\n   * @method\n   * @fires Flicking#beforeResize\n   * @fires Flicking#afterResize\n   * @return {this}\n   */\n  public async resize(): Promise<void> {\n    const viewport = this._viewport;\n    const renderer = this._renderer;\n    const camera = this._camera;\n    const control = this._control;\n\n    const activePanel = control.activePanel;\n    const prevWidth = viewport.width;\n    const prevHeight = viewport.height;\n    const prevProgressInPanel = activePanel\n      ? camera.getProgressInPanel(activePanel)\n      : 0;\n\n    this.trigger(new ComponentEvent(EVENTS.BEFORE_RESIZE, {\n      width: prevWidth,\n      height: prevHeight,\n      element: viewport.element\n    }));\n\n    viewport.resize();\n    await renderer.forceRenderAllPanels(); // Render all panel elements, to update sizes\n    renderer.updatePanelSize();\n    camera.updateAlignPos();\n    camera.updateRange();\n    camera.updateAnchors();\n    await renderer.render();\n\n    if (control.animating) {\n      // TODO:\n    } else {\n      control.updatePosition(prevProgressInPanel);\n      control.updateInput();\n    }\n\n    const newWidth = viewport.width;\n    const newHeight = viewport.height;\n    const sizeChanged = newWidth !== prevWidth || newHeight !== prevHeight;\n\n    this.trigger(new ComponentEvent(EVENTS.AFTER_RESIZE, {\n      width: viewport.width,\n      height: viewport.height,\n      prev: {\n        width: prevWidth,\n        height: prevHeight\n      },\n      sizeChanged,\n      element: viewport.element\n    }));\n  }\n\n  /**\n   * Add new panels after the last panel\n   * @ko 패널 목록의 제일 끝에 새로운 패널들을 추가합니다\n   * @param {ElementLike | ElementLike[]} element A new HTMLElement, a outerHTML of element, or an array of both\n   * <ko>새로운 HTMLElement, 혹은 엘리먼트의 outerHTML, 혹은 그것들의 배열</ko>\n   * @return {Panel[]} An array of appended panels<ko>추가된 패널들의 배열</ko>\n   * @see Panel\n   * @see ElementLike\n   * @throws {FlickingError} {@link ERROR_CODE ERROR_CODE.NOT_ALLOWED_IN_FRAMEWORK} if called on frameworks (React, Angular, Vue...)\n   * @example\n   * ```ts\n   * const flicking = new Flicking(\"#flick\");\n   * // These are possible parameters\n   * flicking.append(document.createElement(\"div\"));\n   * flicking.append(\"\\<div\\>Panel\\</div\\>\");\n   * flicking.append([\"\\<div\\>Panel\\</div\\>\", document.createElement(\"div\")]);\n   * // Even this is possible\n   * flicking.append(\"\\<div\\>Panel 1\\</div\\>\\<div\\>Panel 2\\</div\\>\");\n   * ```\n   */\n  public append(element: ElementLike | ElementLike[]): Panel[] {\n    return this.insert(this._renderer.panelCount, element);\n  }\n\n  /**\n   * Add new panels before the first panel\n   * This will increase index of panels after by the number of panels added\n   * @ko 패널 목록의 제일 앞(index 0)에 새로운 패널들을 추가합니다\n   * 추가한 패널의 개수만큼 기존 패널들의 인덱스가 증가합니다.\n   * @param {ElementLike | ElementLike[]} element A new HTMLElement, a outerHTML of element, or an array of both\n   * <ko>새로운 HTMLElement, 혹은 엘리먼트의 outerHTML, 혹은 그것들의 배열</ko>\n   * @return {Panel[]} An array of prepended panels<ko>추가된 패널들의 배열</ko>\n   * @see Panel\n   * @see ElementLike\n   * @throws {FlickingError} {@link ERROR_CODE ERROR_CODE.NOT_ALLOWED_IN_FRAMEWORK} if called on frameworks (React, Angular, Vue...)\n   * @example\n   * ```ts\n   * const flicking = new eg.Flicking(\"#flick\");\n   * flicking.prepend(document.createElement(\"div\"));\n   * flicking.prepend(\"\\<div\\>Panel\\</div\\>\");\n   * flicking.prepend([\"\\<div\\>Panel\\</div\\>\", document.createElement(\"div\")]);\n   * // Even this is possible\n   * flicking.prepend(\"\\<div\\>Panel 1\\</div\\>\\<div\\>Panel 2\\</div\\>\");\n   * ```\n   */\n  public prepend(element: ElementLike | ElementLike[]): Panel[] {\n    return this.insert(0, element);\n  }\n\n  /**\n   * Insert new panels at given index\n   * This will increase index of panels after by the number of panels added\n   * @ko 주어진 인덱스에 새로운 패널들을 추가합니다\n   * 해당 인덱스보다 같거나 큰 인덱스를 가진 기존 패널들은 추가한 패널의 개수만큼 인덱스가 증가합니다.\n   * @param {number} index Index to insert new panels at<ko>새로 패널들을 추가할 인덱스</ko>\n   * @param {ElementLike | ElementLike[]} element A new HTMLElement, a outerHTML of element, or an array of both\n   * <ko>새로운 HTMLElement, 혹은 엘리먼트의 outerHTML, 혹은 그것들의 배열</ko>\n   * @return {Panel[]} An array of prepended panels<ko>추가된 패널들의 배열</ko>\n   * @throws {FlickingError} {@link ERROR_CODE ERROR_CODE.NOT_ALLOWED_IN_FRAMEWORK} if called on frameworks (React, Angular, Vue...)\n   * @example\n   * ```ts\n   * const flicking = new eg.Flicking(\"#flick\");\n   * flicking.insert(0, document.createElement(\"div\"));\n   * flicking.insert(2, \"\\<div\\>Panel\\</div\\>\");\n   * flicking.insert(1, [\"\\<div\\>Panel\\</div\\>\", document.createElement(\"div\")]);\n   * // Even this is possible\n   * flicking.insert(3, \"\\<div\\>Panel 1\\</div\\>\\<div\\>Panel 2\\</div\\>\");\n   * ```\n   */\n  public insert(index: number, element: ElementLike | ElementLike[]): Panel[] {\n    if (this._renderExternal) {\n      throw new FlickingError(ERROR.MESSAGE.NOT_ALLOWED_IN_FRAMEWORK, ERROR.CODE.NOT_ALLOWED_IN_FRAMEWORK);\n    }\n\n    return this._renderer.batchInsert({ index, elements: parseElement(element), hasDOMInElements: true });\n  }\n\n  /**\n   * Remove the panel at the given index\n   * This will decrease index of panels after by the number of panels removed\n   * @ko 주어진 인덱스의 패널을 제거합니다\n   * 해당 인덱스보다 큰 인덱스를 가진 기존 패널들은 제거한 패널의 개수만큼 인덱스가 감소합니다\n   * @param {number} index Index of panel to remove<ko>제거할 패널의 인덱스</ko>\n   * @param {number} [deleteCount=1] Number of panels to remove from index<ko>`index` 이후로 제거할 패널의 개수</ko>\n   * @return {Panel[]} An array of removed panels<ko>제거된 패널들의 배열</ko>\n   */\n  public remove(index: number, deleteCount: number = 1): Panel[] {\n    if (this._renderExternal) {\n      throw new FlickingError(ERROR.MESSAGE.NOT_ALLOWED_IN_FRAMEWORK, ERROR.CODE.NOT_ALLOWED_IN_FRAMEWORK);\n    }\n\n    return this._renderer.batchRemove({ index, deleteCount, hasDOMInElements: true });\n  }\n\n  private _createControl(): Control {\n    const moveType = this._moveType;\n    const moveTypes = Object.keys(MOVE_TYPE).map(key => MOVE_TYPE[key] as ValueOf<typeof MOVE_TYPE>);\n\n    const moveTypeStr = Array.isArray(moveType)\n      ? moveType[0]\n      : moveType;\n\n    const moveTypeOptions = Array.isArray(moveType)\n      ? moveType[1] ?? {}\n      : {};\n\n    if (!includes(moveTypes, moveTypeStr)) {\n      throw new FlickingError(ERROR.MESSAGE.WRONG_OPTION(\"moveType\", JSON.stringify(moveType)), ERROR.CODE.WRONG_OPTION);\n    }\n\n    switch (moveTypeStr) {\n      case MOVE_TYPE.SNAP:\n        return new SnapControl(moveTypeOptions as SnapControlOptions);\n      case MOVE_TYPE.FREE_SCROLL:\n        return new FreeControl(moveTypeOptions as FreeControlOptions);\n      case MOVE_TYPE.STRICT:\n        return new StrictControl(moveTypeOptions as StrictControlOptions);\n    }\n  }\n\n  private _createCamera(): Camera {\n    const cameraOption = { align: this._align };\n\n    if (this._circular) {\n      if (this._bound) {\n        // eslint-disable-next-line no-console\n        console.warn(\"\\\"circular\\\" and \\\"bound\\\" option cannot be used together, ignoring bound.\");\n      }\n      return new CircularCamera(cameraOption);\n    } else if (this._bound) {\n      return new BoundCamera(cameraOption);\n    } else {\n      return new LinearCamera(cameraOption);\n    }\n  }\n\n  private _createRenderer(): Renderer {\n    const renderExternal = this._renderExternal;\n\n    if (this._virtual && this._panelsPerView <= 0) {\n      // eslint-disable-next-line no-console\n      console.warn(\"\\\"virtual\\\" and \\\"panelsPerView\\\" option should be used together, ignoring virtual.\");\n    }\n\n    return renderExternal\n      ? this._createExternalRenderer()\n      : this._createVanillaRenderer();\n  }\n\n  private _createVanillaRenderer(): VanillaRenderer {\n    const virtual = this.virtualEnabled;\n\n    return new VanillaRenderer({\n      align: this._align,\n      strategy: virtual\n        ? new VirtualRenderingStrategy()\n        : new NormalRenderingStrategy({\n          providerCtor: VanillaElementProvider,\n          panelCtor: Panel\n        })\n    });\n  }\n\n  private _createExternalRenderer(): ExternalRenderer {\n    const {\n      renderer,\n      rendererOptions\n    } = this._renderExternal!;\n\n    return new (renderer)({ align: this._align, ...rendererOptions });\n  }\n\n  private async _moveToInitialPanel(): Promise<void> {\n    const renderer = this._renderer;\n    const control = this._control;\n    const initialPanel = renderer.getPanel(this._defaultIndex) || renderer.getPanel(0);\n\n    if (!initialPanel) return;\n\n    control.setActive(initialPanel, null, false);\n\n    return control.moveToPanel(initialPanel, {\n      duration: 0\n    });\n  }\n}\n\nexport default Flicking;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Viewport from \"./Viewport\";\nimport FlickingError from \"./FlickingError\";\nimport AnchorPoint from \"./AnchorPoint\";\nimport VirtualManager from \"./VirtualManager\";\n\nexport {\n  Viewport,\n  FlickingError,\n  AnchorPoint,\n  VirtualManager\n};\n\nexport * from \"./panel\";\n","import Component from \"@egjs/component\";\n\nimport Flicking from \"../Flicking\";\n\n/**\n * Decorator that makes the method of flicking available in the framework.\n * @ko 프레임워크에서 플리킹의 메소드를 사용할 수 있게 하는 데코레이터.\n * @memberof eg.Flicking\n * @private\n * @example\n * ```js\n * import Flicking, { withFlickingMethods } from \"@egjs/flicking\";\n *\n * class Flicking extends React.Component<Partial<FlickingProps & FlickingOptions>> {\n *   &#64;withFlickingMethods\n *   private flicking: Flicking;\n * }\n * ```\n */\nconst withFlickingMethods = (prototype: any, flickingName: string) => {\n  [Component.prototype, Flicking.prototype].forEach(proto => {\n    Object.getOwnPropertyNames(proto).filter(name => !prototype[name] && !name.startsWith(\"_\") && name !== \"constructor\")\n      .forEach((name: string) => {\n        const descriptor = Object.getOwnPropertyDescriptor(proto, name)!;\n\n        if (descriptor.value) {\n          // Public Function\n          Object.defineProperty(prototype, name, {\n            value: function(...args) {\n              return descriptor.value.call(this[flickingName], ...args);\n            }\n          });\n        } else {\n          const getterDescriptor: { get?: () => any; set?: (val: any) => void } = {};\n          if (descriptor.get) {\n            getterDescriptor.get = function() {\n              return descriptor.get?.call(this[flickingName]);\n            };\n          }\n          if (descriptor.set) {\n            getterDescriptor.set = function(...args) {\n              return descriptor.set?.call(this[flickingName], ...args);\n            };\n          }\n\n          Object.defineProperty(prototype, name, getterDescriptor);\n        }\n      });\n  });\n};\n\nexport default withFlickingMethods;\n","import { DiffResult } from \"@egjs/list-differ\";\n\nimport Flicking from \"../Flicking\";\nimport Renderer from \"../renderer/Renderer\";\n\nexport default (flicking: Flicking, diffResult: DiffResult<any>, rendered: any[]) => {\n  const renderer = flicking.renderer;\n  const panels = renderer.panels;\n\n  if (diffResult.removed.length > 0) {\n    let endIdx = -1;\n    let prevIdx = -1;\n\n    diffResult.removed.forEach(removedIdx => {\n      if (endIdx < 0) {\n        endIdx = removedIdx;\n      }\n\n      if (prevIdx >= 0 && removedIdx !== prevIdx - 1) {\n        batchRemove(renderer, prevIdx, endIdx + 1);\n\n        endIdx = removedIdx;\n        prevIdx = removedIdx;\n      } else {\n        prevIdx = removedIdx;\n      }\n    });\n\n    batchRemove(renderer, prevIdx, endIdx + 1);\n  }\n\n  diffResult.ordered.forEach(([prevIdx, newIdx]) => {\n    const prevPanel = panels[prevIdx];\n    const indexDiff = newIdx - prevIdx;\n\n    if (indexDiff > 0) {\n      const middlePanels = panels.slice(prevIdx + 1, newIdx + 1);\n\n      prevPanel.increaseIndex(indexDiff);\n      middlePanels.forEach(panel => panel.decreaseIndex(1));\n    } else {\n      const middlePanels = panels.slice(newIdx, prevIdx);\n\n      prevPanel.decreaseIndex(-indexDiff);\n      middlePanels.forEach(panel => panel.increaseIndex(1));\n    }\n    // Update position\n    prevPanel.resize();\n  });\n\n  if (diffResult.ordered.length > 0) {\n    panels.sort((panel1, panel2) => panel1.index - panel2.index);\n  }\n\n  if (diffResult.added.length > 0) {\n    let startIdx = -1;\n    let prevIdx = -1;\n\n    diffResult.added.forEach((addedIdx, idx) => {\n      if (startIdx < 0) {\n        startIdx = idx;\n      }\n\n      if (prevIdx >= 0 && addedIdx !== prevIdx + 1) {\n        batchInsert(renderer, diffResult, rendered, startIdx, idx + 1);\n\n        startIdx = -1;\n        prevIdx = -1;\n      } else {\n        prevIdx = addedIdx;\n      }\n    });\n\n    if (startIdx >= 0) {\n      batchInsert(renderer, diffResult, rendered, startIdx);\n    }\n  }\n};\n\nconst batchInsert = (renderer: Renderer, diffResult: DiffResult<any>, rendered: any[], startIdx: number, endIdx?: number) => {\n  renderer.batchInsert(\n    ...diffResult.added.slice(startIdx, endIdx).map((index, elIdx) => ({ index, elements: [rendered[elIdx + diffResult.prevList.length]], hasDOMInElements: false }))\n  );\n};\n\nconst batchRemove = (renderer: Renderer, startIdx: number, endIdx?: number) => {\n  const removed = renderer.panels.slice(startIdx, endIdx);\n\n  renderer.batchRemove({ index: startIdx, deleteCount: removed.length, hasDOMInElements: false });\n};\n\n","import { DiffResult } from \"@egjs/list-differ\";\n\nimport Flicking from \"../Flicking\";\n\nexport default <T>(flicking: Flicking, diffResult: DiffResult<T>) => {\n  const removedPanels = diffResult.removed.reduce((map, idx) => {\n    map[idx] = true;\n    return map;\n  }, {});\n\n  const maintainedMap = diffResult.maintained.reduce((map, [prev, current]) => {\n    map[prev] = current;\n    return map;\n  }, {});\n\n  return [\n    ...flicking.panels\n      .filter(panel => !removedPanels[panel.index])\n      // Sort panels by position\n      .sort((panel1, panel2) => (panel1.position + panel1.offset) - (panel2.position + panel2.offset))\n      .map(panel => diffResult.list[maintainedMap[panel.index]]),\n    ...diffResult.added.map(idx => diffResult.list[idx])\n  ];\n};\n\n","import { FlickingOptions } from \"../Flicking\";\nimport { ALIGN } from \"../const/external\";\nimport { parseArithmeticExpression } from \"../utils\";\n\nexport default (align: FlickingOptions[\"align\"] = ALIGN.CENTER, horizontal: boolean = true, firstPanelSize?: string) => {\n  const cameraAlign = getCameraAlign(align);\n  const panelAlign = getPanelAlign(align);\n\n  if (panelAlign == null) return \"\";\n\n  const camPosition = `calc(${cameraAlign} - (${firstPanelSize || \"0px\"} * ${panelAlign.percentage}) - ${panelAlign.absolute}px)`;\n\n  return horizontal\n    ? `translate(${camPosition})`\n    : `translate(0, ${camPosition})`;\n};\n\nconst getCameraAlign = (align: FlickingOptions[\"align\"]) => {\n  const alignVal = typeof align === \"object\"\n    ? (align as { camera: string | number }).camera\n    : align;\n\n  return parseAlign(alignVal);\n};\n\nconst getPanelAlign = (align: FlickingOptions[\"align\"]) => {\n  const alignVal = typeof align === \"object\"\n    ? (align as { panel: string | number }).panel\n    : align;\n\n  return parseArithmeticExpression(parseAlign(alignVal));\n};\n\nconst parseAlign = (alignVal: number | string) => {\n  if (typeof alignVal === \"number\") {\n    return `${alignVal}px`;\n  }\n\n  switch (alignVal) {\n    case ALIGN.CENTER:\n      return \"50%\";\n    case ALIGN.NEXT:\n      return \"100%\";\n    case ALIGN.PREV:\n      return \"0%\";\n    default:\n      return alignVal;\n  }\n};\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Flicking from \"./Flicking\";\nimport * as Core from \"./core\";\nimport * as Camera from \"./camera\";\nimport * as Control from \"./control\";\nimport * as Renderer from \"./renderer\";\nimport * as Constants from \"./const/external\";\nimport * as CFC from \"./cfc\";\nimport * as Utils from \"./utils\";\nimport { merge } from \"./utils\";\n\nmerge(Flicking, Core);\nmerge(Flicking, Camera);\nmerge(Flicking, Control);\nmerge(Flicking, Renderer);\nmerge(Flicking, Constants);\nmerge(Flicking, CFC);\nmerge(Flicking, Utils);\n\nexport default Flicking;\n"],"names":["CODE","WRONG_TYPE","ELEMENT_NOT_FOUND","VAL_MUST_NOT_NULL","NOT_ATTACHED_TO_FLICKING","WRONG_OPTION","INDEX_OUT_OF_RANGE","POSITION_NOT_REACHABLE","TRANSFORM_NOT_SUPPORTED","STOP_CALLED_BY_USER","ANIMATION_INTERRUPTED","ANIMATION_ALREADY_PLAYING","NOT_ALLOWED_IN_FRAMEWORK","NOT_INITIALIZED","NO_ACTIVE","NOT_ALLOWED_IN_VIRTUAL","MESSAGE","wrongVal","correctTypes","map","type","join","selector","val","name","optionName","min","max","position","EVENTS","READY","BEFORE_RESIZE","AFTER_RESIZE","HOLD_START","HOLD_END","MOVE_START","MOVE","MOVE_END","WILL_CHANGE","CHANGED","WILL_RESTORE","RESTORED","SELECT","NEED_PANEL","VISIBLE_CHANGE","REACH_EDGE","PANEL_CHANGE","ALIGN","PREV","CENTER","NEXT","DIRECTION","NONE","MOVE_TYPE","SNAP","FREE_SCROLL","STRICT","CLASS","VERTICAL","HIDDEN","DEFAULT_VIRTUAL","merge","target","_i","sources","forEach","source","Object","keys","key","getElement","el","parent","targetEl","isString","parentEl","document","queryResult","querySelector","FlickingError","ERROR","nodeType","Node","ELEMENT_NODE","checkExistence","value","nameOnErrMsg","clamp","x","Math","getFlickingAttached","toArray","iterable","slice","call","parseAlign","align","size","alignPoint","parseArithmeticSize","parseBounce","bounce","parsedBounce","Array","isArray","parsedVal","cssValue","base","parsed","parseArithmeticExpression","percentage","absolute","cssRegex","idx","matchResult","exec","sign","unit","parsedValue","parseFloat","signMultiplier","parseCSSSizeValue","parsePanelAlign","panel","getDirection","start","end","parseElement","element","elements","tempDiv","createElement","innerHTML","push","children","firstChild","removeChild","getMinusCompensatedIndex","includes","array","array_1","__values","circulatePosition","pos","offset","find","checker","array_2","findRight","length","findIndex","getProgress","prev","next","getStyle","window","getComputedStyle","currentStyle","setSize","_a","width","height","style","isBetween","circulateIndex","index","range","arr","i","setPrototypeOf","obj","proto","__proto__","__extends","message","code","_super","_this","prototype","Error","_el","_width","_height","_padding","left","right","top","bottom","_isBorderBoxSizing","padding","isBorderBoxSizing","newWidth","newHeight","resize","elStyle","clientWidth","clientHeight","paddingLeft","paddingRight","paddingTop","paddingBottom","boxSizing","flicking","_flicking","isFirstResize","_onResize","_enabled","_resizeObserver","viewport","disable","useResizeObserver","ResizeObserver","viewportSizeNot0","resizeObserver","_skipFirstResize","observe","addEventListener","disconnect","removeEventListener","elementProvider","_index","_elProvider","_align","_removed","_rendered","_loading","_resetInternalStates","_pos","_alignPos","_size","_margin","_toggled","_toggleDirection","toggleDirection","cameraRangeDiff","camera","rangeDiff","progress","alignPosition","camPos","disappearPosNext","disappearPosPrev","visibleRange","checkingRange","visibleSize","show","hide","cached","horizontal","margin","offsetWidth","offsetHeight","marginLeft","marginRight","marginTop","marginBottom","updatePosition","_updateAlignPos","contains","includeMargin","includeRange","panelRange","duration","moveTo","renderer","panelCount","circularEnabled","getPanel","prevPanel","panels","prevPos","newPos","togglePosition","_togglePosition","prevToggled","camRange","camAlignPosition","camVisibleRange","camVisibleSize","minimumVisible","maximumVisible","shouldBeVisibleAtMin","shouldBeVisibleAtMax","toggle","Infinity","options","rendered","markForShow","markForHide","Panel","init","_cachedInnerHTML","virtualElCount","panelsPerView","result","virtual","renderPanel","cache","newInnerHTML","cacheRenderResult","uncacheRenderResult","increaseIndex","decreaseIndex","_element","cameraEl","parentElement","appendChild","elIndex","_panel","elementIndex","virtualElements","nativeElement","_renderPanel","_initialPanelCount","initialPanelCount","_cache","_panelClass","panelClass","_elements","virtualEnabled","renderExternal","_initVirtualElements","visible","nativeEl","display","count","insert","batchInsert","hasDOMInElements","batchRemove","deleteCount","cameraElement","fragment","createDocumentFragment","newElements","panelEl","className","dataset","toString","EVENT","HOLD","CHANGE","RELEASE","ANIMATION_END","FINISH","POSITION_KEY","STATE_TYPE","_delta","_targetPanel","prevState","ctx","axesEvent","transitTo","delta","AXES","prevPosition","newPosition","lookAt","moveEvent","ComponentEvent","isTrusted","holding","direction","trigger","isCanceled","DISABLED","holdStartEvent","HOLDING","controller","control","animatingContext","moveStartEvent","ANIMATING","onChange","State","inputEvent","offsetX","offsetY","DRAGGING","flick","setTo","IDLE","_releaseEvent","releaseEvent","srcEvent","clickedElement","touchEvent","touch","changedTouches","elementFromPoint","clientX","clientY","clickedPanel","panels_1","cameraPosition","clickedPanelPosition","_moveToChangedPosition","destPos","moveToPosition","updateInput","setActive","activePanel","stop","nextStateType","nextState","IdleState","HoldingState","DraggingState","AnimatingState","DisabledState","onEnter","_state","eventType","externalCtx","currentState","onHold","onRelease","onAnimationEnd","onFinish","_dragged","e","preventDefault","stopPropagation","_resetInternalValues","_stateMachine","StateMachine","_axes","state","_animatingContext","axes","circular","axis","_panInput","isEnable","get","Axes","deceleration","interruptable","easing","PanInput","inputType","iOSEdgeSwipeThreshold","scale","releaseOnScroll","connect","on","fire","removePreventClickHandler","destroy","enable","controlParams","axm","set","_onAxesHold","_onAxesChange","_preventClickWhenDragged","off","Promise","reject","startPos","targetPanel","resolve","animate","resetContext","once","_b","animationFinishHandler","interruptionHandler","_controller","AxesController","_activePanel","animating","_progressInPanel","clampToReachablePosition","update","nearestAnchor","findNearestAnchor","removed","canReach","camPos_1","camRangeDiff","possiblePositions","filter","reduce","nearestPosition","abs","_triggerIndexChangeEvent","_animateToPosition","newActivePanel","prevActivePanel","updateAdaptiveHeight","prevIndex","triggeringEvent","event","animateTo","then","render","catch","err","_c","_count","activeAnchor","findActiveAnchor","anchorAtCamera","snapThreshold","_calcSnapThreshold","posDelta","absPosDelta","snapDelta","targetAnchor","_findSnappedAnchor","threshold","_findAdjacentAnchor","currentPos","clampedPosition","anchorAtPosition","findAnchorIncludePosition","isFinite","anchors","anchorPoints","loopCount","floor","circularIndexOffset","anchorAtPositionIndex","anchor","AnchorPoint","loop","adjacentAnchor","getNextAnchor","getPrevAnchor","isNextDirection","panelSize","alignPos","Control","stopAtEdge","_stopAtEdge","progressInPanel","targetPos","_resetIndexRange","cameraRange","currentIndex","prevPanelIndex","nextPanelIndex","nextPanel","nextPos","_indexRange","axesRange","indexRange","isOverThreshold","firstAnchor","lastAnchor","shouldBounceToFirst","shouldBounceToLast","transforms","supportedStyle","documentElement","transformName","transforms_1","prefixedTransform","_transform","_position","_offset","_range","_visiblePanels","_anchors","NaN","nearestPanel","panelPos","bounceSize","prevRange","nextRange","nextPosition","viewportEl","firstElementChild","_checkTranslateSupport","_refreshVisiblePanels","_checkNeedPanel","_checkReachEnd","applyTransform","anchorsIncludingPosition","includePosition","nearest","prevDist","anchorIdx","dist","activeIndex","isVisibleOnRange","alignVal","adaptive","unRenderedPanels","sizeIncludingMargin","_needPanelTriggered","actualPosition","newVisiblePanels","canSee","prevVisiblePanels","added","visiblePanels","needPanelTriggered","cameraSize","needPanelThreshold","cameraPrev","cameraNext","firstPanel","lastPanel","firstPanelPrev","lastPanelNext","wasBetweenRange","isBetweenRange","Camera","_circularOffset","_circularEnabled","anchorCount","positionInRange","anchorInRange","possibleAnchors","visibleInCurrentRange","panelSizeSum","canSetCircularMode","every","updateCircularToggleDirection","updateOffset","_updateCircularOffset","toggled","some","isToggled","sum","toggledPrev","toggledNext","_calcPanelAreaSum","viewportSize","panelAreaSize","isBiggerThanViewport","firstPos","lastPos","reachablePanels","shouldPrependBoundAnchor","shouldAppendBoundAnchor","indexOffset_1","newAnchors","splice","nearestPanelAtMin","_findNearestPanel","panelAtMin","panelAtMax","panelIdx","strategy","_panels","_strategy","panelAlign","_collectPanels","_updatePanelSizeByGrid","items","prevFirstPanel","allPanelsInserted","addedPanels","item","insertingIdx","panelsPushed","panelsInserted","_createPanel","_insertPanelElements","_updateCameraAndControl","moveToPanel","checkPanelContentsReady","allPanelsRemoved","removingIdx","panelsPulled","panelsRemoved","_removePanelElements","resetActive","checkingPanels","resizeOnContentsReady","hasContents","contentsReadyChecker","ImReady","loading","prevProgressInPanel","getProgressInPanel","panelBehind","initialized","updateRange","updateAnchors","readyCount","totalCount","check","resetNeedPanelHistory","visibleIndexes","visibles","referencePanel","gap","panelSizeObj","firstPanelSizeObj","noPanelStyleOverride","updatePanelSizes","nextSibling","nextSiblingElement","insertBefore","updateRenderingPanels","renderPanels","_resetPanelElementOrder","_removeAllTextNodes","collectPanels","createPanel","reversedElements","getRenderingElementsByOrder","reverse","nextEl","nextElementSibling","childNodes","node","TEXT_NODE","Renderer","providerCtor","panelCtor","_providerCtor","_panelCtor","renderedPanels","notToggled","__spreadArray","getRenderingIndexesByOrder","renderOnlyVisible","_showOnlyVisiblePanels","virtualManager","invisibleIndexes","sort","panel1","panel2","_","VirtualPanel","VirtualElementProvider","root","_d","defaultIndex","_e","_f","_g","bound","_h","_j","_k","_l","_m","_o","preventEventsBeforeInit","_p","_q","_r","pow","_s","_t","moveType","_u","_v","_w","_x","_y","preventClickOnDrag","_z","disableOnInit","_0","_1","_2","autoInit","_3","autoResize","_4","_5","_initialized","_plugins","_defaultIndex","_horizontal","_circular","_bound","_adaptive","_panelsPerView","_noPanelStyleOverride","_resizeOnContentsReady","_virtual","_needPanelThreshold","_preventEventsBeforeInit","_deceleration","_duration","_easing","_inputType","_moveType","_threshold","_interruptable","_bounce","_iOSEdgeSwipeThreshold","_preventClickOnDrag","_disableOnInit","_renderOnlyVisible","_autoInit","_autoResize","_useResizeObserver","_renderExternal","_viewport","Viewport","_autoResizer","AutoResizer","_renderer","_createRenderer","_camera","_createCamera","_control","_createControl","_virtualManager","VirtualManager","prevVal","addPreventClickHandler","originalTrigger","_moveToInitialPanel","disableInput","plugin","includePanelHTML","visiblePanelsOnly","status","panelInfo","html","outerHTML","visibleOffset","panelIndex","newCameraPos","plugins","foundIndex","prevWidth","prevHeight","forceRenderAllPanels","updatePanelSize","updateAlignPos","sizeChanged","moveTypes","moveTypeStr","moveTypeOptions","JSON","stringify","SnapControl","FreeControl","StrictControl","cameraOption","console","warn","CircularCamera","BoundCamera","LinearCamera","_createExternalRenderer","_createVanillaRenderer","VanillaRenderer","VirtualRenderingStrategy","NormalRenderingStrategy","VanillaElementProvider","rendererOptions","initialPanel","Flicking","Component","withFlickingMethods","flickingName","getOwnPropertyNames","startsWith","descriptor","getOwnPropertyDescriptor","defineProperty","args","getterDescriptor","diffResult","endIdx_1","prevIdx_1","removedIdx","ordered","__read","prevIdx","newIdx","indexDiff","middlePanels","startIdx_1","prevIdx_2","addedIdx","startIdx","endIdx","elIdx","prevList","removedPanels","maintainedMap","maintained","current","list","firstPanelSize","cameraAlign","getCameraAlign","getPanelAlign","camPosition","Core","Constants","CFC","Utils"],"mappings":"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"}