import Flicking, { FlickingOptions } from "../Flicking";
import Panel from "../core/panel/Panel";
import AnchorPoint from "../core/AnchorPoint";
export interface CameraOptions {
    align: FlickingOptions["align"];
}
declare abstract class Camera {
    protected _align: FlickingOptions["align"];
    protected _flicking: Flicking | null;
    protected _el: HTMLElement;
    protected _transform: string;
    protected _position: number;
    protected _alignPos: number;
    protected _offset: number;
    protected _range: {
        min: number;
        max: number;
    };
    protected _visiblePanels: Panel[];
    protected _anchors: AnchorPoint[];
    protected _needPanelTriggered: {
        prev: boolean;
        next: boolean;
    };
    get element(): HTMLElement;
    get children(): HTMLElement[];
    get position(): number;
    get alignPosition(): number;
    get offset(): number;
    get range(): {
        min: number;
        max: number;
    };
    get rangeDiff(): number;
    get visiblePanels(): Panel[];
    get visibleRange(): {
        min: number;
        max: number;
    };
    get anchorPoints(): AnchorPoint[];
    get controlParams(): {
        range: {
            min: number;
            max: number;
        };
        position: number;
        circular: boolean;
    };
    get atEdge(): boolean;
    get size(): number;
    get progress(): number;
    get align(): FlickingOptions["align"];
    set align(val: FlickingOptions["align"]);
    constructor({ align }?: Partial<CameraOptions>);
    abstract updateRange(): this;
    init(flicking: Flicking): this;
    destroy(): this;
    lookAt(pos: number): void;
    getPrevAnchor(anchor: AnchorPoint): AnchorPoint | null;
    getNextAnchor(anchor: AnchorPoint): AnchorPoint | null;
    getProgressInPanel(panel: Panel): number;
    findAnchorIncludePosition(position: number): AnchorPoint | null;
    findNearestAnchor(position: number): AnchorPoint | null;
    findActiveAnchor(): AnchorPoint | null;
    clampToReachablePosition(position: number): number;
    canReach(panel: Panel): boolean;
    canSee(panel: Panel): boolean;
    updateAlignPos(): this;
    updateAnchors(): this;
    updateAdaptiveHeight(): void;
    updateOffset(): this;
    resetNeedPanelHistory(): this;
    applyTransform(): this;
    protected _resetInternalValues(): void;
    protected _refreshVisiblePanels(): void;
    protected _checkNeedPanel(): void;
    protected _checkReachEnd(prevPos: number, newPos: number): void;
    protected _checkTranslateSupport: () => void;
}
export default Camera;
