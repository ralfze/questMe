import { ObjectInterface } from "./types";
export declare function toArray(nodes: NodeList): HTMLElement[];
export declare function $(param: any, multi?: boolean): any;
export declare function requestAnimationFrame(fp: any): any;
export declare function cancelAnimationFrame(key: any): void;
export declare function map<T, U>(obj: ObjectInterface<T>, callback: (value: T, key: string) => U): ObjectInterface<U>;
export declare function filter<T>(obj: ObjectInterface<T>, callback: (value: T, key: string) => boolean): ObjectInterface<T>;
export declare function every<T>(obj: ObjectInterface<T>, callback: (value: T, key: string) => boolean): boolean;
export declare function equal(target: ObjectInterface, base: ObjectInterface): boolean;
export declare function roundNumber(num: number, roundUnit: number): any;
export declare function roundNumbers(num: ObjectInterface<number>, roundUnit: ObjectInterface<number> | number): Record<string | number, any>;
export declare function getDecimalPlace(val: number): number;
export declare function inversePow(n: number): number;
export declare function getRoundFunc(v: number): (n: number) => number;
