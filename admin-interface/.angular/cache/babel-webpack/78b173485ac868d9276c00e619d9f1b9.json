{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/DC8SunX53/Documents/VSCODE_Project_questMe/questme/admin-interface/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { KeycloakAuthGuard } from 'keycloak-angular';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"keycloak-angular\";\nexport class AuthGuard extends KeycloakAuthGuard {\n  constructor(router, keycloak) {\n    super(router, keycloak);\n    this.router = router;\n    this.keycloak = keycloak;\n  }\n\n  isAccessAllowed(route, state) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      // Force the user to log in if currently unauthenticated.\n      if (!_this.authenticated) {\n        yield _this.keycloak.login({\n          redirectUri: window.location.origin + state.url\n        });\n      } // Get the roles required from the route.\n\n\n      const requiredRoles = route.data['roles']; // Allow the user to to proceed if no additional roles are required to access the route.\n\n      if (!(requiredRoles instanceof Array) || requiredRoles.length === 0) {\n        return true;\n      } // Allow the user to proceed if all the required roles are present.\n\n\n      return requiredRoles.every(role => _this.roles.includes(role));\n    })();\n  }\n\n}\n\nAuthGuard.ɵfac = function AuthGuard_Factory(t) {\n  return new (t || AuthGuard)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.KeycloakService));\n};\n\nAuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthGuard,\n  factory: AuthGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Users/DC8SunX53/Documents/VSCODE_Project_questMe/questme/admin-interface/src/app/utility/app.guard.ts"],"names":["KeycloakAuthGuard","i0","i1","i2","AuthGuard","constructor","router","keycloak","isAccessAllowed","route","state","authenticated","login","redirectUri","window","location","origin","url","requiredRoles","data","Array","length","every","role","roles","includes","ɵfac","AuthGuard_Factory","t","ɵɵinject","Router","KeycloakService","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,SAASA,iBAAT,QAAkC,kBAAlC;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,iBAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,kBAApB;AACA,OAAO,MAAMC,SAAN,SAAwBJ,iBAAxB,CAA0C;AAC7CK,EAAAA,WAAW,CAACC,MAAD,EAASC,QAAT,EAAmB;AAC1B,UAAMD,MAAN,EAAcC,QAAd;AACA,SAAKD,MAAL,GAAcA,MAAd;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACH;;AACKC,EAAAA,eAAe,CAACC,KAAD,EAAQC,KAAR,EAAe;AAAA;;AAAA;AAChC;AACA,UAAI,CAAC,KAAI,CAACC,aAAV,EAAyB;AACrB,cAAM,KAAI,CAACJ,QAAL,CAAcK,KAAd,CAAoB;AACtBC,UAAAA,WAAW,EAAEC,MAAM,CAACC,QAAP,CAAgBC,MAAhB,GAAyBN,KAAK,CAACO;AADtB,SAApB,CAAN;AAGH,OAN+B,CAOhC;;;AACA,YAAMC,aAAa,GAAGT,KAAK,CAACU,IAAN,CAAW,OAAX,CAAtB,CARgC,CAShC;;AACA,UAAI,EAAED,aAAa,YAAYE,KAA3B,KAAqCF,aAAa,CAACG,MAAd,KAAyB,CAAlE,EAAqE;AACjE,eAAO,IAAP;AACH,OAZ+B,CAahC;;;AACA,aAAOH,aAAa,CAACI,KAAd,CAAqBC,IAAD,IAAU,KAAI,CAACC,KAAL,CAAWC,QAAX,CAAoBF,IAApB,CAA9B,CAAP;AAdgC;AAenC;;AArB4C;;AAuBjDnB,SAAS,CAACsB,IAAV,GAAiB,SAASC,iBAAT,CAA2BC,CAA3B,EAA8B;AAAE,SAAO,KAAKA,CAAC,IAAIxB,SAAV,EAAqBH,EAAE,CAAC4B,QAAH,CAAY3B,EAAE,CAAC4B,MAAf,CAArB,EAA6C7B,EAAE,CAAC4B,QAAH,CAAY1B,EAAE,CAAC4B,eAAf,CAA7C,CAAP;AAAuF,CAAxI;;AACA3B,SAAS,CAAC4B,KAAV,GAAkB,aAAc/B,EAAE,CAACgC,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAE9B,SAAT;AAAoB+B,EAAAA,OAAO,EAAE/B,SAAS,CAACsB,IAAvC;AAA6CU,EAAAA,UAAU,EAAE;AAAzD,CAAtB,CAAhC","sourcesContent":["import { KeycloakAuthGuard } from 'keycloak-angular';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/router\";\r\nimport * as i2 from \"keycloak-angular\";\r\nexport class AuthGuard extends KeycloakAuthGuard {\r\n    constructor(router, keycloak) {\r\n        super(router, keycloak);\r\n        this.router = router;\r\n        this.keycloak = keycloak;\r\n    }\r\n    async isAccessAllowed(route, state) {\r\n        // Force the user to log in if currently unauthenticated.\r\n        if (!this.authenticated) {\r\n            await this.keycloak.login({\r\n                redirectUri: window.location.origin + state.url,\r\n            });\r\n        }\r\n        // Get the roles required from the route.\r\n        const requiredRoles = route.data['roles'];\r\n        // Allow the user to to proceed if no additional roles are required to access the route.\r\n        if (!(requiredRoles instanceof Array) || requiredRoles.length === 0) {\r\n            return true;\r\n        }\r\n        // Allow the user to proceed if all the required roles are present.\r\n        return requiredRoles.every((role) => this.roles.includes(role));\r\n    }\r\n}\r\nAuthGuard.ɵfac = function AuthGuard_Factory(t) { return new (t || AuthGuard)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.KeycloakService)); };\r\nAuthGuard.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AuthGuard, factory: AuthGuard.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}