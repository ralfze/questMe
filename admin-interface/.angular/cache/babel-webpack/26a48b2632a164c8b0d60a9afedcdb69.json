{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, inject, EventEmitter, Injectable, Optional, Inject, Directive, Output, Input, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * Injection token used to inject the document into Directionality.\r\n * This is used so that the value can be faked in tests.\r\n *\r\n * We can't use the real document in tests because changing the real `dir` causes geometry-based\r\n * tests in Safari to fail.\r\n *\r\n * We also can't re-provide the DOCUMENT token from platform-brower because the unit tests\r\n * themselves use things like `querySelector` in test code.\r\n *\r\n * This token is defined in a separate file from Directionality as a workaround for\r\n * https://github.com/angular/angular/issues/22559\r\n *\r\n * @docs-private\r\n */\n\nconst DIR_DOCUMENT = new InjectionToken('cdk-dir-doc', {\n  providedIn: 'root',\n  factory: DIR_DOCUMENT_FACTORY\n});\n/** @docs-private */\n\nfunction DIR_DOCUMENT_FACTORY() {\n  return inject(DOCUMENT);\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * The directionality (LTR / RTL) context for the application (or a subtree of it).\r\n * Exposes the current direction and a stream of direction changes.\r\n */\n\n\nclass Directionality {\n  constructor(_document) {\n    /** The current 'ltr' or 'rtl' value. */\n    this.value = 'ltr';\n    /** Stream that emits whenever the 'ltr' / 'rtl' state changes. */\n\n    this.change = new EventEmitter();\n\n    if (_document) {\n      // TODO: handle 'auto' value -\n      // We still need to account for dir=\"auto\".\n      // It looks like HTMLElemenet.dir is also \"auto\" when that's set to the attribute,\n      // but getComputedStyle return either \"ltr\" or \"rtl\". avoiding getComputedStyle for now\n      const bodyDir = _document.body ? _document.body.dir : null;\n      const htmlDir = _document.documentElement ? _document.documentElement.dir : null;\n      const value = bodyDir || htmlDir;\n      this.value = value === 'ltr' || value === 'rtl' ? value : 'ltr';\n    }\n  }\n\n  ngOnDestroy() {\n    this.change.complete();\n  }\n\n}\n\nDirectionality.ɵfac = function Directionality_Factory(t) {\n  return new (t || Directionality)(i0.ɵɵinject(DIR_DOCUMENT, 8));\n};\n\nDirectionality.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: Directionality,\n  factory: Directionality.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(Directionality, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DIR_DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * Directive to listen for changes of direction of part of the DOM.\r\n *\r\n * Provides itself as Directionality such that descendant directives only need to ever inject\r\n * Directionality to get the closest direction.\r\n */\n\n\nclass Dir {\n  constructor() {\n    /** Normalized direction that accounts for invalid/unsupported values. */\n    this._dir = 'ltr';\n    /** Whether the `value` has been set to its initial value. */\n\n    this._isInitialized = false;\n    /** Event emitted when the direction changes. */\n\n    this.change = new EventEmitter();\n  }\n  /** @docs-private */\n\n\n  get dir() {\n    return this._dir;\n  }\n\n  set dir(value) {\n    const old = this._dir;\n    const normalizedValue = value ? value.toLowerCase() : value;\n    this._rawDir = value;\n    this._dir = normalizedValue === 'ltr' || normalizedValue === 'rtl' ? normalizedValue : 'ltr';\n\n    if (old !== this._dir && this._isInitialized) {\n      this.change.emit(this._dir);\n    }\n  }\n  /** Current layout direction of the element. */\n\n\n  get value() {\n    return this.dir;\n  }\n  /** Initialize once default value has been set. */\n\n\n  ngAfterContentInit() {\n    this._isInitialized = true;\n  }\n\n  ngOnDestroy() {\n    this.change.complete();\n  }\n\n}\n\nDir.ɵfac = function Dir_Factory(t) {\n  return new (t || Dir)();\n};\n\nDir.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: Dir,\n  selectors: [[\"\", \"dir\", \"\"]],\n  hostVars: 1,\n  hostBindings: function Dir_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵattribute(\"dir\", ctx._rawDir);\n    }\n  },\n  inputs: {\n    dir: \"dir\"\n  },\n  outputs: {\n    change: \"dirChange\"\n  },\n  exportAs: [\"dir\"],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: Directionality,\n    useExisting: Dir\n  }])]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(Dir, [{\n    type: Directive,\n    args: [{\n      selector: '[dir]',\n      providers: [{\n        provide: Directionality,\n        useExisting: Dir\n      }],\n      host: {\n        '[attr.dir]': '_rawDir'\n      },\n      exportAs: 'dir'\n    }]\n  }], null, {\n    change: [{\n      type: Output,\n      args: ['dirChange']\n    }],\n    dir: [{\n      type: Input\n    }]\n  });\n})();\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nclass BidiModule {}\n\nBidiModule.ɵfac = function BidiModule_Factory(t) {\n  return new (t || BidiModule)();\n};\n\nBidiModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: BidiModule\n});\nBidiModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BidiModule, [{\n    type: NgModule,\n    args: [{\n      exports: [Dir],\n      declarations: [Dir]\n    }]\n  }], null, null);\n})();\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { BidiModule, DIR_DOCUMENT, Dir, Directionality };","map":{"version":3,"sources":["C:/Users/DC8SunX53/Documents/VSCODE_Project_questMe/questme/admin-interface/node_modules/@angular/cdk/fesm2020/bidi.mjs"],"names":["i0","InjectionToken","inject","EventEmitter","Injectable","Optional","Inject","Directive","Output","Input","NgModule","DOCUMENT","DIR_DOCUMENT","providedIn","factory","DIR_DOCUMENT_FACTORY","Directionality","constructor","_document","value","change","bodyDir","body","dir","htmlDir","documentElement","ngOnDestroy","complete","ɵfac","ɵprov","type","args","undefined","decorators","Dir","_dir","_isInitialized","old","normalizedValue","toLowerCase","_rawDir","emit","ngAfterContentInit","ɵdir","provide","useExisting","selector","providers","host","exportAs","BidiModule","ɵmod","ɵinj","exports","declarations"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\r\nimport { InjectionToken, inject, EventEmitter, Injectable, Optional, Inject, Directive, Output, Input, NgModule } from '@angular/core';\r\nimport { DOCUMENT } from '@angular/common';\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Injection token used to inject the document into Directionality.\r\n * This is used so that the value can be faked in tests.\r\n *\r\n * We can't use the real document in tests because changing the real `dir` causes geometry-based\r\n * tests in Safari to fail.\r\n *\r\n * We also can't re-provide the DOCUMENT token from platform-brower because the unit tests\r\n * themselves use things like `querySelector` in test code.\r\n *\r\n * This token is defined in a separate file from Directionality as a workaround for\r\n * https://github.com/angular/angular/issues/22559\r\n *\r\n * @docs-private\r\n */\r\nconst DIR_DOCUMENT = new InjectionToken('cdk-dir-doc', {\r\n    providedIn: 'root',\r\n    factory: DIR_DOCUMENT_FACTORY,\r\n});\r\n/** @docs-private */\r\nfunction DIR_DOCUMENT_FACTORY() {\r\n    return inject(DOCUMENT);\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * The directionality (LTR / RTL) context for the application (or a subtree of it).\r\n * Exposes the current direction and a stream of direction changes.\r\n */\r\nclass Directionality {\r\n    constructor(_document) {\r\n        /** The current 'ltr' or 'rtl' value. */\r\n        this.value = 'ltr';\r\n        /** Stream that emits whenever the 'ltr' / 'rtl' state changes. */\r\n        this.change = new EventEmitter();\r\n        if (_document) {\r\n            // TODO: handle 'auto' value -\r\n            // We still need to account for dir=\"auto\".\r\n            // It looks like HTMLElemenet.dir is also \"auto\" when that's set to the attribute,\r\n            // but getComputedStyle return either \"ltr\" or \"rtl\". avoiding getComputedStyle for now\r\n            const bodyDir = _document.body ? _document.body.dir : null;\r\n            const htmlDir = _document.documentElement ? _document.documentElement.dir : null;\r\n            const value = bodyDir || htmlDir;\r\n            this.value = value === 'ltr' || value === 'rtl' ? value : 'ltr';\r\n        }\r\n    }\r\n    ngOnDestroy() {\r\n        this.change.complete();\r\n    }\r\n}\r\nDirectionality.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: Directionality, deps: [{ token: DIR_DOCUMENT, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\r\nDirectionality.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: Directionality, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: Directionality, decorators: [{\r\n            type: Injectable,\r\n            args: [{ providedIn: 'root' }]\r\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [DIR_DOCUMENT]\r\n                }] }]; } });\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Directive to listen for changes of direction of part of the DOM.\r\n *\r\n * Provides itself as Directionality such that descendant directives only need to ever inject\r\n * Directionality to get the closest direction.\r\n */\r\nclass Dir {\r\n    constructor() {\r\n        /** Normalized direction that accounts for invalid/unsupported values. */\r\n        this._dir = 'ltr';\r\n        /** Whether the `value` has been set to its initial value. */\r\n        this._isInitialized = false;\r\n        /** Event emitted when the direction changes. */\r\n        this.change = new EventEmitter();\r\n    }\r\n    /** @docs-private */\r\n    get dir() {\r\n        return this._dir;\r\n    }\r\n    set dir(value) {\r\n        const old = this._dir;\r\n        const normalizedValue = value ? value.toLowerCase() : value;\r\n        this._rawDir = value;\r\n        this._dir = normalizedValue === 'ltr' || normalizedValue === 'rtl' ? normalizedValue : 'ltr';\r\n        if (old !== this._dir && this._isInitialized) {\r\n            this.change.emit(this._dir);\r\n        }\r\n    }\r\n    /** Current layout direction of the element. */\r\n    get value() {\r\n        return this.dir;\r\n    }\r\n    /** Initialize once default value has been set. */\r\n    ngAfterContentInit() {\r\n        this._isInitialized = true;\r\n    }\r\n    ngOnDestroy() {\r\n        this.change.complete();\r\n    }\r\n}\r\nDir.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: Dir, deps: [], target: i0.ɵɵFactoryTarget.Directive });\r\nDir.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.1\", type: Dir, selector: \"[dir]\", inputs: { dir: \"dir\" }, outputs: { change: \"dirChange\" }, host: { properties: { \"attr.dir\": \"_rawDir\" } }, providers: [{ provide: Directionality, useExisting: Dir }], exportAs: [\"dir\"], ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: Dir, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: '[dir]',\r\n                    providers: [{ provide: Directionality, useExisting: Dir }],\r\n                    host: { '[attr.dir]': '_rawDir' },\r\n                    exportAs: 'dir',\r\n                }]\r\n        }], propDecorators: { change: [{\r\n                type: Output,\r\n                args: ['dirChange']\r\n            }], dir: [{\r\n                type: Input\r\n            }] } });\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nclass BidiModule {\r\n}\r\nBidiModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: BidiModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\nBidiModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: BidiModule, declarations: [Dir], exports: [Dir] });\r\nBidiModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: BidiModule });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: BidiModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    exports: [Dir],\r\n                    declarations: [Dir],\r\n                }]\r\n        }] });\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { BidiModule, DIR_DOCUMENT, Dir, Directionality };\r\n\n"]},"metadata":{},"sourceType":"module"}