{"ast":null,"code":"import { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty, coerceStringArray } from '@angular/cdk/coercion';\nimport * as i1 from '@angular/cdk/platform';\nimport { _getEventTarget } from '@angular/cdk/platform';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, EventEmitter, TemplateRef, Directive, Inject, ViewChild, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ContentChildren, forwardRef, Optional, Host, NgModule } from '@angular/core';\nimport { mixinDisableRipple, MAT_OPTION_PARENT_COMPONENT, MAT_OPTGROUP, MatOption, MatOptionSelectionChange, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport { Subscription, Subject, defer, merge, of, fromEvent } from 'rxjs';\nimport * as i2 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i1$1 from '@angular/cdk/overlay';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport * as i3 from '@angular/cdk/scrolling';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport * as i2$1 from '@angular/cdk/bidi';\nimport { ESCAPE, hasModifierKey, ENTER, UP_ARROW, DOWN_ARROW, TAB } from '@angular/cdk/keycodes';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport * as i4 from '@angular/material/form-field';\nimport { MAT_FORM_FIELD } from '@angular/material/form-field';\nimport { take, switchMap, filter, map, tap, delay } from 'rxjs/operators';\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\r\n * the component definition.\r\n */\n\nconst _c0 = [\"panel\"];\n\nfunction MatAutocomplete_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 0, 1);\n    i0.ɵɵprojection(2);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const formFieldId_r1 = ctx.id;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"id\", ctx_r0.id)(\"ngClass\", ctx_r0._classList);\n    i0.ɵɵattribute(\"aria-label\", ctx_r0.ariaLabel || null)(\"aria-labelledby\", ctx_r0._getPanelAriaLabelledby(formFieldId_r1));\n  }\n}\n\nconst _c1 = [\"*\"];\nlet _uniqueAutocompleteIdCounter = 0;\n/** Event object that is emitted when an autocomplete option is selected. */\n\nclass MatAutocompleteSelectedEvent {\n  constructor(\n  /** Reference to the autocomplete panel that emitted the event. */\n  source,\n  /** Option that was selected. */\n  option) {\n    this.source = source;\n    this.option = option;\n  }\n\n} // Boilerplate for applying mixins to MatAutocomplete.\n\n/** @docs-private */\n\n\nconst _MatAutocompleteMixinBase = mixinDisableRipple(class {});\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\n\n\nconst MAT_AUTOCOMPLETE_DEFAULT_OPTIONS = new InjectionToken('mat-autocomplete-default-options', {\n  providedIn: 'root',\n  factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY\n});\n/** @docs-private */\n\nfunction MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY() {\n  return {\n    autoActiveFirstOption: false\n  };\n}\n/** Base class with all of the `MatAutocomplete` functionality. */\n\n\nclass _MatAutocompleteBase extends _MatAutocompleteMixinBase {\n  constructor(_changeDetectorRef, _elementRef, defaults, platform) {\n    super();\n    this._changeDetectorRef = _changeDetectorRef;\n    this._elementRef = _elementRef;\n    this._activeOptionChanges = Subscription.EMPTY;\n    /** Whether the autocomplete panel should be visible, depending on option length. */\n\n    this.showPanel = false;\n    this._isOpen = false;\n    /** Function that maps an option's control value to its display value in the trigger. */\n\n    this.displayWith = null;\n    /** Event that is emitted whenever an option from the list is selected. */\n\n    this.optionSelected = new EventEmitter();\n    /** Event that is emitted when the autocomplete panel is opened. */\n\n    this.opened = new EventEmitter();\n    /** Event that is emitted when the autocomplete panel is closed. */\n\n    this.closed = new EventEmitter();\n    /** Emits whenever an option is activated using the keyboard. */\n\n    this.optionActivated = new EventEmitter();\n    this._classList = {};\n    /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n\n    this.id = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`; // TODO(crisbeto): the problem that the `inertGroups` option resolves is only present on\n    // Safari using VoiceOver. We should occasionally check back to see whether the bug\n    // wasn't resolved in VoiceOver, and if it has, we can remove this and the `inertGroups`\n    // option altogether.\n\n    this.inertGroups = platform?.SAFARI || false;\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n  /** Whether the autocomplete panel is open. */\n\n\n  get isOpen() {\n    return this._isOpen && this.showPanel;\n  }\n  /**\r\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\r\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\r\n   */\n\n\n  get autoActiveFirstOption() {\n    return this._autoActiveFirstOption;\n  }\n\n  set autoActiveFirstOption(value) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  /**\r\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\r\n   * inside the overlay container to allow for easy styling.\r\n   */\n\n\n  set classList(value) {\n    if (value && value.length) {\n      this._classList = coerceStringArray(value).reduce((classList, className) => {\n        classList[className] = true;\n        return classList;\n      }, {});\n    } else {\n      this._classList = {};\n    }\n\n    this._setVisibilityClasses(this._classList);\n\n    this._elementRef.nativeElement.className = '';\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager(this.options).withWrap();\n    this._activeOptionChanges = this._keyManager.change.subscribe(index => {\n      if (this.isOpen) {\n        this.optionActivated.emit({\n          source: this,\n          option: this.options.toArray()[index] || null\n        });\n      }\n    }); // Set the initial visibility state.\n\n    this._setVisibility();\n  }\n\n  ngOnDestroy() {\n    this._activeOptionChanges.unsubscribe();\n  }\n  /**\r\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\r\n   * above or below the fold, as they are not actually being focused when active.\r\n   */\n\n\n  _setScrollTop(scrollTop) {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n  /** Returns the panel's scrollTop. */\n\n\n  _getScrollTop() {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n  /** Panel should hide itself when the option list is empty. */\n\n\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n\n    this._setVisibilityClasses(this._classList);\n\n    this._changeDetectorRef.markForCheck();\n  }\n  /** Emits the `select` event. */\n\n\n  _emitSelectEvent(option) {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n  /** Gets the aria-labelledby for the autocomplete panel. */\n\n\n  _getPanelAriaLabelledby(labelId) {\n    if (this.ariaLabel) {\n      return null;\n    }\n\n    const labelExpression = labelId ? labelId + ' ' : '';\n    return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\n  }\n  /** Sets the autocomplete visibility classes on a classlist based on the panel is visible. */\n\n\n  _setVisibilityClasses(classList) {\n    classList[this._visibleClass] = this.showPanel;\n    classList[this._hiddenClass] = !this.showPanel;\n  }\n\n}\n\n_MatAutocompleteBase.ɵfac = function _MatAutocompleteBase_Factory(t) {\n  return new (t || _MatAutocompleteBase)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS), i0.ɵɵdirectiveInject(i1.Platform));\n};\n\n_MatAutocompleteBase.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: _MatAutocompleteBase,\n  viewQuery: function _MatAutocompleteBase_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(TemplateRef, 7);\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.template = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.panel = _t.first);\n    }\n  },\n  inputs: {\n    ariaLabel: [\"aria-label\", \"ariaLabel\"],\n    ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"],\n    displayWith: \"displayWith\",\n    autoActiveFirstOption: \"autoActiveFirstOption\",\n    panelWidth: \"panelWidth\",\n    classList: [\"class\", \"classList\"]\n  },\n  outputs: {\n    optionSelected: \"optionSelected\",\n    opened: \"opened\",\n    closed: \"closed\",\n    optionActivated: \"optionActivated\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(_MatAutocompleteBase, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\n      }]\n    }, {\n      type: i1.Platform\n    }];\n  }, {\n    template: [{\n      type: ViewChild,\n      args: [TemplateRef, {\n        static: true\n      }]\n    }],\n    panel: [{\n      type: ViewChild,\n      args: ['panel']\n    }],\n    ariaLabel: [{\n      type: Input,\n      args: ['aria-label']\n    }],\n    ariaLabelledby: [{\n      type: Input,\n      args: ['aria-labelledby']\n    }],\n    displayWith: [{\n      type: Input\n    }],\n    autoActiveFirstOption: [{\n      type: Input\n    }],\n    panelWidth: [{\n      type: Input\n    }],\n    optionSelected: [{\n      type: Output\n    }],\n    opened: [{\n      type: Output\n    }],\n    closed: [{\n      type: Output\n    }],\n    optionActivated: [{\n      type: Output\n    }],\n    classList: [{\n      type: Input,\n      args: ['class']\n    }]\n  });\n})();\n\nclass MatAutocomplete extends _MatAutocompleteBase {\n  constructor() {\n    super(...arguments);\n    this._visibleClass = 'mat-autocomplete-visible';\n    this._hiddenClass = 'mat-autocomplete-hidden';\n  }\n\n}\n\nMatAutocomplete.ɵfac = /* @__PURE__ */function () {\n  let ɵMatAutocomplete_BaseFactory;\n  return function MatAutocomplete_Factory(t) {\n    return (ɵMatAutocomplete_BaseFactory || (ɵMatAutocomplete_BaseFactory = i0.ɵɵgetInheritedFactory(MatAutocomplete)))(t || MatAutocomplete);\n  };\n}();\n\nMatAutocomplete.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MatAutocomplete,\n  selectors: [[\"mat-autocomplete\"]],\n  contentQueries: function MatAutocomplete_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, MAT_OPTGROUP, 5);\n      i0.ɵɵcontentQuery(dirIndex, MatOption, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.optionGroups = _t);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.options = _t);\n    }\n  },\n  hostAttrs: [1, \"mat-autocomplete\"],\n  inputs: {\n    disableRipple: \"disableRipple\"\n  },\n  exportAs: [\"matAutocomplete\"],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: MAT_OPTION_PARENT_COMPONENT,\n    useExisting: MatAutocomplete\n  }]), i0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c1,\n  decls: 1,\n  vars: 0,\n  consts: [[\"role\", \"listbox\", 1, \"mat-autocomplete-panel\", 3, \"id\", \"ngClass\"], [\"panel\", \"\"]],\n  template: function MatAutocomplete_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵtemplate(0, MatAutocomplete_ng_template_0_Template, 3, 4, \"ng-template\");\n    }\n  },\n  directives: [i2.NgClass],\n  styles: [\".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}.cdk-high-contrast-active .mat-autocomplete-panel{outline:solid 1px}mat-autocomplete{display:none}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatAutocomplete, [{\n    type: Component,\n    args: [{\n      selector: 'mat-autocomplete',\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      exportAs: 'matAutocomplete',\n      inputs: ['disableRipple'],\n      host: {\n        'class': 'mat-autocomplete'\n      },\n      providers: [{\n        provide: MAT_OPTION_PARENT_COMPONENT,\n        useExisting: MatAutocomplete\n      }],\n      template: \"<ng-template let-formFieldId=\\\"id\\\">\\n  <div class=\\\"mat-autocomplete-panel\\\"\\n       role=\\\"listbox\\\"\\n       [id]=\\\"id\\\"\\n       [attr.aria-label]=\\\"ariaLabel || null\\\"\\n       [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby(formFieldId)\\\"\\n       [ngClass]=\\\"_classList\\\"\\n       #panel>\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\",\n      styles: [\".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}.cdk-high-contrast-active .mat-autocomplete-panel{outline:solid 1px}mat-autocomplete{display:none}\\n\"]\n    }]\n  }], null, {\n    optionGroups: [{\n      type: ContentChildren,\n      args: [MAT_OPTGROUP, {\n        descendants: true\n      }]\n    }],\n    options: [{\n      type: ContentChildren,\n      args: [MatOption, {\n        descendants: true\n      }]\n    }]\n  });\n})();\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/** Base class containing all of the functionality for `MatAutocompleteOrigin`. */\n\n\nclass _MatAutocompleteOriginBase {\n  constructor(\n  /** Reference to the element on which the directive is applied. */\n  elementRef) {\n    this.elementRef = elementRef;\n  }\n\n}\n\n_MatAutocompleteOriginBase.ɵfac = function _MatAutocompleteOriginBase_Factory(t) {\n  return new (t || _MatAutocompleteOriginBase)(i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n\n_MatAutocompleteOriginBase.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: _MatAutocompleteOriginBase\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(_MatAutocompleteOriginBase, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }];\n  }, null);\n})();\n/**\r\n * Directive applied to an element to make it usable\r\n * as a connection point for an autocomplete panel.\r\n */\n\n\nclass MatAutocompleteOrigin extends _MatAutocompleteOriginBase {}\n\nMatAutocompleteOrigin.ɵfac = /* @__PURE__ */function () {\n  let ɵMatAutocompleteOrigin_BaseFactory;\n  return function MatAutocompleteOrigin_Factory(t) {\n    return (ɵMatAutocompleteOrigin_BaseFactory || (ɵMatAutocompleteOrigin_BaseFactory = i0.ɵɵgetInheritedFactory(MatAutocompleteOrigin)))(t || MatAutocompleteOrigin);\n  };\n}();\n\nMatAutocompleteOrigin.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatAutocompleteOrigin,\n  selectors: [[\"\", \"matAutocompleteOrigin\", \"\"]],\n  exportAs: [\"matAutocompleteOrigin\"],\n  features: [i0.ɵɵInheritDefinitionFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatAutocompleteOrigin, [{\n    type: Directive,\n    args: [{\n      selector: '[matAutocompleteOrigin]',\n      exportAs: 'matAutocompleteOrigin'\n    }]\n  }], null, null);\n})();\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\n\n\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY = new InjectionToken('mat-autocomplete-scroll-strategy');\n/** @docs-private */\n\nfunction MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay) {\n  return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\n\n\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY\n};\n/**\r\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\r\n * @docs-private\r\n */\n\nconst MAT_AUTOCOMPLETE_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n/**\r\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\r\n * @docs-private\r\n */\n\nfunction getMatAutocompleteMissingPanelError() {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' + 'Make sure that the id passed to the `matAutocomplete` is correct and that ' + \"you're attempting to open it after the ngAfterContentInit hook.\");\n}\n/** Base class with all of the `MatAutocompleteTrigger` functionality. */\n\n\nclass _MatAutocompleteTriggerBase {\n  constructor(_element, _overlay, _viewContainerRef, _zone, _changeDetectorRef, scrollStrategy, _dir, _formField, _document, _viewportRuler, _defaults) {\n    this._element = _element;\n    this._overlay = _overlay;\n    this._viewContainerRef = _viewContainerRef;\n    this._zone = _zone;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._dir = _dir;\n    this._formField = _formField;\n    this._document = _document;\n    this._viewportRuler = _viewportRuler;\n    this._defaults = _defaults;\n    this._componentDestroyed = false;\n    this._autocompleteDisabled = false;\n    /** Whether or not the label state is being overridden. */\n\n    this._manuallyFloatingLabel = false;\n    /** Subscription to viewport size changes. */\n\n    this._viewportSubscription = Subscription.EMPTY;\n    /**\r\n     * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\r\n     * closed autocomplete from being reopened if the user switches to another browser tab and then\r\n     * comes back.\r\n     */\n\n    this._canOpenOnNextFocus = true;\n    /** Stream of keyboard events that can close the panel. */\n\n    this._closeKeyEventStream = new Subject();\n    /**\r\n     * Event handler for when the window is blurred. Needs to be an\r\n     * arrow function in order to preserve the context.\r\n     */\n\n    this._windowBlurHandler = () => {\n      // If the user blurred the window while the autocomplete is focused, it means that it'll be\n      // refocused when they come back. In this case we want to skip the first focus event, if the\n      // pane was closed, in order to avoid reopening it unintentionally.\n      this._canOpenOnNextFocus = this._document.activeElement !== this._element.nativeElement || this.panelOpen;\n    };\n    /** `View -> model callback called when value changes` */\n\n\n    this._onChange = () => {};\n    /** `View -> model callback called when autocomplete has been touched` */\n\n\n    this._onTouched = () => {};\n    /**\r\n     * Position of the autocomplete panel relative to the trigger element. A position of `auto`\r\n     * will render the panel underneath the trigger if there is enough space for it to fit in\r\n     * the viewport, otherwise the panel will be shown above it. If the position is set to\r\n     * `above` or `below`, the panel will always be shown above or below the trigger. no matter\r\n     * whether it fits completely in the viewport.\r\n     */\n\n\n    this.position = 'auto';\n    /**\r\n     * `autocomplete` attribute to be set on the input element.\r\n     * @docs-private\r\n     */\n\n    this.autocompleteAttribute = 'off';\n    this._overlayAttached = false;\n    /** Stream of autocomplete option selections. */\n\n    this.optionSelections = defer(() => {\n      if (this.autocomplete && this.autocomplete.options) {\n        return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n      } // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n      // Return a stream that we'll replace with the real one once everything is in place.\n\n\n      return this._zone.onStable.pipe(take(1), switchMap(() => this.optionSelections));\n    });\n    this._scrollStrategy = scrollStrategy;\n  }\n  /**\r\n   * Whether the autocomplete is disabled. When disabled, the element will\r\n   * act as a regular input and the user won't be able to open the panel.\r\n   */\n\n\n  get autocompleteDisabled() {\n    return this._autocompleteDisabled;\n  }\n\n  set autocompleteDisabled(value) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  ngAfterViewInit() {\n    const window = this._getWindow();\n\n    if (typeof window !== 'undefined') {\n      this._zone.runOutsideAngular(() => window.addEventListener('blur', this._windowBlurHandler));\n    }\n  }\n\n  ngOnChanges(changes) {\n    if (changes['position'] && this._positionStrategy) {\n      this._setStrategyPositions(this._positionStrategy);\n\n      if (this.panelOpen) {\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    const window = this._getWindow();\n\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('blur', this._windowBlurHandler);\n    }\n\n    this._viewportSubscription.unsubscribe();\n\n    this._componentDestroyed = true;\n\n    this._destroyPanel();\n\n    this._closeKeyEventStream.complete();\n  }\n  /** Whether or not the autocomplete panel is open. */\n\n\n  get panelOpen() {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  /** Opens the autocomplete suggestion panel. */\n\n\n  openPanel() {\n    this._attachOverlay();\n\n    this._floatLabel();\n  }\n  /** Closes the autocomplete suggestion panel. */\n\n\n  closePanel() {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n\n      this._closingActionsSubscription.unsubscribe();\n    } // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n\n\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n  /**\r\n   * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\r\n   * within the viewport.\r\n   */\n\n\n  updatePosition() {\n    if (this._overlayAttached) {\n      this._overlayRef.updatePosition();\n    }\n  }\n  /**\r\n   * A stream of actions that should close the autocomplete panel, including\r\n   * when an option is selected, on blur, and when TAB is pressed.\r\n   */\n\n\n  get panelClosingActions() {\n    return merge(this.optionSelections, this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)), this._closeKeyEventStream, this._getOutsideClickStream(), this._overlayRef ? this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) : of()).pipe( // Normalize the output so we return a consistent type.\n    map(event => event instanceof MatOptionSelectionChange ? event : null));\n  }\n  /** The currently active option, coerced to MatOption type. */\n\n\n  get activeOption() {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n  /** Stream of clicks outside of the autocomplete panel. */\n\n\n  _getOutsideClickStream() {\n    return merge(fromEvent(this._document, 'click'), fromEvent(this._document, 'auxclick'), fromEvent(this._document, 'touchend')).pipe(filter(event => {\n      // If we're in the Shadow DOM, the event target will be the shadow root, so we have to\n      // fall back to check the first element in the path of the click event.\n      const clickTarget = _getEventTarget(event);\n\n      const formField = this._formField ? this._formField._elementRef.nativeElement : null;\n      const customOrigin = this.connectedTo ? this.connectedTo.elementRef.nativeElement : null;\n      return this._overlayAttached && clickTarget !== this._element.nativeElement && (!formField || !formField.contains(clickTarget)) && (!customOrigin || !customOrigin.contains(clickTarget)) && !!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget);\n    }));\n  } // Implemented as part of ControlValueAccessor.\n\n\n  writeValue(value) {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  } // Implemented as part of ControlValueAccessor.\n\n\n  registerOnChange(fn) {\n    this._onChange = fn;\n  } // Implemented as part of ControlValueAccessor.\n\n\n  registerOnTouched(fn) {\n    this._onTouched = fn;\n  } // Implemented as part of ControlValueAccessor.\n\n\n  setDisabledState(isDisabled) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event) {\n    const keyCode = event.keyCode; // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n\n    if (keyCode === ESCAPE && !hasModifierKey(event)) {\n      event.preventDefault();\n    }\n\n    if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n\n      this._resetActiveItem();\n\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption(this.autocomplete._keyManager.activeItemIndex || 0);\n      }\n    }\n  }\n\n  _handleInput(event) {\n    let target = event.target;\n    let value = target.value; // Based on `NumberValueAccessor` from forms.\n\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    } // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n\n\n    if (this._previousValue !== value) {\n      this._previousValue = value;\n\n      this._onChange(value);\n\n      if (this._canOpen() && this._document.activeElement === event.target) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus() {\n    if (!this._canOpenOnNextFocus) {\n      this._canOpenOnNextFocus = true;\n    } else if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n\n      this._attachOverlay();\n\n      this._floatLabel(true);\n    }\n  }\n  /**\r\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\r\n   * This causes the value to jump when selecting an option with the mouse.\r\n   * This method manually floats the label until the panel can be closed.\r\n   * @param shouldAnimate Whether the label should be animated when it is floated.\r\n   */\n\n\n  _floatLabel(shouldAnimate = false) {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n  /** If the label has been manually elevated, return it to its normal state. */\n\n\n  _resetLabel() {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n  /**\r\n   * This method listens to a stream of panel closing actions and resets the\r\n   * stream every time the option list changes.\r\n   */\n\n\n  _subscribeToClosingActions() {\n    const firstStable = this._zone.onStable.pipe(take(1));\n\n    const optionChanges = this.autocomplete.options.changes.pipe(tap(() => this._positionStrategy.reapplyLastPosition()), // Defer emitting to the stream until the next tick, because changing\n    // bindings in here will cause \"changed after checked\" errors.\n    delay(0)); // When the zone is stable initially, and when the option list changes...\n\n    return merge(firstStable, optionChanges).pipe( // create a new stream of panelClosingActions, replacing any previous streams\n    // that were created, and flatten it so our stream only emits closing events...\n    switchMap(() => {\n      const wasOpen = this.panelOpen;\n\n      this._resetActiveItem();\n\n      this.autocomplete._setVisibility();\n\n      if (this.panelOpen) {\n        this._overlayRef.updatePosition(); // If the `panelOpen` state changed, we need to make sure to emit the `opened`\n        // event, because we may not have emitted it when the panel was attached. This\n        // can happen if the users opens the panel and there are no options, but the\n        // options come in slightly later or as a result of the value changing.\n\n\n        if (wasOpen !== this.panelOpen) {\n          this.autocomplete.opened.emit();\n        }\n      }\n\n      return this.panelClosingActions;\n    }), // when the first closing event occurs...\n    take(1)) // set the value, close the panel, and complete.\n    .subscribe(event => this._setValueAndClose(event));\n  }\n  /** Destroys the autocomplete suggestion panel. */\n\n\n  _destroyPanel() {\n    if (this._overlayRef) {\n      this.closePanel();\n\n      this._overlayRef.dispose();\n\n      this._overlayRef = null;\n    }\n  }\n\n  _setTriggerValue(value) {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ? this.autocomplete.displayWith(value) : value; // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n\n    const inputValue = toDisplay != null ? toDisplay : ''; // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n\n    this._previousValue = inputValue;\n  }\n  /**\r\n   * This method closes the panel, and if a value is specified, also sets the associated\r\n   * control to that value. It will also mark the control as dirty if this interaction\r\n   * stemmed from the user.\r\n   */\n\n\n  _setValueAndClose(event) {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n\n      this._setTriggerValue(event.source.value);\n\n      this._onChange(event.source.value);\n\n      this._element.nativeElement.focus();\n\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n  /**\r\n   * Clear any previous selected option and emit a selection change event for this option\r\n   */\n\n\n  _clearPreviousSelectedOption(skip) {\n    this.autocomplete.options.forEach(option => {\n      if (option !== skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  _attachOverlay() {\n    if (!this.autocomplete && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    let overlayRef = this._overlayRef;\n\n    if (!overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef, {\n        id: this._formField?.getLabelId()\n      });\n      overlayRef = this._overlay.create(this._getOverlayConfig());\n      this._overlayRef = overlayRef; // Use the `keydownEvents` in order to take advantage of\n      // the overlay event targeting provided by the CDK overlay.\n\n      overlayRef.keydownEvents().subscribe(event => {\n        // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n        // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n        if (event.keyCode === ESCAPE && !hasModifierKey(event) || event.keyCode === UP_ARROW && hasModifierKey(event, 'altKey')) {\n          this._closeKeyEventStream.next();\n\n          this._resetActiveItem(); // We need to stop propagation, otherwise the event will eventually\n          // reach the input itself and cause the overlay to be reopened.\n\n\n          event.stopPropagation();\n          event.preventDefault();\n        }\n      });\n      this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n        if (this.panelOpen && overlayRef) {\n          overlayRef.updateSize({\n            width: this._getPanelWidth()\n          });\n        }\n      });\n    } else {\n      // Update the trigger, panel width and direction, in case anything has changed.\n      this._positionStrategy.setOrigin(this._getConnectedElement());\n\n      overlayRef.updateSize({\n        width: this._getPanelWidth()\n      });\n    }\n\n    if (overlayRef && !overlayRef.hasAttached()) {\n      overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n\n    this.autocomplete._isOpen = this._overlayAttached = true; // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  _getOverlayConfig() {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir,\n      panelClass: this._defaults?.overlayPanelClass\n    });\n  }\n\n  _getOverlayPosition() {\n    const strategy = this._overlay.position().flexibleConnectedTo(this._getConnectedElement()).withFlexibleDimensions(false).withPush(false);\n\n    this._setStrategyPositions(strategy);\n\n    this._positionStrategy = strategy;\n    return strategy;\n  }\n  /** Sets the positions on a position strategy based on the directive's input state. */\n\n\n  _setStrategyPositions(positionStrategy) {\n    // Note that we provide horizontal fallback positions, even though by default the dropdown\n    // width matches the input, because consumers can override the width. See #18854.\n    const belowPositions = [{\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'top'\n    }, {\n      originX: 'end',\n      originY: 'bottom',\n      overlayX: 'end',\n      overlayY: 'top'\n    }]; // The overlay edge connected to the trigger should have squared corners, while\n    // the opposite end has rounded corners. We apply a CSS class to swap the\n    // border-radius based on the overlay position.\n\n    const panelClass = this._aboveClass;\n    const abovePositions = [{\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'bottom',\n      panelClass\n    }, {\n      originX: 'end',\n      originY: 'top',\n      overlayX: 'end',\n      overlayY: 'bottom',\n      panelClass\n    }];\n    let positions;\n\n    if (this.position === 'above') {\n      positions = abovePositions;\n    } else if (this.position === 'below') {\n      positions = belowPositions;\n    } else {\n      positions = [...belowPositions, ...abovePositions];\n    }\n\n    positionStrategy.withPositions(positions);\n  }\n\n  _getConnectedElement() {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  _getPanelWidth() {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n  /** Returns the width of the input element, so the panel width can match it. */\n\n\n  _getHostWidth() {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n  /**\r\n   * Resets the active item to -1 so arrow events will activate the\r\n   * correct options, or to 0 if the consumer opted into it.\r\n   */\n\n\n  _resetActiveItem() {\n    const autocomplete = this.autocomplete;\n\n    if (autocomplete.autoActiveFirstOption) {\n      // Note that we go through `setFirstItemActive`, rather than `setActiveItem(0)`, because\n      // the former will find the next enabled option, if the first one is disabled.\n      autocomplete._keyManager.setFirstItemActive();\n    } else {\n      autocomplete._keyManager.setActiveItem(-1);\n    }\n  }\n  /** Determines whether the panel can be opened. */\n\n\n  _canOpen() {\n    const element = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n  /** Use defaultView of injected document if available or fallback to global window reference */\n\n\n  _getWindow() {\n    return this._document?.defaultView || window;\n  }\n  /** Scrolls to a particular option in the list. */\n\n\n  _scrollToOption(index) {\n    // Given that we are not actually focusing active options, we must manually adjust scroll\n    // to reveal options below the fold. First, we find the offset of the option from the top\n    // of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n    // the panel height + the option height, so the active option will be just visible at the\n    // bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n    // will become the offset. If that offset is visible within the panel already, the scrollTop is\n    // not adjusted.\n    const autocomplete = this.autocomplete;\n\n    const labelCount = _countGroupLabelsBeforeOption(index, autocomplete.options, autocomplete.optionGroups);\n\n    if (index === 0 && labelCount === 1) {\n      // If we've got one group label before the option and we're at the top option,\n      // scroll the list to the top. This is better UX than scrolling the list to the\n      // top of the option, because it allows the user to read the top group's label.\n      autocomplete._setScrollTop(0);\n    } else if (autocomplete.panel) {\n      const option = autocomplete.options.toArray()[index];\n\n      if (option) {\n        const element = option._getHostElement();\n\n        const newScrollPosition = _getOptionScrollPosition(element.offsetTop, element.offsetHeight, autocomplete._getScrollTop(), autocomplete.panel.nativeElement.offsetHeight);\n\n        autocomplete._setScrollTop(newScrollPosition);\n      }\n    }\n  }\n\n}\n\n_MatAutocompleteTriggerBase.ɵfac = function _MatAutocompleteTriggerBase_Factory(t) {\n  return new (t || _MatAutocompleteTriggerBase)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1$1.Overlay), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY), i0.ɵɵdirectiveInject(i2$1.Directionality, 8), i0.ɵɵdirectiveInject(MAT_FORM_FIELD, 9), i0.ɵɵdirectiveInject(DOCUMENT, 8), i0.ɵɵdirectiveInject(i3.ViewportRuler), i0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, 8));\n};\n\n_MatAutocompleteTriggerBase.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: _MatAutocompleteTriggerBase,\n  inputs: {\n    autocomplete: [\"matAutocomplete\", \"autocomplete\"],\n    position: [\"matAutocompletePosition\", \"position\"],\n    connectedTo: [\"matAutocompleteConnectedTo\", \"connectedTo\"],\n    autocompleteAttribute: [\"autocomplete\", \"autocompleteAttribute\"],\n    autocompleteDisabled: [\"matAutocompleteDisabled\", \"autocompleteDisabled\"]\n  },\n  features: [i0.ɵɵNgOnChangesFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(_MatAutocompleteTriggerBase, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i1$1.Overlay\n    }, {\n      type: i0.ViewContainerRef\n    }, {\n      type: i0.NgZone\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY]\n      }]\n    }, {\n      type: i2$1.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: i4.MatFormField,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_FORM_FIELD]\n      }, {\n        type: Host\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: i3.ViewportRuler\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, {\n    autocomplete: [{\n      type: Input,\n      args: ['matAutocomplete']\n    }],\n    position: [{\n      type: Input,\n      args: ['matAutocompletePosition']\n    }],\n    connectedTo: [{\n      type: Input,\n      args: ['matAutocompleteConnectedTo']\n    }],\n    autocompleteAttribute: [{\n      type: Input,\n      args: ['autocomplete']\n    }],\n    autocompleteDisabled: [{\n      type: Input,\n      args: ['matAutocompleteDisabled']\n    }]\n  });\n})();\n\nclass MatAutocompleteTrigger extends _MatAutocompleteTriggerBase {\n  constructor() {\n    super(...arguments);\n    this._aboveClass = 'mat-autocomplete-panel-above';\n  }\n\n}\n\nMatAutocompleteTrigger.ɵfac = /* @__PURE__ */function () {\n  let ɵMatAutocompleteTrigger_BaseFactory;\n  return function MatAutocompleteTrigger_Factory(t) {\n    return (ɵMatAutocompleteTrigger_BaseFactory || (ɵMatAutocompleteTrigger_BaseFactory = i0.ɵɵgetInheritedFactory(MatAutocompleteTrigger)))(t || MatAutocompleteTrigger);\n  };\n}();\n\nMatAutocompleteTrigger.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatAutocompleteTrigger,\n  selectors: [[\"input\", \"matAutocomplete\", \"\"], [\"textarea\", \"matAutocomplete\", \"\"]],\n  hostAttrs: [1, \"mat-autocomplete-trigger\"],\n  hostVars: 7,\n  hostBindings: function MatAutocompleteTrigger_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"focusin\", function MatAutocompleteTrigger_focusin_HostBindingHandler() {\n        return ctx._handleFocus();\n      })(\"blur\", function MatAutocompleteTrigger_blur_HostBindingHandler() {\n        return ctx._onTouched();\n      })(\"input\", function MatAutocompleteTrigger_input_HostBindingHandler($event) {\n        return ctx._handleInput($event);\n      })(\"keydown\", function MatAutocompleteTrigger_keydown_HostBindingHandler($event) {\n        return ctx._handleKeydown($event);\n      });\n    }\n\n    if (rf & 2) {\n      i0.ɵɵattribute(\"autocomplete\", ctx.autocompleteAttribute)(\"role\", ctx.autocompleteDisabled ? null : \"combobox\")(\"aria-autocomplete\", ctx.autocompleteDisabled ? null : \"list\")(\"aria-activedescendant\", ctx.panelOpen && ctx.activeOption ? ctx.activeOption.id : null)(\"aria-expanded\", ctx.autocompleteDisabled ? null : ctx.panelOpen.toString())(\"aria-owns\", ctx.autocompleteDisabled || !ctx.panelOpen ? null : ctx.autocomplete == null ? null : ctx.autocomplete.id)(\"aria-haspopup\", !ctx.autocompleteDisabled);\n    }\n  },\n  exportAs: [\"matAutocompleteTrigger\"],\n  features: [i0.ɵɵProvidersFeature([MAT_AUTOCOMPLETE_VALUE_ACCESSOR]), i0.ɵɵInheritDefinitionFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatAutocompleteTrigger, [{\n    type: Directive,\n    args: [{\n      selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n      host: {\n        'class': 'mat-autocomplete-trigger',\n        '[attr.autocomplete]': 'autocompleteAttribute',\n        '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n        '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n        '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\n        '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n        '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n        '[attr.aria-haspopup]': '!autocompleteDisabled',\n        // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n        // a little earlier. This avoids issues where IE delays the focusing of the input.\n        '(focusin)': '_handleFocus()',\n        '(blur)': '_onTouched()',\n        '(input)': '_handleInput($event)',\n        '(keydown)': '_handleKeydown($event)'\n      },\n      exportAs: 'matAutocompleteTrigger',\n      providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n    }]\n  }], null, null);\n})();\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nclass MatAutocompleteModule {}\n\nMatAutocompleteModule.ɵfac = function MatAutocompleteModule_Factory(t) {\n  return new (t || MatAutocompleteModule)();\n};\n\nMatAutocompleteModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: MatAutocompleteModule\n});\nMatAutocompleteModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n  imports: [[OverlayModule, MatOptionModule, MatCommonModule, CommonModule], CdkScrollableModule, MatOptionModule, MatCommonModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatAutocompleteModule, [{\n    type: NgModule,\n    args: [{\n      imports: [OverlayModule, MatOptionModule, MatCommonModule, CommonModule],\n      exports: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin, CdkScrollableModule, MatOptionModule, MatCommonModule],\n      declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n      providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER]\n    }]\n  }], null, null);\n})();\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_AUTOCOMPLETE_VALUE_ACCESSOR, MatAutocomplete, MatAutocompleteModule, MatAutocompleteOrigin, MatAutocompleteSelectedEvent, MatAutocompleteTrigger, _MatAutocompleteBase, _MatAutocompleteOriginBase, _MatAutocompleteTriggerBase, getMatAutocompleteMissingPanelError };","map":{"version":3,"sources":["C:/Users/DC8SunX53/Documents/VSCODE_Project_questMe/questme/admin-interface/node_modules/@angular/material/fesm2020/autocomplete.mjs"],"names":["ActiveDescendantKeyManager","coerceBooleanProperty","coerceStringArray","i1","_getEventTarget","i0","InjectionToken","EventEmitter","TemplateRef","Directive","Inject","ViewChild","Input","Output","Component","ViewEncapsulation","ChangeDetectionStrategy","ContentChildren","forwardRef","Optional","Host","NgModule","mixinDisableRipple","MAT_OPTION_PARENT_COMPONENT","MAT_OPTGROUP","MatOption","MatOptionSelectionChange","_countGroupLabelsBeforeOption","_getOptionScrollPosition","MatOptionModule","MatCommonModule","Subscription","Subject","defer","merge","of","fromEvent","i2","DOCUMENT","CommonModule","i1$1","Overlay","OverlayConfig","OverlayModule","i3","CdkScrollableModule","i2$1","ESCAPE","hasModifierKey","ENTER","UP_ARROW","DOWN_ARROW","TAB","TemplatePortal","NG_VALUE_ACCESSOR","i4","MAT_FORM_FIELD","take","switchMap","filter","map","tap","delay","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","constructor","source","option","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","providedIn","factory","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","autoActiveFirstOption","_MatAutocompleteBase","_changeDetectorRef","_elementRef","defaults","platform","_activeOptionChanges","EMPTY","showPanel","_isOpen","displayWith","optionSelected","opened","closed","optionActivated","_classList","id","inertGroups","SAFARI","_autoActiveFirstOption","isOpen","value","classList","length","reduce","className","_setVisibilityClasses","nativeElement","ngAfterContentInit","_keyManager","options","withWrap","change","subscribe","index","emit","toArray","_setVisibility","ngOnDestroy","unsubscribe","_setScrollTop","scrollTop","panel","_getScrollTop","markForCheck","_emitSelectEvent","event","_getPanelAriaLabelledby","labelId","ariaLabel","labelExpression","ariaLabelledby","_visibleClass","_hiddenClass","ɵfac","ChangeDetectorRef","ElementRef","Platform","ɵdir","type","undefined","decorators","args","template","static","panelWidth","MatAutocomplete","arguments","ɵcmp","provide","useExisting","NgClass","selector","encapsulation","None","changeDetection","OnPush","exportAs","inputs","host","providers","styles","optionGroups","descendants","_MatAutocompleteOriginBase","elementRef","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","reposition","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","deps","useFactory","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","multi","getMatAutocompleteMissingPanelError","Error","_MatAutocompleteTriggerBase","_element","_overlay","_viewContainerRef","_zone","scrollStrategy","_dir","_formField","_document","_viewportRuler","_defaults","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_canOpenOnNextFocus","_closeKeyEventStream","_windowBlurHandler","activeElement","panelOpen","_onChange","_onTouched","position","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","onSelectionChange","onStable","pipe","_scrollStrategy","autocompleteDisabled","ngAfterViewInit","window","_getWindow","runOutsideAngular","addEventListener","ngOnChanges","changes","_positionStrategy","_setStrategyPositions","_overlayRef","updatePosition","removeEventListener","_destroyPanel","complete","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","hasAttached","detach","_closingActionsSubscription","detectChanges","panelClosingActions","tabOut","_getOutsideClickStream","detachments","activeOption","activeItem","clickTarget","formField","customOrigin","connectedTo","contains","overlayElement","writeValue","Promise","resolve","then","_setTriggerValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","disabled","_handleKeydown","keyCode","preventDefault","_selectViaInteraction","_resetActiveItem","prevActiveItem","isArrowKey","onKeydown","_canOpen","_scrollToOption","activeItemIndex","_handleInput","target","parseFloat","_previousValue","_handleFocus","shouldAnimate","floatLabel","_animateAndLockLabel","_subscribeToClosingActions","firstStable","optionChanges","reapplyLastPosition","wasOpen","_setValueAndClose","dispose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","focus","skip","forEach","selected","deselect","ngDevMode","overlayRef","_portal","getLabelId","create","_getOverlayConfig","keydownEvents","next","stopPropagation","updateSize","width","_getPanelWidth","setOrigin","_getConnectedElement","attach","positionStrategy","_getOverlayPosition","direction","panelClass","overlayPanelClass","strategy","flexibleConnectedTo","withFlexibleDimensions","withPush","belowPositions","originX","originY","overlayX","overlayY","_aboveClass","abovePositions","positions","withPositions","getConnectedOverlayOrigin","_getHostWidth","getBoundingClientRect","setFirstItemActive","setActiveItem","element","readOnly","defaultView","labelCount","_getHostElement","newScrollPosition","offsetTop","offsetHeight","ViewContainerRef","NgZone","Directionality","ViewportRuler","MatFormField","MatAutocompleteModule","ɵmod","ɵinj","imports","exports","declarations"],"mappings":"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","sourcesContent":["import { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\r\nimport { coerceBooleanProperty, coerceStringArray } from '@angular/cdk/coercion';\r\nimport * as i1 from '@angular/cdk/platform';\r\nimport { _getEventTarget } from '@angular/cdk/platform';\r\nimport * as i0 from '@angular/core';\r\nimport { InjectionToken, EventEmitter, TemplateRef, Directive, Inject, ViewChild, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ContentChildren, forwardRef, Optional, Host, NgModule } from '@angular/core';\r\nimport { mixinDisableRipple, MAT_OPTION_PARENT_COMPONENT, MAT_OPTGROUP, MatOption, MatOptionSelectionChange, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MatOptionModule, MatCommonModule } from '@angular/material/core';\r\nimport { Subscription, Subject, defer, merge, of, fromEvent } from 'rxjs';\r\nimport * as i2 from '@angular/common';\r\nimport { DOCUMENT, CommonModule } from '@angular/common';\r\nimport * as i1$1 from '@angular/cdk/overlay';\r\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\r\nimport * as i3 from '@angular/cdk/scrolling';\r\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\r\nimport * as i2$1 from '@angular/cdk/bidi';\r\nimport { ESCAPE, hasModifierKey, ENTER, UP_ARROW, DOWN_ARROW, TAB } from '@angular/cdk/keycodes';\r\nimport { TemplatePortal } from '@angular/cdk/portal';\r\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport * as i4 from '@angular/material/form-field';\r\nimport { MAT_FORM_FIELD } from '@angular/material/form-field';\r\nimport { take, switchMap, filter, map, tap, delay } from 'rxjs/operators';\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\r\n * the component definition.\r\n */\r\nlet _uniqueAutocompleteIdCounter = 0;\r\n/** Event object that is emitted when an autocomplete option is selected. */\r\nclass MatAutocompleteSelectedEvent {\r\n    constructor(\r\n    /** Reference to the autocomplete panel that emitted the event. */\r\n    source, \r\n    /** Option that was selected. */\r\n    option) {\r\n        this.source = source;\r\n        this.option = option;\r\n    }\r\n}\r\n// Boilerplate for applying mixins to MatAutocomplete.\r\n/** @docs-private */\r\nconst _MatAutocompleteMixinBase = mixinDisableRipple(class {\r\n});\r\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\r\nconst MAT_AUTOCOMPLETE_DEFAULT_OPTIONS = new InjectionToken('mat-autocomplete-default-options', {\r\n    providedIn: 'root',\r\n    factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\r\n});\r\n/** @docs-private */\r\nfunction MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY() {\r\n    return { autoActiveFirstOption: false };\r\n}\r\n/** Base class with all of the `MatAutocomplete` functionality. */\r\nclass _MatAutocompleteBase extends _MatAutocompleteMixinBase {\r\n    constructor(_changeDetectorRef, _elementRef, defaults, platform) {\r\n        super();\r\n        this._changeDetectorRef = _changeDetectorRef;\r\n        this._elementRef = _elementRef;\r\n        this._activeOptionChanges = Subscription.EMPTY;\r\n        /** Whether the autocomplete panel should be visible, depending on option length. */\r\n        this.showPanel = false;\r\n        this._isOpen = false;\r\n        /** Function that maps an option's control value to its display value in the trigger. */\r\n        this.displayWith = null;\r\n        /** Event that is emitted whenever an option from the list is selected. */\r\n        this.optionSelected = new EventEmitter();\r\n        /** Event that is emitted when the autocomplete panel is opened. */\r\n        this.opened = new EventEmitter();\r\n        /** Event that is emitted when the autocomplete panel is closed. */\r\n        this.closed = new EventEmitter();\r\n        /** Emits whenever an option is activated using the keyboard. */\r\n        this.optionActivated = new EventEmitter();\r\n        this._classList = {};\r\n        /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\r\n        this.id = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\r\n        // TODO(crisbeto): the problem that the `inertGroups` option resolves is only present on\r\n        // Safari using VoiceOver. We should occasionally check back to see whether the bug\r\n        // wasn't resolved in VoiceOver, and if it has, we can remove this and the `inertGroups`\r\n        // option altogether.\r\n        this.inertGroups = platform?.SAFARI || false;\r\n        this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\r\n    }\r\n    /** Whether the autocomplete panel is open. */\r\n    get isOpen() {\r\n        return this._isOpen && this.showPanel;\r\n    }\r\n    /**\r\n     * Whether the first option should be highlighted when the autocomplete panel is opened.\r\n     * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\r\n     */\r\n    get autoActiveFirstOption() {\r\n        return this._autoActiveFirstOption;\r\n    }\r\n    set autoActiveFirstOption(value) {\r\n        this._autoActiveFirstOption = coerceBooleanProperty(value);\r\n    }\r\n    /**\r\n     * Takes classes set on the host mat-autocomplete element and applies them to the panel\r\n     * inside the overlay container to allow for easy styling.\r\n     */\r\n    set classList(value) {\r\n        if (value && value.length) {\r\n            this._classList = coerceStringArray(value).reduce((classList, className) => {\r\n                classList[className] = true;\r\n                return classList;\r\n            }, {});\r\n        }\r\n        else {\r\n            this._classList = {};\r\n        }\r\n        this._setVisibilityClasses(this._classList);\r\n        this._elementRef.nativeElement.className = '';\r\n    }\r\n    ngAfterContentInit() {\r\n        this._keyManager = new ActiveDescendantKeyManager(this.options).withWrap();\r\n        this._activeOptionChanges = this._keyManager.change.subscribe(index => {\r\n            if (this.isOpen) {\r\n                this.optionActivated.emit({ source: this, option: this.options.toArray()[index] || null });\r\n            }\r\n        });\r\n        // Set the initial visibility state.\r\n        this._setVisibility();\r\n    }\r\n    ngOnDestroy() {\r\n        this._activeOptionChanges.unsubscribe();\r\n    }\r\n    /**\r\n     * Sets the panel scrollTop. This allows us to manually scroll to display options\r\n     * above or below the fold, as they are not actually being focused when active.\r\n     */\r\n    _setScrollTop(scrollTop) {\r\n        if (this.panel) {\r\n            this.panel.nativeElement.scrollTop = scrollTop;\r\n        }\r\n    }\r\n    /** Returns the panel's scrollTop. */\r\n    _getScrollTop() {\r\n        return this.panel ? this.panel.nativeElement.scrollTop : 0;\r\n    }\r\n    /** Panel should hide itself when the option list is empty. */\r\n    _setVisibility() {\r\n        this.showPanel = !!this.options.length;\r\n        this._setVisibilityClasses(this._classList);\r\n        this._changeDetectorRef.markForCheck();\r\n    }\r\n    /** Emits the `select` event. */\r\n    _emitSelectEvent(option) {\r\n        const event = new MatAutocompleteSelectedEvent(this, option);\r\n        this.optionSelected.emit(event);\r\n    }\r\n    /** Gets the aria-labelledby for the autocomplete panel. */\r\n    _getPanelAriaLabelledby(labelId) {\r\n        if (this.ariaLabel) {\r\n            return null;\r\n        }\r\n        const labelExpression = labelId ? labelId + ' ' : '';\r\n        return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\r\n    }\r\n    /** Sets the autocomplete visibility classes on a classlist based on the panel is visible. */\r\n    _setVisibilityClasses(classList) {\r\n        classList[this._visibleClass] = this.showPanel;\r\n        classList[this._hiddenClass] = !this.showPanel;\r\n    }\r\n}\r\n_MatAutocompleteBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: _MatAutocompleteBase, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS }, { token: i1.Platform }], target: i0.ɵɵFactoryTarget.Directive });\r\n_MatAutocompleteBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.1\", type: _MatAutocompleteBase, inputs: { ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], displayWith: \"displayWith\", autoActiveFirstOption: \"autoActiveFirstOption\", panelWidth: \"panelWidth\", classList: [\"class\", \"classList\"] }, outputs: { optionSelected: \"optionSelected\", opened: \"opened\", closed: \"closed\", optionActivated: \"optionActivated\" }, viewQueries: [{ propertyName: \"template\", first: true, predicate: TemplateRef, descendants: true, static: true }, { propertyName: \"panel\", first: true, predicate: [\"panel\"], descendants: true }], usesInheritance: true, ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: _MatAutocompleteBase, decorators: [{\r\n            type: Directive\r\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: undefined, decorators: [{\r\n                    type: Inject,\r\n                    args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\r\n                }] }, { type: i1.Platform }]; }, propDecorators: { template: [{\r\n                type: ViewChild,\r\n                args: [TemplateRef, { static: true }]\r\n            }], panel: [{\r\n                type: ViewChild,\r\n                args: ['panel']\r\n            }], ariaLabel: [{\r\n                type: Input,\r\n                args: ['aria-label']\r\n            }], ariaLabelledby: [{\r\n                type: Input,\r\n                args: ['aria-labelledby']\r\n            }], displayWith: [{\r\n                type: Input\r\n            }], autoActiveFirstOption: [{\r\n                type: Input\r\n            }], panelWidth: [{\r\n                type: Input\r\n            }], optionSelected: [{\r\n                type: Output\r\n            }], opened: [{\r\n                type: Output\r\n            }], closed: [{\r\n                type: Output\r\n            }], optionActivated: [{\r\n                type: Output\r\n            }], classList: [{\r\n                type: Input,\r\n                args: ['class']\r\n            }] } });\r\nclass MatAutocomplete extends _MatAutocompleteBase {\r\n    constructor() {\r\n        super(...arguments);\r\n        this._visibleClass = 'mat-autocomplete-visible';\r\n        this._hiddenClass = 'mat-autocomplete-hidden';\r\n    }\r\n}\r\nMatAutocomplete.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: MatAutocomplete, deps: null, target: i0.ɵɵFactoryTarget.Component });\r\nMatAutocomplete.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.0.1\", type: MatAutocomplete, selector: \"mat-autocomplete\", inputs: { disableRipple: \"disableRipple\" }, host: { classAttribute: \"mat-autocomplete\" }, providers: [{ provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete }], queries: [{ propertyName: \"optionGroups\", predicate: MAT_OPTGROUP, descendants: true }, { propertyName: \"options\", predicate: MatOption, descendants: true }], exportAs: [\"matAutocomplete\"], usesInheritance: true, ngImport: i0, template: \"<ng-template let-formFieldId=\\\"id\\\">\\n  <div class=\\\"mat-autocomplete-panel\\\"\\n       role=\\\"listbox\\\"\\n       [id]=\\\"id\\\"\\n       [attr.aria-label]=\\\"ariaLabel || null\\\"\\n       [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby(formFieldId)\\\"\\n       [ngClass]=\\\"_classList\\\"\\n       #panel>\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\", styles: [\".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}.cdk-high-contrast-active .mat-autocomplete-panel{outline:solid 1px}mat-autocomplete{display:none}\\n\"], directives: [{ type: i2.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: MatAutocomplete, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: 'mat-autocomplete', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, exportAs: 'matAutocomplete', inputs: ['disableRipple'], host: {\r\n                        'class': 'mat-autocomplete',\r\n                    }, providers: [{ provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete }], template: \"<ng-template let-formFieldId=\\\"id\\\">\\n  <div class=\\\"mat-autocomplete-panel\\\"\\n       role=\\\"listbox\\\"\\n       [id]=\\\"id\\\"\\n       [attr.aria-label]=\\\"ariaLabel || null\\\"\\n       [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby(formFieldId)\\\"\\n       [ngClass]=\\\"_classList\\\"\\n       #panel>\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\", styles: [\".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}.cdk-high-contrast-active .mat-autocomplete-panel{outline:solid 1px}mat-autocomplete{display:none}\\n\"] }]\r\n        }], propDecorators: { optionGroups: [{\r\n                type: ContentChildren,\r\n                args: [MAT_OPTGROUP, { descendants: true }]\r\n            }], options: [{\r\n                type: ContentChildren,\r\n                args: [MatOption, { descendants: true }]\r\n            }] } });\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/** Base class containing all of the functionality for `MatAutocompleteOrigin`. */\r\nclass _MatAutocompleteOriginBase {\r\n    constructor(\r\n    /** Reference to the element on which the directive is applied. */\r\n    elementRef) {\r\n        this.elementRef = elementRef;\r\n    }\r\n}\r\n_MatAutocompleteOriginBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: _MatAutocompleteOriginBase, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\r\n_MatAutocompleteOriginBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.1\", type: _MatAutocompleteOriginBase, ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: _MatAutocompleteOriginBase, decorators: [{\r\n            type: Directive\r\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; } });\r\n/**\r\n * Directive applied to an element to make it usable\r\n * as a connection point for an autocomplete panel.\r\n */\r\nclass MatAutocompleteOrigin extends _MatAutocompleteOriginBase {\r\n}\r\nMatAutocompleteOrigin.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: MatAutocompleteOrigin, deps: null, target: i0.ɵɵFactoryTarget.Directive });\r\nMatAutocompleteOrigin.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.1\", type: MatAutocompleteOrigin, selector: \"[matAutocompleteOrigin]\", exportAs: [\"matAutocompleteOrigin\"], usesInheritance: true, ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: MatAutocompleteOrigin, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: '[matAutocompleteOrigin]',\r\n                    exportAs: 'matAutocompleteOrigin',\r\n                }]\r\n        }] });\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\r\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY = new InjectionToken('mat-autocomplete-scroll-strategy');\r\n/** @docs-private */\r\nfunction MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay) {\r\n    return () => overlay.scrollStrategies.reposition();\r\n}\r\n/** @docs-private */\r\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\r\n    provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\r\n    deps: [Overlay],\r\n    useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\r\n};\r\n/**\r\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\r\n * @docs-private\r\n */\r\nconst MAT_AUTOCOMPLETE_VALUE_ACCESSOR = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => MatAutocompleteTrigger),\r\n    multi: true,\r\n};\r\n/**\r\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\r\n * @docs-private\r\n */\r\nfunction getMatAutocompleteMissingPanelError() {\r\n    return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\r\n        'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\r\n        \"you're attempting to open it after the ngAfterContentInit hook.\");\r\n}\r\n/** Base class with all of the `MatAutocompleteTrigger` functionality. */\r\nclass _MatAutocompleteTriggerBase {\r\n    constructor(_element, _overlay, _viewContainerRef, _zone, _changeDetectorRef, scrollStrategy, _dir, _formField, _document, _viewportRuler, _defaults) {\r\n        this._element = _element;\r\n        this._overlay = _overlay;\r\n        this._viewContainerRef = _viewContainerRef;\r\n        this._zone = _zone;\r\n        this._changeDetectorRef = _changeDetectorRef;\r\n        this._dir = _dir;\r\n        this._formField = _formField;\r\n        this._document = _document;\r\n        this._viewportRuler = _viewportRuler;\r\n        this._defaults = _defaults;\r\n        this._componentDestroyed = false;\r\n        this._autocompleteDisabled = false;\r\n        /** Whether or not the label state is being overridden. */\r\n        this._manuallyFloatingLabel = false;\r\n        /** Subscription to viewport size changes. */\r\n        this._viewportSubscription = Subscription.EMPTY;\r\n        /**\r\n         * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\r\n         * closed autocomplete from being reopened if the user switches to another browser tab and then\r\n         * comes back.\r\n         */\r\n        this._canOpenOnNextFocus = true;\r\n        /** Stream of keyboard events that can close the panel. */\r\n        this._closeKeyEventStream = new Subject();\r\n        /**\r\n         * Event handler for when the window is blurred. Needs to be an\r\n         * arrow function in order to preserve the context.\r\n         */\r\n        this._windowBlurHandler = () => {\r\n            // If the user blurred the window while the autocomplete is focused, it means that it'll be\r\n            // refocused when they come back. In this case we want to skip the first focus event, if the\r\n            // pane was closed, in order to avoid reopening it unintentionally.\r\n            this._canOpenOnNextFocus =\r\n                this._document.activeElement !== this._element.nativeElement || this.panelOpen;\r\n        };\r\n        /** `View -> model callback called when value changes` */\r\n        this._onChange = () => { };\r\n        /** `View -> model callback called when autocomplete has been touched` */\r\n        this._onTouched = () => { };\r\n        /**\r\n         * Position of the autocomplete panel relative to the trigger element. A position of `auto`\r\n         * will render the panel underneath the trigger if there is enough space for it to fit in\r\n         * the viewport, otherwise the panel will be shown above it. If the position is set to\r\n         * `above` or `below`, the panel will always be shown above or below the trigger. no matter\r\n         * whether it fits completely in the viewport.\r\n         */\r\n        this.position = 'auto';\r\n        /**\r\n         * `autocomplete` attribute to be set on the input element.\r\n         * @docs-private\r\n         */\r\n        this.autocompleteAttribute = 'off';\r\n        this._overlayAttached = false;\r\n        /** Stream of autocomplete option selections. */\r\n        this.optionSelections = defer(() => {\r\n            if (this.autocomplete && this.autocomplete.options) {\r\n                return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\r\n            }\r\n            // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\r\n            // Return a stream that we'll replace with the real one once everything is in place.\r\n            return this._zone.onStable.pipe(take(1), switchMap(() => this.optionSelections));\r\n        });\r\n        this._scrollStrategy = scrollStrategy;\r\n    }\r\n    /**\r\n     * Whether the autocomplete is disabled. When disabled, the element will\r\n     * act as a regular input and the user won't be able to open the panel.\r\n     */\r\n    get autocompleteDisabled() {\r\n        return this._autocompleteDisabled;\r\n    }\r\n    set autocompleteDisabled(value) {\r\n        this._autocompleteDisabled = coerceBooleanProperty(value);\r\n    }\r\n    ngAfterViewInit() {\r\n        const window = this._getWindow();\r\n        if (typeof window !== 'undefined') {\r\n            this._zone.runOutsideAngular(() => window.addEventListener('blur', this._windowBlurHandler));\r\n        }\r\n    }\r\n    ngOnChanges(changes) {\r\n        if (changes['position'] && this._positionStrategy) {\r\n            this._setStrategyPositions(this._positionStrategy);\r\n            if (this.panelOpen) {\r\n                this._overlayRef.updatePosition();\r\n            }\r\n        }\r\n    }\r\n    ngOnDestroy() {\r\n        const window = this._getWindow();\r\n        if (typeof window !== 'undefined') {\r\n            window.removeEventListener('blur', this._windowBlurHandler);\r\n        }\r\n        this._viewportSubscription.unsubscribe();\r\n        this._componentDestroyed = true;\r\n        this._destroyPanel();\r\n        this._closeKeyEventStream.complete();\r\n    }\r\n    /** Whether or not the autocomplete panel is open. */\r\n    get panelOpen() {\r\n        return this._overlayAttached && this.autocomplete.showPanel;\r\n    }\r\n    /** Opens the autocomplete suggestion panel. */\r\n    openPanel() {\r\n        this._attachOverlay();\r\n        this._floatLabel();\r\n    }\r\n    /** Closes the autocomplete suggestion panel. */\r\n    closePanel() {\r\n        this._resetLabel();\r\n        if (!this._overlayAttached) {\r\n            return;\r\n        }\r\n        if (this.panelOpen) {\r\n            // Only emit if the panel was visible.\r\n            this.autocomplete.closed.emit();\r\n        }\r\n        this.autocomplete._isOpen = this._overlayAttached = false;\r\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\r\n            this._overlayRef.detach();\r\n            this._closingActionsSubscription.unsubscribe();\r\n        }\r\n        // Note that in some cases this can end up being called after the component is destroyed.\r\n        // Add a check to ensure that we don't try to run change detection on a destroyed view.\r\n        if (!this._componentDestroyed) {\r\n            // We need to trigger change detection manually, because\r\n            // `fromEvent` doesn't seem to do it at the proper time.\r\n            // This ensures that the label is reset when the\r\n            // user clicks outside.\r\n            this._changeDetectorRef.detectChanges();\r\n        }\r\n    }\r\n    /**\r\n     * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\r\n     * within the viewport.\r\n     */\r\n    updatePosition() {\r\n        if (this._overlayAttached) {\r\n            this._overlayRef.updatePosition();\r\n        }\r\n    }\r\n    /**\r\n     * A stream of actions that should close the autocomplete panel, including\r\n     * when an option is selected, on blur, and when TAB is pressed.\r\n     */\r\n    get panelClosingActions() {\r\n        return merge(this.optionSelections, this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)), this._closeKeyEventStream, this._getOutsideClickStream(), this._overlayRef\r\n            ? this._overlayRef.detachments().pipe(filter(() => this._overlayAttached))\r\n            : of()).pipe(\r\n        // Normalize the output so we return a consistent type.\r\n        map(event => (event instanceof MatOptionSelectionChange ? event : null)));\r\n    }\r\n    /** The currently active option, coerced to MatOption type. */\r\n    get activeOption() {\r\n        if (this.autocomplete && this.autocomplete._keyManager) {\r\n            return this.autocomplete._keyManager.activeItem;\r\n        }\r\n        return null;\r\n    }\r\n    /** Stream of clicks outside of the autocomplete panel. */\r\n    _getOutsideClickStream() {\r\n        return merge(fromEvent(this._document, 'click'), fromEvent(this._document, 'auxclick'), fromEvent(this._document, 'touchend')).pipe(filter(event => {\r\n            // If we're in the Shadow DOM, the event target will be the shadow root, so we have to\r\n            // fall back to check the first element in the path of the click event.\r\n            const clickTarget = _getEventTarget(event);\r\n            const formField = this._formField ? this._formField._elementRef.nativeElement : null;\r\n            const customOrigin = this.connectedTo ? this.connectedTo.elementRef.nativeElement : null;\r\n            return (this._overlayAttached &&\r\n                clickTarget !== this._element.nativeElement &&\r\n                (!formField || !formField.contains(clickTarget)) &&\r\n                (!customOrigin || !customOrigin.contains(clickTarget)) &&\r\n                !!this._overlayRef &&\r\n                !this._overlayRef.overlayElement.contains(clickTarget));\r\n        }));\r\n    }\r\n    // Implemented as part of ControlValueAccessor.\r\n    writeValue(value) {\r\n        Promise.resolve(null).then(() => this._setTriggerValue(value));\r\n    }\r\n    // Implemented as part of ControlValueAccessor.\r\n    registerOnChange(fn) {\r\n        this._onChange = fn;\r\n    }\r\n    // Implemented as part of ControlValueAccessor.\r\n    registerOnTouched(fn) {\r\n        this._onTouched = fn;\r\n    }\r\n    // Implemented as part of ControlValueAccessor.\r\n    setDisabledState(isDisabled) {\r\n        this._element.nativeElement.disabled = isDisabled;\r\n    }\r\n    _handleKeydown(event) {\r\n        const keyCode = event.keyCode;\r\n        // Prevent the default action on all escape key presses. This is here primarily to bring IE\r\n        // in line with other browsers. By default, pressing escape on IE will cause it to revert\r\n        // the input value to the one that it had on focus, however it won't dispatch any events\r\n        // which means that the model value will be out of sync with the view.\r\n        if (keyCode === ESCAPE && !hasModifierKey(event)) {\r\n            event.preventDefault();\r\n        }\r\n        if (this.activeOption && keyCode === ENTER && this.panelOpen) {\r\n            this.activeOption._selectViaInteraction();\r\n            this._resetActiveItem();\r\n            event.preventDefault();\r\n        }\r\n        else if (this.autocomplete) {\r\n            const prevActiveItem = this.autocomplete._keyManager.activeItem;\r\n            const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\r\n            if (this.panelOpen || keyCode === TAB) {\r\n                this.autocomplete._keyManager.onKeydown(event);\r\n            }\r\n            else if (isArrowKey && this._canOpen()) {\r\n                this.openPanel();\r\n            }\r\n            if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\r\n                this._scrollToOption(this.autocomplete._keyManager.activeItemIndex || 0);\r\n            }\r\n        }\r\n    }\r\n    _handleInput(event) {\r\n        let target = event.target;\r\n        let value = target.value;\r\n        // Based on `NumberValueAccessor` from forms.\r\n        if (target.type === 'number') {\r\n            value = value == '' ? null : parseFloat(value);\r\n        }\r\n        // If the input has a placeholder, IE will fire the `input` event on page load,\r\n        // focus and blur, in addition to when the user actually changed the value. To\r\n        // filter out all of the extra events, we save the value on focus and between\r\n        // `input` events, and we check whether it changed.\r\n        // See: https://connect.microsoft.com/IE/feedback/details/885747/\r\n        if (this._previousValue !== value) {\r\n            this._previousValue = value;\r\n            this._onChange(value);\r\n            if (this._canOpen() && this._document.activeElement === event.target) {\r\n                this.openPanel();\r\n            }\r\n        }\r\n    }\r\n    _handleFocus() {\r\n        if (!this._canOpenOnNextFocus) {\r\n            this._canOpenOnNextFocus = true;\r\n        }\r\n        else if (this._canOpen()) {\r\n            this._previousValue = this._element.nativeElement.value;\r\n            this._attachOverlay();\r\n            this._floatLabel(true);\r\n        }\r\n    }\r\n    /**\r\n     * In \"auto\" mode, the label will animate down as soon as focus is lost.\r\n     * This causes the value to jump when selecting an option with the mouse.\r\n     * This method manually floats the label until the panel can be closed.\r\n     * @param shouldAnimate Whether the label should be animated when it is floated.\r\n     */\r\n    _floatLabel(shouldAnimate = false) {\r\n        if (this._formField && this._formField.floatLabel === 'auto') {\r\n            if (shouldAnimate) {\r\n                this._formField._animateAndLockLabel();\r\n            }\r\n            else {\r\n                this._formField.floatLabel = 'always';\r\n            }\r\n            this._manuallyFloatingLabel = true;\r\n        }\r\n    }\r\n    /** If the label has been manually elevated, return it to its normal state. */\r\n    _resetLabel() {\r\n        if (this._manuallyFloatingLabel) {\r\n            this._formField.floatLabel = 'auto';\r\n            this._manuallyFloatingLabel = false;\r\n        }\r\n    }\r\n    /**\r\n     * This method listens to a stream of panel closing actions and resets the\r\n     * stream every time the option list changes.\r\n     */\r\n    _subscribeToClosingActions() {\r\n        const firstStable = this._zone.onStable.pipe(take(1));\r\n        const optionChanges = this.autocomplete.options.changes.pipe(tap(() => this._positionStrategy.reapplyLastPosition()), \r\n        // Defer emitting to the stream until the next tick, because changing\r\n        // bindings in here will cause \"changed after checked\" errors.\r\n        delay(0));\r\n        // When the zone is stable initially, and when the option list changes...\r\n        return (merge(firstStable, optionChanges)\r\n            .pipe(\r\n        // create a new stream of panelClosingActions, replacing any previous streams\r\n        // that were created, and flatten it so our stream only emits closing events...\r\n        switchMap(() => {\r\n            const wasOpen = this.panelOpen;\r\n            this._resetActiveItem();\r\n            this.autocomplete._setVisibility();\r\n            if (this.panelOpen) {\r\n                this._overlayRef.updatePosition();\r\n                // If the `panelOpen` state changed, we need to make sure to emit the `opened`\r\n                // event, because we may not have emitted it when the panel was attached. This\r\n                // can happen if the users opens the panel and there are no options, but the\r\n                // options come in slightly later or as a result of the value changing.\r\n                if (wasOpen !== this.panelOpen) {\r\n                    this.autocomplete.opened.emit();\r\n                }\r\n            }\r\n            return this.panelClosingActions;\r\n        }), \r\n        // when the first closing event occurs...\r\n        take(1))\r\n            // set the value, close the panel, and complete.\r\n            .subscribe(event => this._setValueAndClose(event)));\r\n    }\r\n    /** Destroys the autocomplete suggestion panel. */\r\n    _destroyPanel() {\r\n        if (this._overlayRef) {\r\n            this.closePanel();\r\n            this._overlayRef.dispose();\r\n            this._overlayRef = null;\r\n        }\r\n    }\r\n    _setTriggerValue(value) {\r\n        const toDisplay = this.autocomplete && this.autocomplete.displayWith\r\n            ? this.autocomplete.displayWith(value)\r\n            : value;\r\n        // Simply falling back to an empty string if the display value is falsy does not work properly.\r\n        // The display value can also be the number zero and shouldn't fall back to an empty string.\r\n        const inputValue = toDisplay != null ? toDisplay : '';\r\n        // If it's used within a `MatFormField`, we should set it through the property so it can go\r\n        // through change detection.\r\n        if (this._formField) {\r\n            this._formField._control.value = inputValue;\r\n        }\r\n        else {\r\n            this._element.nativeElement.value = inputValue;\r\n        }\r\n        this._previousValue = inputValue;\r\n    }\r\n    /**\r\n     * This method closes the panel, and if a value is specified, also sets the associated\r\n     * control to that value. It will also mark the control as dirty if this interaction\r\n     * stemmed from the user.\r\n     */\r\n    _setValueAndClose(event) {\r\n        if (event && event.source) {\r\n            this._clearPreviousSelectedOption(event.source);\r\n            this._setTriggerValue(event.source.value);\r\n            this._onChange(event.source.value);\r\n            this._element.nativeElement.focus();\r\n            this.autocomplete._emitSelectEvent(event.source);\r\n        }\r\n        this.closePanel();\r\n    }\r\n    /**\r\n     * Clear any previous selected option and emit a selection change event for this option\r\n     */\r\n    _clearPreviousSelectedOption(skip) {\r\n        this.autocomplete.options.forEach(option => {\r\n            if (option !== skip && option.selected) {\r\n                option.deselect();\r\n            }\r\n        });\r\n    }\r\n    _attachOverlay() {\r\n        if (!this.autocomplete && (typeof ngDevMode === 'undefined' || ngDevMode)) {\r\n            throw getMatAutocompleteMissingPanelError();\r\n        }\r\n        let overlayRef = this._overlayRef;\r\n        if (!overlayRef) {\r\n            this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef, {\r\n                id: this._formField?.getLabelId(),\r\n            });\r\n            overlayRef = this._overlay.create(this._getOverlayConfig());\r\n            this._overlayRef = overlayRef;\r\n            // Use the `keydownEvents` in order to take advantage of\r\n            // the overlay event targeting provided by the CDK overlay.\r\n            overlayRef.keydownEvents().subscribe(event => {\r\n                // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\r\n                // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\r\n                if ((event.keyCode === ESCAPE && !hasModifierKey(event)) ||\r\n                    (event.keyCode === UP_ARROW && hasModifierKey(event, 'altKey'))) {\r\n                    this._closeKeyEventStream.next();\r\n                    this._resetActiveItem();\r\n                    // We need to stop propagation, otherwise the event will eventually\r\n                    // reach the input itself and cause the overlay to be reopened.\r\n                    event.stopPropagation();\r\n                    event.preventDefault();\r\n                }\r\n            });\r\n            this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\r\n                if (this.panelOpen && overlayRef) {\r\n                    overlayRef.updateSize({ width: this._getPanelWidth() });\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            // Update the trigger, panel width and direction, in case anything has changed.\r\n            this._positionStrategy.setOrigin(this._getConnectedElement());\r\n            overlayRef.updateSize({ width: this._getPanelWidth() });\r\n        }\r\n        if (overlayRef && !overlayRef.hasAttached()) {\r\n            overlayRef.attach(this._portal);\r\n            this._closingActionsSubscription = this._subscribeToClosingActions();\r\n        }\r\n        const wasOpen = this.panelOpen;\r\n        this.autocomplete._setVisibility();\r\n        this.autocomplete._isOpen = this._overlayAttached = true;\r\n        // We need to do an extra `panelOpen` check in here, because the\r\n        // autocomplete won't be shown if there are no options.\r\n        if (this.panelOpen && wasOpen !== this.panelOpen) {\r\n            this.autocomplete.opened.emit();\r\n        }\r\n    }\r\n    _getOverlayConfig() {\r\n        return new OverlayConfig({\r\n            positionStrategy: this._getOverlayPosition(),\r\n            scrollStrategy: this._scrollStrategy(),\r\n            width: this._getPanelWidth(),\r\n            direction: this._dir,\r\n            panelClass: this._defaults?.overlayPanelClass,\r\n        });\r\n    }\r\n    _getOverlayPosition() {\r\n        const strategy = this._overlay\r\n            .position()\r\n            .flexibleConnectedTo(this._getConnectedElement())\r\n            .withFlexibleDimensions(false)\r\n            .withPush(false);\r\n        this._setStrategyPositions(strategy);\r\n        this._positionStrategy = strategy;\r\n        return strategy;\r\n    }\r\n    /** Sets the positions on a position strategy based on the directive's input state. */\r\n    _setStrategyPositions(positionStrategy) {\r\n        // Note that we provide horizontal fallback positions, even though by default the dropdown\r\n        // width matches the input, because consumers can override the width. See #18854.\r\n        const belowPositions = [\r\n            { originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top' },\r\n            { originX: 'end', originY: 'bottom', overlayX: 'end', overlayY: 'top' },\r\n        ];\r\n        // The overlay edge connected to the trigger should have squared corners, while\r\n        // the opposite end has rounded corners. We apply a CSS class to swap the\r\n        // border-radius based on the overlay position.\r\n        const panelClass = this._aboveClass;\r\n        const abovePositions = [\r\n            { originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom', panelClass },\r\n            { originX: 'end', originY: 'top', overlayX: 'end', overlayY: 'bottom', panelClass },\r\n        ];\r\n        let positions;\r\n        if (this.position === 'above') {\r\n            positions = abovePositions;\r\n        }\r\n        else if (this.position === 'below') {\r\n            positions = belowPositions;\r\n        }\r\n        else {\r\n            positions = [...belowPositions, ...abovePositions];\r\n        }\r\n        positionStrategy.withPositions(positions);\r\n    }\r\n    _getConnectedElement() {\r\n        if (this.connectedTo) {\r\n            return this.connectedTo.elementRef;\r\n        }\r\n        return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\r\n    }\r\n    _getPanelWidth() {\r\n        return this.autocomplete.panelWidth || this._getHostWidth();\r\n    }\r\n    /** Returns the width of the input element, so the panel width can match it. */\r\n    _getHostWidth() {\r\n        return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\r\n    }\r\n    /**\r\n     * Resets the active item to -1 so arrow events will activate the\r\n     * correct options, or to 0 if the consumer opted into it.\r\n     */\r\n    _resetActiveItem() {\r\n        const autocomplete = this.autocomplete;\r\n        if (autocomplete.autoActiveFirstOption) {\r\n            // Note that we go through `setFirstItemActive`, rather than `setActiveItem(0)`, because\r\n            // the former will find the next enabled option, if the first one is disabled.\r\n            autocomplete._keyManager.setFirstItemActive();\r\n        }\r\n        else {\r\n            autocomplete._keyManager.setActiveItem(-1);\r\n        }\r\n    }\r\n    /** Determines whether the panel can be opened. */\r\n    _canOpen() {\r\n        const element = this._element.nativeElement;\r\n        return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\r\n    }\r\n    /** Use defaultView of injected document if available or fallback to global window reference */\r\n    _getWindow() {\r\n        return this._document?.defaultView || window;\r\n    }\r\n    /** Scrolls to a particular option in the list. */\r\n    _scrollToOption(index) {\r\n        // Given that we are not actually focusing active options, we must manually adjust scroll\r\n        // to reveal options below the fold. First, we find the offset of the option from the top\r\n        // of the panel. If that offset is below the fold, the new scrollTop will be the offset -\r\n        // the panel height + the option height, so the active option will be just visible at the\r\n        // bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\r\n        // will become the offset. If that offset is visible within the panel already, the scrollTop is\r\n        // not adjusted.\r\n        const autocomplete = this.autocomplete;\r\n        const labelCount = _countGroupLabelsBeforeOption(index, autocomplete.options, autocomplete.optionGroups);\r\n        if (index === 0 && labelCount === 1) {\r\n            // If we've got one group label before the option and we're at the top option,\r\n            // scroll the list to the top. This is better UX than scrolling the list to the\r\n            // top of the option, because it allows the user to read the top group's label.\r\n            autocomplete._setScrollTop(0);\r\n        }\r\n        else if (autocomplete.panel) {\r\n            const option = autocomplete.options.toArray()[index];\r\n            if (option) {\r\n                const element = option._getHostElement();\r\n                const newScrollPosition = _getOptionScrollPosition(element.offsetTop, element.offsetHeight, autocomplete._getScrollTop(), autocomplete.panel.nativeElement.offsetHeight);\r\n                autocomplete._setScrollTop(newScrollPosition);\r\n            }\r\n        }\r\n    }\r\n}\r\n_MatAutocompleteTriggerBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: _MatAutocompleteTriggerBase, deps: [{ token: i0.ElementRef }, { token: i1$1.Overlay }, { token: i0.ViewContainerRef }, { token: i0.NgZone }, { token: i0.ChangeDetectorRef }, { token: MAT_AUTOCOMPLETE_SCROLL_STRATEGY }, { token: i2$1.Directionality, optional: true }, { token: MAT_FORM_FIELD, host: true, optional: true }, { token: DOCUMENT, optional: true }, { token: i3.ViewportRuler }, { token: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\r\n_MatAutocompleteTriggerBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.1\", type: _MatAutocompleteTriggerBase, inputs: { autocomplete: [\"matAutocomplete\", \"autocomplete\"], position: [\"matAutocompletePosition\", \"position\"], connectedTo: [\"matAutocompleteConnectedTo\", \"connectedTo\"], autocompleteAttribute: [\"autocomplete\", \"autocompleteAttribute\"], autocompleteDisabled: [\"matAutocompleteDisabled\", \"autocompleteDisabled\"] }, usesOnChanges: true, ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: _MatAutocompleteTriggerBase, decorators: [{\r\n            type: Directive\r\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1$1.Overlay }, { type: i0.ViewContainerRef }, { type: i0.NgZone }, { type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{\r\n                    type: Inject,\r\n                    args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY]\r\n                }] }, { type: i2$1.Directionality, decorators: [{\r\n                    type: Optional\r\n                }] }, { type: i4.MatFormField, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [MAT_FORM_FIELD]\r\n                }, {\r\n                    type: Host\r\n                }] }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [DOCUMENT]\r\n                }] }, { type: i3.ViewportRuler }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\r\n                }] }]; }, propDecorators: { autocomplete: [{\r\n                type: Input,\r\n                args: ['matAutocomplete']\r\n            }], position: [{\r\n                type: Input,\r\n                args: ['matAutocompletePosition']\r\n            }], connectedTo: [{\r\n                type: Input,\r\n                args: ['matAutocompleteConnectedTo']\r\n            }], autocompleteAttribute: [{\r\n                type: Input,\r\n                args: ['autocomplete']\r\n            }], autocompleteDisabled: [{\r\n                type: Input,\r\n                args: ['matAutocompleteDisabled']\r\n            }] } });\r\nclass MatAutocompleteTrigger extends _MatAutocompleteTriggerBase {\r\n    constructor() {\r\n        super(...arguments);\r\n        this._aboveClass = 'mat-autocomplete-panel-above';\r\n    }\r\n}\r\nMatAutocompleteTrigger.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: MatAutocompleteTrigger, deps: null, target: i0.ɵɵFactoryTarget.Directive });\r\nMatAutocompleteTrigger.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.1\", type: MatAutocompleteTrigger, selector: \"input[matAutocomplete], textarea[matAutocomplete]\", host: { listeners: { \"focusin\": \"_handleFocus()\", \"blur\": \"_onTouched()\", \"input\": \"_handleInput($event)\", \"keydown\": \"_handleKeydown($event)\" }, properties: { \"attr.autocomplete\": \"autocompleteAttribute\", \"attr.role\": \"autocompleteDisabled ? null : \\\"combobox\\\"\", \"attr.aria-autocomplete\": \"autocompleteDisabled ? null : \\\"list\\\"\", \"attr.aria-activedescendant\": \"(panelOpen && activeOption) ? activeOption.id : null\", \"attr.aria-expanded\": \"autocompleteDisabled ? null : panelOpen.toString()\", \"attr.aria-owns\": \"(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id\", \"attr.aria-haspopup\": \"!autocompleteDisabled\" }, classAttribute: \"mat-autocomplete-trigger\" }, providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR], exportAs: [\"matAutocompleteTrigger\"], usesInheritance: true, ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: MatAutocompleteTrigger, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: `input[matAutocomplete], textarea[matAutocomplete]`,\r\n                    host: {\r\n                        'class': 'mat-autocomplete-trigger',\r\n                        '[attr.autocomplete]': 'autocompleteAttribute',\r\n                        '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\r\n                        '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\r\n                        '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\r\n                        '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\r\n                        '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\r\n                        '[attr.aria-haspopup]': '!autocompleteDisabled',\r\n                        // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\r\n                        // a little earlier. This avoids issues where IE delays the focusing of the input.\r\n                        '(focusin)': '_handleFocus()',\r\n                        '(blur)': '_onTouched()',\r\n                        '(input)': '_handleInput($event)',\r\n                        '(keydown)': '_handleKeydown($event)',\r\n                    },\r\n                    exportAs: 'matAutocompleteTrigger',\r\n                    providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR],\r\n                }]\r\n        }] });\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nclass MatAutocompleteModule {\r\n}\r\nMatAutocompleteModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: MatAutocompleteModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\nMatAutocompleteModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: MatAutocompleteModule, declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin], imports: [OverlayModule, MatOptionModule, MatCommonModule, CommonModule], exports: [MatAutocomplete,\r\n        MatAutocompleteTrigger,\r\n        MatAutocompleteOrigin,\r\n        CdkScrollableModule,\r\n        MatOptionModule,\r\n        MatCommonModule] });\r\nMatAutocompleteModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: MatAutocompleteModule, providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [[OverlayModule, MatOptionModule, MatCommonModule, CommonModule], CdkScrollableModule,\r\n        MatOptionModule,\r\n        MatCommonModule] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: MatAutocompleteModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    imports: [OverlayModule, MatOptionModule, MatCommonModule, CommonModule],\r\n                    exports: [\r\n                        MatAutocomplete,\r\n                        MatAutocompleteTrigger,\r\n                        MatAutocompleteOrigin,\r\n                        CdkScrollableModule,\r\n                        MatOptionModule,\r\n                        MatCommonModule,\r\n                    ],\r\n                    declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\r\n                    providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\r\n                }]\r\n        }] });\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_AUTOCOMPLETE_VALUE_ACCESSOR, MatAutocomplete, MatAutocompleteModule, MatAutocompleteOrigin, MatAutocompleteSelectedEvent, MatAutocompleteTrigger, _MatAutocompleteBase, _MatAutocompleteOriginBase, _MatAutocompleteTriggerBase, getMatAutocompleteMissingPanelError };\r\n\n"]},"metadata":{},"sourceType":"module"}