{"ast":null,"code":"import * as i1 from '@angular/cdk/tree';\nimport { CdkTreeNode, CdkTreeNodeDef, CdkNestedTreeNode, CDK_TREE_NODE_OUTLET_NODE, CdkTreeNodePadding, CdkTreeNodeOutlet, CdkTree, CdkTreeNodeToggle, CdkTreeModule } from '@angular/cdk/tree';\nimport * as i0 from '@angular/core';\nimport { Directive, Attribute, Input, Inject, Optional, Component, ViewEncapsulation, ChangeDetectionStrategy, ViewChild, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinDisabled, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { DataSource } from '@angular/cdk/collections';\nimport { BehaviorSubject, merge } from 'rxjs';\nimport { take, map } from 'rxjs/operators';\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\nconst _MatTreeNodeBase = mixinTabIndex(mixinDisabled(CdkTreeNode));\n/**\r\n * Wrapper for the CdkTree node with Material design styles.\r\n */\n\n\nclass MatTreeNode extends _MatTreeNodeBase {\n  constructor(elementRef, tree, tabIndex) {\n    super(elementRef, tree);\n    this.tabIndex = Number(tabIndex) || 0;\n  } // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n\n\n  ngOnInit() {\n    super.ngOnInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n\n}\n\nMatTreeNode.ɵfac = function MatTreeNode_Factory(t) {\n  return new (t || MatTreeNode)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.CdkTree), i0.ɵɵinjectAttribute('tabindex'));\n};\n\nMatTreeNode.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatTreeNode,\n  selectors: [[\"mat-tree-node\"]],\n  hostAttrs: [1, \"mat-tree-node\"],\n  inputs: {\n    role: \"role\",\n    disabled: \"disabled\",\n    tabIndex: \"tabIndex\"\n  },\n  exportAs: [\"matTreeNode\"],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: CdkTreeNode,\n    useExisting: MatTreeNode\n  }]), i0.ɵɵInheritDefinitionFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatTreeNode, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-tree-node',\n      exportAs: 'matTreeNode',\n      inputs: ['role', 'disabled', 'tabIndex'],\n      providers: [{\n        provide: CdkTreeNode,\n        useExisting: MatTreeNode\n      }],\n      host: {\n        'class': 'mat-tree-node'\n      }\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i1.CdkTree\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Attribute,\n        args: ['tabindex']\n      }]\n    }];\n  }, null);\n})();\n/**\r\n * Wrapper for the CdkTree node definition with Material design styles.\r\n * Captures the node's template and a when predicate that describes when this node should be used.\r\n */\n\n\nclass MatTreeNodeDef extends CdkTreeNodeDef {}\n\nMatTreeNodeDef.ɵfac = /* @__PURE__ */function () {\n  let ɵMatTreeNodeDef_BaseFactory;\n  return function MatTreeNodeDef_Factory(t) {\n    return (ɵMatTreeNodeDef_BaseFactory || (ɵMatTreeNodeDef_BaseFactory = i0.ɵɵgetInheritedFactory(MatTreeNodeDef)))(t || MatTreeNodeDef);\n  };\n}();\n\nMatTreeNodeDef.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatTreeNodeDef,\n  selectors: [[\"\", \"matTreeNodeDef\", \"\"]],\n  inputs: {\n    when: [\"matTreeNodeDefWhen\", \"when\"],\n    data: [\"matTreeNode\", \"data\"]\n  },\n  features: [i0.ɵɵProvidersFeature([{\n    provide: CdkTreeNodeDef,\n    useExisting: MatTreeNodeDef\n  }]), i0.ɵɵInheritDefinitionFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatTreeNodeDef, [{\n    type: Directive,\n    args: [{\n      selector: '[matTreeNodeDef]',\n      inputs: ['when: matTreeNodeDefWhen'],\n      providers: [{\n        provide: CdkTreeNodeDef,\n        useExisting: MatTreeNodeDef\n      }]\n    }]\n  }], null, {\n    data: [{\n      type: Input,\n      args: ['matTreeNode']\n    }]\n  });\n})();\n/**\r\n * Wrapper for the CdkTree nested node with Material design styles.\r\n */\n\n\nclass MatNestedTreeNode extends CdkNestedTreeNode {\n  constructor(elementRef, tree, differs, tabIndex) {\n    super(elementRef, tree, differs);\n    this._disabled = false;\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n  /** Whether the node is disabled. */\n\n\n  get disabled() {\n    return this._disabled;\n  }\n\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  /** Tabindex for the node. */\n\n\n  get tabIndex() {\n    return this.disabled ? -1 : this._tabIndex;\n  }\n\n  set tabIndex(value) {\n    // If the specified tabIndex value is null or undefined, fall back to the default value.\n    this._tabIndex = value != null ? value : 0;\n  } // This is a workaround for https://github.com/angular/angular/issues/19145\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #19145 is fixed\n\n\n  ngOnInit() {\n    super.ngOnInit();\n  }\n\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n\n}\n\nMatNestedTreeNode.ɵfac = function MatNestedTreeNode_Factory(t) {\n  return new (t || MatNestedTreeNode)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.CdkTree), i0.ɵɵdirectiveInject(i0.IterableDiffers), i0.ɵɵinjectAttribute('tabindex'));\n};\n\nMatNestedTreeNode.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatNestedTreeNode,\n  selectors: [[\"mat-nested-tree-node\"]],\n  hostAttrs: [1, \"mat-nested-tree-node\"],\n  inputs: {\n    role: \"role\",\n    disabled: \"disabled\",\n    tabIndex: \"tabIndex\",\n    node: [\"matNestedTreeNode\", \"node\"]\n  },\n  exportAs: [\"matNestedTreeNode\"],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: CdkNestedTreeNode,\n    useExisting: MatNestedTreeNode\n  }, {\n    provide: CdkTreeNode,\n    useExisting: MatNestedTreeNode\n  }, {\n    provide: CDK_TREE_NODE_OUTLET_NODE,\n    useExisting: MatNestedTreeNode\n  }]), i0.ɵɵInheritDefinitionFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatNestedTreeNode, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-nested-tree-node',\n      exportAs: 'matNestedTreeNode',\n      inputs: ['role', 'disabled', 'tabIndex'],\n      providers: [{\n        provide: CdkNestedTreeNode,\n        useExisting: MatNestedTreeNode\n      }, {\n        provide: CdkTreeNode,\n        useExisting: MatNestedTreeNode\n      }, {\n        provide: CDK_TREE_NODE_OUTLET_NODE,\n        useExisting: MatNestedTreeNode\n      }],\n      host: {\n        'class': 'mat-nested-tree-node'\n      }\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i1.CdkTree\n    }, {\n      type: i0.IterableDiffers\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Attribute,\n        args: ['tabindex']\n      }]\n    }];\n  }, {\n    node: [{\n      type: Input,\n      args: ['matNestedTreeNode']\n    }],\n    disabled: [{\n      type: Input\n    }],\n    tabIndex: [{\n      type: Input\n    }]\n  });\n})();\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * Wrapper for the CdkTree padding with Material design styles.\r\n */\n\n\nclass MatTreeNodePadding extends CdkTreeNodePadding {\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  get level() {\n    return this._level;\n  }\n\n  set level(value) {\n    this._setLevelInput(value);\n  }\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n\n\n  get indent() {\n    return this._indent;\n  }\n\n  set indent(indent) {\n    this._setIndentInput(indent);\n  }\n\n}\n\nMatTreeNodePadding.ɵfac = /* @__PURE__ */function () {\n  let ɵMatTreeNodePadding_BaseFactory;\n  return function MatTreeNodePadding_Factory(t) {\n    return (ɵMatTreeNodePadding_BaseFactory || (ɵMatTreeNodePadding_BaseFactory = i0.ɵɵgetInheritedFactory(MatTreeNodePadding)))(t || MatTreeNodePadding);\n  };\n}();\n\nMatTreeNodePadding.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatTreeNodePadding,\n  selectors: [[\"\", \"matTreeNodePadding\", \"\"]],\n  inputs: {\n    level: [\"matTreeNodePadding\", \"level\"],\n    indent: [\"matTreeNodePaddingIndent\", \"indent\"]\n  },\n  features: [i0.ɵɵProvidersFeature([{\n    provide: CdkTreeNodePadding,\n    useExisting: MatTreeNodePadding\n  }]), i0.ɵɵInheritDefinitionFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatTreeNodePadding, [{\n    type: Directive,\n    args: [{\n      selector: '[matTreeNodePadding]',\n      providers: [{\n        provide: CdkTreeNodePadding,\n        useExisting: MatTreeNodePadding\n      }]\n    }]\n  }], null, {\n    level: [{\n      type: Input,\n      args: ['matTreeNodePadding']\n    }],\n    indent: [{\n      type: Input,\n      args: ['matTreeNodePaddingIndent']\n    }]\n  });\n})();\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\r\n * inside the outlet.\r\n */\n\n\nclass MatTreeNodeOutlet {\n  constructor(viewContainer, _node) {\n    this.viewContainer = viewContainer;\n    this._node = _node;\n  }\n\n}\n\nMatTreeNodeOutlet.ɵfac = function MatTreeNodeOutlet_Factory(t) {\n  return new (t || MatTreeNodeOutlet)(i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(CDK_TREE_NODE_OUTLET_NODE, 8));\n};\n\nMatTreeNodeOutlet.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatTreeNodeOutlet,\n  selectors: [[\"\", \"matTreeNodeOutlet\", \"\"]],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: CdkTreeNodeOutlet,\n    useExisting: MatTreeNodeOutlet\n  }])]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatTreeNodeOutlet, [{\n    type: Directive,\n    args: [{\n      selector: '[matTreeNodeOutlet]',\n      providers: [{\n        provide: CdkTreeNodeOutlet,\n        useExisting: MatTreeNodeOutlet\n      }]\n    }]\n  }], function () {\n    return [{\n      type: i0.ViewContainerRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [CDK_TREE_NODE_OUTLET_NODE]\n      }, {\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * Wrapper for the CdkTable with Material design styles.\r\n */\n\n\nclass MatTree extends CdkTree {}\n\nMatTree.ɵfac = /* @__PURE__ */function () {\n  let ɵMatTree_BaseFactory;\n  return function MatTree_Factory(t) {\n    return (ɵMatTree_BaseFactory || (ɵMatTree_BaseFactory = i0.ɵɵgetInheritedFactory(MatTree)))(t || MatTree);\n  };\n}();\n\nMatTree.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MatTree,\n  selectors: [[\"mat-tree\"]],\n  viewQuery: function MatTree_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(MatTreeNodeOutlet, 7);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._nodeOutlet = _t.first);\n    }\n  },\n  hostAttrs: [\"role\", \"tree\", 1, \"mat-tree\"],\n  exportAs: [\"matTree\"],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: CdkTree,\n    useExisting: MatTree\n  }]), i0.ɵɵInheritDefinitionFeature],\n  decls: 1,\n  vars: 0,\n  consts: [[\"matTreeNodeOutlet\", \"\"]],\n  template: function MatTree_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementContainer(0, 0);\n    }\n  },\n  directives: [MatTreeNodeOutlet],\n  styles: [\".mat-tree{display:block}.mat-tree-node{display:flex;align-items:center;flex:1;word-wrap:break-word}.mat-nested-tree-node{border-bottom-width:0}\\n\"],\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatTree, [{\n    type: Component,\n    args: [{\n      selector: 'mat-tree',\n      exportAs: 'matTree',\n      template: `<ng-container matTreeNodeOutlet></ng-container>`,\n      host: {\n        'class': 'mat-tree',\n        'role': 'tree'\n      },\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.Default,\n      providers: [{\n        provide: CdkTree,\n        useExisting: MatTree\n      }],\n      styles: [\".mat-tree{display:block}.mat-tree-node{display:flex;align-items:center;flex:1;word-wrap:break-word}.mat-nested-tree-node{border-bottom-width:0}\\n\"]\n    }]\n  }], null, {\n    _nodeOutlet: [{\n      type: ViewChild,\n      args: [MatTreeNodeOutlet, {\n        static: true\n      }]\n    }]\n  });\n})();\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * Wrapper for the CdkTree's toggle with Material design styles.\r\n */\n// tslint:disable-next-line: coercion-types\n\n\nclass MatTreeNodeToggle extends CdkTreeNodeToggle {\n  get recursive() {\n    return this._recursive;\n  }\n\n  set recursive(value) {\n    // TODO: when we remove support for ViewEngine, change this setter to an input\n    // alias in the decorator metadata.\n    this._recursive = coerceBooleanProperty(value);\n  }\n\n}\n\nMatTreeNodeToggle.ɵfac = /* @__PURE__ */function () {\n  let ɵMatTreeNodeToggle_BaseFactory;\n  return function MatTreeNodeToggle_Factory(t) {\n    return (ɵMatTreeNodeToggle_BaseFactory || (ɵMatTreeNodeToggle_BaseFactory = i0.ɵɵgetInheritedFactory(MatTreeNodeToggle)))(t || MatTreeNodeToggle);\n  };\n}();\n\nMatTreeNodeToggle.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatTreeNodeToggle,\n  selectors: [[\"\", \"matTreeNodeToggle\", \"\"]],\n  inputs: {\n    recursive: [\"matTreeNodeToggleRecursive\", \"recursive\"]\n  },\n  features: [i0.ɵɵProvidersFeature([{\n    provide: CdkTreeNodeToggle,\n    useExisting: MatTreeNodeToggle\n  }]), i0.ɵɵInheritDefinitionFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatTreeNodeToggle, [{\n    type: Directive,\n    args: [{\n      selector: '[matTreeNodeToggle]',\n      providers: [{\n        provide: CdkTreeNodeToggle,\n        useExisting: MatTreeNodeToggle\n      }]\n    }]\n  }], null, {\n    recursive: [{\n      type: Input,\n      args: ['matTreeNodeToggleRecursive']\n    }]\n  });\n})();\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nconst MAT_TREE_DIRECTIVES = [MatNestedTreeNode, MatTreeNodeDef, MatTreeNodePadding, MatTreeNodeToggle, MatTree, MatTreeNode, MatTreeNodeOutlet];\n\nclass MatTreeModule {}\n\nMatTreeModule.ɵfac = function MatTreeModule_Factory(t) {\n  return new (t || MatTreeModule)();\n};\n\nMatTreeModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: MatTreeModule\n});\nMatTreeModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CdkTreeModule, MatCommonModule], MatCommonModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatTreeModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CdkTreeModule, MatCommonModule],\n      exports: [MatCommonModule, MAT_TREE_DIRECTIVES],\n      declarations: MAT_TREE_DIRECTIVES\n    }]\n  }], null, null);\n})();\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * Tree flattener to convert a normal type of node to node with children & level information.\r\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\r\n *\r\n * For example, the input data of type `T` is nested, and contains its children data:\r\n *   SomeNode: {\r\n *     key: 'Fruits',\r\n *     children: [\r\n *       NodeOne: {\r\n *         key: 'Apple',\r\n *       },\r\n *       NodeTwo: {\r\n *        key: 'Pear',\r\n *      }\r\n *    ]\r\n *  }\r\n *  After flattener flatten the tree, the structure will become\r\n *  SomeNode: {\r\n *    key: 'Fruits',\r\n *    expandable: true,\r\n *    level: 1\r\n *  },\r\n *  NodeOne: {\r\n *    key: 'Apple',\r\n *    expandable: false,\r\n *    level: 2\r\n *  },\r\n *  NodeTwo: {\r\n *   key: 'Pear',\r\n *   expandable: false,\r\n *   level: 2\r\n * }\r\n * and the output flattened type is `F` with additional information.\r\n */\n\n\nclass MatTreeFlattener {\n  constructor(transformFunction, getLevel, isExpandable, getChildren) {\n    this.transformFunction = transformFunction;\n    this.getLevel = getLevel;\n    this.isExpandable = isExpandable;\n    this.getChildren = getChildren;\n  }\n\n  _flattenNode(node, level, resultNodes, parentMap) {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n\n      if (childrenNodes) {\n        if (Array.isArray(childrenNodes)) {\n          this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n        } else {\n          childrenNodes.pipe(take(1)).subscribe(children => {\n            this._flattenChildren(children, level, resultNodes, parentMap);\n          });\n        }\n      }\n    }\n\n    return resultNodes;\n  }\n\n  _flattenChildren(children, level, resultNodes, parentMap) {\n    children.forEach((child, index) => {\n      let childParentMap = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n  /**\r\n   * Flatten a list of node type T to flattened version of node F.\r\n   * Please note that type T may be nested, and the length of `structuredData` may be different\r\n   * from that of returned list `F[]`.\r\n   */\n\n\n  flattenNodes(structuredData) {\n    let resultNodes = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n  /**\r\n   * Expand flattened node with current expansion status.\r\n   * The returned list may have different length.\r\n   */\n\n\n  expandFlattenedNodes(nodes, treeControl) {\n    let results = [];\n    let currentExpand = [];\n    currentExpand[0] = true;\n    nodes.forEach(node => {\n      let expand = true;\n\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n\n      if (expand) {\n        results.push(node);\n      }\n\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n\n}\n/**\r\n * Data source for flat tree.\r\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\r\n * to `MatTree`.\r\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\r\n * to type `F` for `MatTree` to consume.\r\n */\n\n\nclass MatTreeFlatDataSource extends DataSource {\n  constructor(_treeControl, _treeFlattener, initialData) {\n    super();\n    this._treeControl = _treeControl;\n    this._treeFlattener = _treeFlattener;\n    this._flattenedData = new BehaviorSubject([]);\n    this._expandedData = new BehaviorSubject([]);\n    this._data = new BehaviorSubject([]);\n\n    if (initialData) {\n      // Assign the data through the constructor to ensure that all of the logic is executed.\n      this.data = initialData;\n    }\n  }\n\n  get data() {\n    return this._data.value;\n  }\n\n  set data(value) {\n    this._data.next(value);\n\n    this._flattenedData.next(this._treeFlattener.flattenNodes(this.data));\n\n    this._treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  connect(collectionViewer) {\n    return merge(collectionViewer.viewChange, this._treeControl.expansionModel.changed, this._flattenedData).pipe(map(() => {\n      this._expandedData.next(this._treeFlattener.expandFlattenedNodes(this._flattenedData.value, this._treeControl));\n\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {// no op\n  }\n\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * Data source for nested tree.\r\n *\r\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\r\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\r\n */\n\n\nclass MatTreeNestedDataSource extends DataSource {\n  constructor() {\n    super(...arguments);\n    this._data = new BehaviorSubject([]);\n  }\n  /**\r\n   * Data for the nested tree\r\n   */\n\n\n  get data() {\n    return this._data.value;\n  }\n\n  set data(value) {\n    this._data.next(value);\n  }\n\n  connect(collectionViewer) {\n    return merge(...[collectionViewer.viewChange, this._data]).pipe(map(() => this.data));\n  }\n\n  disconnect() {// no op\n  }\n\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { MatNestedTreeNode, MatTree, MatTreeFlatDataSource, MatTreeFlattener, MatTreeModule, MatTreeNestedDataSource, MatTreeNode, MatTreeNodeDef, MatTreeNodeOutlet, MatTreeNodePadding, MatTreeNodeToggle };","map":{"version":3,"sources":["C:/Users/DC8SunX53/Documents/VSCODE_Project_questMe/questme/admin-interface/node_modules/@angular/material/fesm2020/tree.mjs"],"names":["i1","CdkTreeNode","CdkTreeNodeDef","CdkNestedTreeNode","CDK_TREE_NODE_OUTLET_NODE","CdkTreeNodePadding","CdkTreeNodeOutlet","CdkTree","CdkTreeNodeToggle","CdkTreeModule","i0","Directive","Attribute","Input","Inject","Optional","Component","ViewEncapsulation","ChangeDetectionStrategy","ViewChild","NgModule","mixinTabIndex","mixinDisabled","MatCommonModule","coerceBooleanProperty","DataSource","BehaviorSubject","merge","take","map","_MatTreeNodeBase","MatTreeNode","constructor","elementRef","tree","tabIndex","Number","ngOnInit","ngOnDestroy","ɵfac","ElementRef","ɵdir","provide","useExisting","type","args","selector","exportAs","inputs","providers","host","undefined","decorators","MatTreeNodeDef","data","MatNestedTreeNode","differs","_disabled","disabled","value","_tabIndex","ngAfterContentInit","IterableDiffers","node","MatTreeNodePadding","level","_level","_setLevelInput","indent","_indent","_setIndentInput","MatTreeNodeOutlet","viewContainer","_node","ViewContainerRef","MatTree","ɵcmp","template","encapsulation","None","changeDetection","Default","styles","_nodeOutlet","static","MatTreeNodeToggle","recursive","_recursive","MAT_TREE_DIRECTIVES","MatTreeModule","ɵmod","ɵinj","imports","exports","declarations","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","childrenNodes","Array","isArray","_flattenChildren","pipe","subscribe","children","forEach","child","index","childParentMap","slice","length","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","_treeControl","_treeFlattener","initialData","_flattenedData","_expandedData","_data","next","dataNodes","connect","collectionViewer","viewChange","expansionModel","changed","disconnect","MatTreeNestedDataSource","arguments"],"mappings":"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","sourcesContent":["import * as i1 from '@angular/cdk/tree';\r\nimport { CdkTreeNode, CdkTreeNodeDef, CdkNestedTreeNode, CDK_TREE_NODE_OUTLET_NODE, CdkTreeNodePadding, CdkTreeNodeOutlet, CdkTree, CdkTreeNodeToggle, CdkTreeModule } from '@angular/cdk/tree';\r\nimport * as i0 from '@angular/core';\r\nimport { Directive, Attribute, Input, Inject, Optional, Component, ViewEncapsulation, ChangeDetectionStrategy, ViewChild, NgModule } from '@angular/core';\r\nimport { mixinTabIndex, mixinDisabled, MatCommonModule } from '@angular/material/core';\r\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\r\nimport { DataSource } from '@angular/cdk/collections';\r\nimport { BehaviorSubject, merge } from 'rxjs';\r\nimport { take, map } from 'rxjs/operators';\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst _MatTreeNodeBase = mixinTabIndex(mixinDisabled(CdkTreeNode));\r\n/**\r\n * Wrapper for the CdkTree node with Material design styles.\r\n */\r\nclass MatTreeNode extends _MatTreeNodeBase {\r\n    constructor(elementRef, tree, tabIndex) {\r\n        super(elementRef, tree);\r\n        this.tabIndex = Number(tabIndex) || 0;\r\n    }\r\n    // This is a workaround for https://github.com/angular/angular/issues/23091\r\n    // In aot mode, the lifecycle hooks from parent class are not called.\r\n    ngOnInit() {\r\n        super.ngOnInit();\r\n    }\r\n    ngOnDestroy() {\r\n        super.ngOnDestroy();\r\n    }\r\n}\r\nMatTreeNode.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: MatTreeNode, deps: [{ token: i0.ElementRef }, { token: i1.CdkTree }, { token: 'tabindex', attribute: true }], target: i0.ɵɵFactoryTarget.Directive });\r\nMatTreeNode.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.1\", type: MatTreeNode, selector: \"mat-tree-node\", inputs: { role: \"role\", disabled: \"disabled\", tabIndex: \"tabIndex\" }, host: { classAttribute: \"mat-tree-node\" }, providers: [{ provide: CdkTreeNode, useExisting: MatTreeNode }], exportAs: [\"matTreeNode\"], usesInheritance: true, ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: MatTreeNode, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: 'mat-tree-node',\r\n                    exportAs: 'matTreeNode',\r\n                    inputs: ['role', 'disabled', 'tabIndex'],\r\n                    providers: [{ provide: CdkTreeNode, useExisting: MatTreeNode }],\r\n                    host: {\r\n                        'class': 'mat-tree-node',\r\n                    },\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.CdkTree }, { type: undefined, decorators: [{\r\n                    type: Attribute,\r\n                    args: ['tabindex']\r\n                }] }]; } });\r\n/**\r\n * Wrapper for the CdkTree node definition with Material design styles.\r\n * Captures the node's template and a when predicate that describes when this node should be used.\r\n */\r\nclass MatTreeNodeDef extends CdkTreeNodeDef {\r\n}\r\nMatTreeNodeDef.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: MatTreeNodeDef, deps: null, target: i0.ɵɵFactoryTarget.Directive });\r\nMatTreeNodeDef.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.1\", type: MatTreeNodeDef, selector: \"[matTreeNodeDef]\", inputs: { when: [\"matTreeNodeDefWhen\", \"when\"], data: [\"matTreeNode\", \"data\"] }, providers: [{ provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef }], usesInheritance: true, ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: MatTreeNodeDef, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: '[matTreeNodeDef]',\r\n                    inputs: ['when: matTreeNodeDefWhen'],\r\n                    providers: [{ provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef }],\r\n                }]\r\n        }], propDecorators: { data: [{\r\n                type: Input,\r\n                args: ['matTreeNode']\r\n            }] } });\r\n/**\r\n * Wrapper for the CdkTree nested node with Material design styles.\r\n */\r\nclass MatNestedTreeNode extends CdkNestedTreeNode {\r\n    constructor(elementRef, tree, differs, tabIndex) {\r\n        super(elementRef, tree, differs);\r\n        this._disabled = false;\r\n        this.tabIndex = Number(tabIndex) || 0;\r\n    }\r\n    /** Whether the node is disabled. */\r\n    get disabled() {\r\n        return this._disabled;\r\n    }\r\n    set disabled(value) {\r\n        this._disabled = coerceBooleanProperty(value);\r\n    }\r\n    /** Tabindex for the node. */\r\n    get tabIndex() {\r\n        return this.disabled ? -1 : this._tabIndex;\r\n    }\r\n    set tabIndex(value) {\r\n        // If the specified tabIndex value is null or undefined, fall back to the default value.\r\n        this._tabIndex = value != null ? value : 0;\r\n    }\r\n    // This is a workaround for https://github.com/angular/angular/issues/19145\r\n    // In aot mode, the lifecycle hooks from parent class are not called.\r\n    // TODO(tinayuangao): Remove when the angular issue #19145 is fixed\r\n    ngOnInit() {\r\n        super.ngOnInit();\r\n    }\r\n    ngAfterContentInit() {\r\n        super.ngAfterContentInit();\r\n    }\r\n    ngOnDestroy() {\r\n        super.ngOnDestroy();\r\n    }\r\n}\r\nMatNestedTreeNode.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: MatNestedTreeNode, deps: [{ token: i0.ElementRef }, { token: i1.CdkTree }, { token: i0.IterableDiffers }, { token: 'tabindex', attribute: true }], target: i0.ɵɵFactoryTarget.Directive });\r\nMatNestedTreeNode.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.1\", type: MatNestedTreeNode, selector: \"mat-nested-tree-node\", inputs: { role: \"role\", disabled: \"disabled\", tabIndex: \"tabIndex\", node: [\"matNestedTreeNode\", \"node\"] }, host: { classAttribute: \"mat-nested-tree-node\" }, providers: [\r\n        { provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode },\r\n        { provide: CdkTreeNode, useExisting: MatNestedTreeNode },\r\n        { provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: MatNestedTreeNode },\r\n    ], exportAs: [\"matNestedTreeNode\"], usesInheritance: true, ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: MatNestedTreeNode, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: 'mat-nested-tree-node',\r\n                    exportAs: 'matNestedTreeNode',\r\n                    inputs: ['role', 'disabled', 'tabIndex'],\r\n                    providers: [\r\n                        { provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode },\r\n                        { provide: CdkTreeNode, useExisting: MatNestedTreeNode },\r\n                        { provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: MatNestedTreeNode },\r\n                    ],\r\n                    host: {\r\n                        'class': 'mat-nested-tree-node',\r\n                    },\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.CdkTree }, { type: i0.IterableDiffers }, { type: undefined, decorators: [{\r\n                    type: Attribute,\r\n                    args: ['tabindex']\r\n                }] }]; }, propDecorators: { node: [{\r\n                type: Input,\r\n                args: ['matNestedTreeNode']\r\n            }], disabled: [{\r\n                type: Input\r\n            }], tabIndex: [{\r\n                type: Input\r\n            }] } });\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Wrapper for the CdkTree padding with Material design styles.\r\n */\r\nclass MatTreeNodePadding extends CdkTreeNodePadding {\r\n    /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\r\n    get level() {\r\n        return this._level;\r\n    }\r\n    set level(value) {\r\n        this._setLevelInput(value);\r\n    }\r\n    /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\r\n    get indent() {\r\n        return this._indent;\r\n    }\r\n    set indent(indent) {\r\n        this._setIndentInput(indent);\r\n    }\r\n}\r\nMatTreeNodePadding.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: MatTreeNodePadding, deps: null, target: i0.ɵɵFactoryTarget.Directive });\r\nMatTreeNodePadding.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.1\", type: MatTreeNodePadding, selector: \"[matTreeNodePadding]\", inputs: { level: [\"matTreeNodePadding\", \"level\"], indent: [\"matTreeNodePaddingIndent\", \"indent\"] }, providers: [{ provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding }], usesInheritance: true, ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: MatTreeNodePadding, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: '[matTreeNodePadding]',\r\n                    providers: [{ provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding }],\r\n                }]\r\n        }], propDecorators: { level: [{\r\n                type: Input,\r\n                args: ['matTreeNodePadding']\r\n            }], indent: [{\r\n                type: Input,\r\n                args: ['matTreeNodePaddingIndent']\r\n            }] } });\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\r\n * inside the outlet.\r\n */\r\nclass MatTreeNodeOutlet {\r\n    constructor(viewContainer, _node) {\r\n        this.viewContainer = viewContainer;\r\n        this._node = _node;\r\n    }\r\n}\r\nMatTreeNodeOutlet.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: MatTreeNodeOutlet, deps: [{ token: i0.ViewContainerRef }, { token: CDK_TREE_NODE_OUTLET_NODE, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\r\nMatTreeNodeOutlet.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.1\", type: MatTreeNodeOutlet, selector: \"[matTreeNodeOutlet]\", providers: [\r\n        {\r\n            provide: CdkTreeNodeOutlet,\r\n            useExisting: MatTreeNodeOutlet,\r\n        },\r\n    ], ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: MatTreeNodeOutlet, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: '[matTreeNodeOutlet]',\r\n                    providers: [\r\n                        {\r\n                            provide: CdkTreeNodeOutlet,\r\n                            useExisting: MatTreeNodeOutlet,\r\n                        },\r\n                    ],\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }, { type: undefined, decorators: [{\r\n                    type: Inject,\r\n                    args: [CDK_TREE_NODE_OUTLET_NODE]\r\n                }, {\r\n                    type: Optional\r\n                }] }]; } });\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Wrapper for the CdkTable with Material design styles.\r\n */\r\nclass MatTree extends CdkTree {\r\n}\r\nMatTree.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: MatTree, deps: null, target: i0.ɵɵFactoryTarget.Component });\r\nMatTree.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.0.1\", type: MatTree, selector: \"mat-tree\", host: { attributes: { \"role\": \"tree\" }, classAttribute: \"mat-tree\" }, providers: [{ provide: CdkTree, useExisting: MatTree }], viewQueries: [{ propertyName: \"_nodeOutlet\", first: true, predicate: MatTreeNodeOutlet, descendants: true, static: true }], exportAs: [\"matTree\"], usesInheritance: true, ngImport: i0, template: `<ng-container matTreeNodeOutlet></ng-container>`, isInline: true, styles: [\".mat-tree{display:block}.mat-tree-node{display:flex;align-items:center;flex:1;word-wrap:break-word}.mat-nested-tree-node{border-bottom-width:0}\\n\"], directives: [{ type: MatTreeNodeOutlet, selector: \"[matTreeNodeOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: MatTree, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: 'mat-tree', exportAs: 'matTree', template: `<ng-container matTreeNodeOutlet></ng-container>`, host: {\r\n                        'class': 'mat-tree',\r\n                        'role': 'tree',\r\n                    }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.Default, providers: [{ provide: CdkTree, useExisting: MatTree }], styles: [\".mat-tree{display:block}.mat-tree-node{display:flex;align-items:center;flex:1;word-wrap:break-word}.mat-nested-tree-node{border-bottom-width:0}\\n\"] }]\r\n        }], propDecorators: { _nodeOutlet: [{\r\n                type: ViewChild,\r\n                args: [MatTreeNodeOutlet, { static: true }]\r\n            }] } });\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Wrapper for the CdkTree's toggle with Material design styles.\r\n */\r\n// tslint:disable-next-line: coercion-types\r\nclass MatTreeNodeToggle extends CdkTreeNodeToggle {\r\n    get recursive() {\r\n        return this._recursive;\r\n    }\r\n    set recursive(value) {\r\n        // TODO: when we remove support for ViewEngine, change this setter to an input\r\n        // alias in the decorator metadata.\r\n        this._recursive = coerceBooleanProperty(value);\r\n    }\r\n}\r\nMatTreeNodeToggle.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: MatTreeNodeToggle, deps: null, target: i0.ɵɵFactoryTarget.Directive });\r\nMatTreeNodeToggle.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.1\", type: MatTreeNodeToggle, selector: \"[matTreeNodeToggle]\", inputs: { recursive: [\"matTreeNodeToggleRecursive\", \"recursive\"] }, providers: [{ provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle }], usesInheritance: true, ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: MatTreeNodeToggle, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: '[matTreeNodeToggle]',\r\n                    providers: [{ provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle }],\r\n                }]\r\n        }], propDecorators: { recursive: [{\r\n                type: Input,\r\n                args: ['matTreeNodeToggleRecursive']\r\n            }] } });\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst MAT_TREE_DIRECTIVES = [\r\n    MatNestedTreeNode,\r\n    MatTreeNodeDef,\r\n    MatTreeNodePadding,\r\n    MatTreeNodeToggle,\r\n    MatTree,\r\n    MatTreeNode,\r\n    MatTreeNodeOutlet,\r\n];\r\nclass MatTreeModule {\r\n}\r\nMatTreeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: MatTreeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\nMatTreeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: MatTreeModule, declarations: [MatNestedTreeNode,\r\n        MatTreeNodeDef,\r\n        MatTreeNodePadding,\r\n        MatTreeNodeToggle,\r\n        MatTree,\r\n        MatTreeNode,\r\n        MatTreeNodeOutlet], imports: [CdkTreeModule, MatCommonModule], exports: [MatCommonModule, MatNestedTreeNode,\r\n        MatTreeNodeDef,\r\n        MatTreeNodePadding,\r\n        MatTreeNodeToggle,\r\n        MatTree,\r\n        MatTreeNode,\r\n        MatTreeNodeOutlet] });\r\nMatTreeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: MatTreeModule, imports: [[CdkTreeModule, MatCommonModule], MatCommonModule] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: MatTreeModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    imports: [CdkTreeModule, MatCommonModule],\r\n                    exports: [MatCommonModule, MAT_TREE_DIRECTIVES],\r\n                    declarations: MAT_TREE_DIRECTIVES,\r\n                }]\r\n        }] });\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Tree flattener to convert a normal type of node to node with children & level information.\r\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\r\n *\r\n * For example, the input data of type `T` is nested, and contains its children data:\r\n *   SomeNode: {\r\n *     key: 'Fruits',\r\n *     children: [\r\n *       NodeOne: {\r\n *         key: 'Apple',\r\n *       },\r\n *       NodeTwo: {\r\n *        key: 'Pear',\r\n *      }\r\n *    ]\r\n *  }\r\n *  After flattener flatten the tree, the structure will become\r\n *  SomeNode: {\r\n *    key: 'Fruits',\r\n *    expandable: true,\r\n *    level: 1\r\n *  },\r\n *  NodeOne: {\r\n *    key: 'Apple',\r\n *    expandable: false,\r\n *    level: 2\r\n *  },\r\n *  NodeTwo: {\r\n *   key: 'Pear',\r\n *   expandable: false,\r\n *   level: 2\r\n * }\r\n * and the output flattened type is `F` with additional information.\r\n */\r\nclass MatTreeFlattener {\r\n    constructor(transformFunction, getLevel, isExpandable, getChildren) {\r\n        this.transformFunction = transformFunction;\r\n        this.getLevel = getLevel;\r\n        this.isExpandable = isExpandable;\r\n        this.getChildren = getChildren;\r\n    }\r\n    _flattenNode(node, level, resultNodes, parentMap) {\r\n        const flatNode = this.transformFunction(node, level);\r\n        resultNodes.push(flatNode);\r\n        if (this.isExpandable(flatNode)) {\r\n            const childrenNodes = this.getChildren(node);\r\n            if (childrenNodes) {\r\n                if (Array.isArray(childrenNodes)) {\r\n                    this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\r\n                }\r\n                else {\r\n                    childrenNodes.pipe(take(1)).subscribe(children => {\r\n                        this._flattenChildren(children, level, resultNodes, parentMap);\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        return resultNodes;\r\n    }\r\n    _flattenChildren(children, level, resultNodes, parentMap) {\r\n        children.forEach((child, index) => {\r\n            let childParentMap = parentMap.slice();\r\n            childParentMap.push(index != children.length - 1);\r\n            this._flattenNode(child, level + 1, resultNodes, childParentMap);\r\n        });\r\n    }\r\n    /**\r\n     * Flatten a list of node type T to flattened version of node F.\r\n     * Please note that type T may be nested, and the length of `structuredData` may be different\r\n     * from that of returned list `F[]`.\r\n     */\r\n    flattenNodes(structuredData) {\r\n        let resultNodes = [];\r\n        structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\r\n        return resultNodes;\r\n    }\r\n    /**\r\n     * Expand flattened node with current expansion status.\r\n     * The returned list may have different length.\r\n     */\r\n    expandFlattenedNodes(nodes, treeControl) {\r\n        let results = [];\r\n        let currentExpand = [];\r\n        currentExpand[0] = true;\r\n        nodes.forEach(node => {\r\n            let expand = true;\r\n            for (let i = 0; i <= this.getLevel(node); i++) {\r\n                expand = expand && currentExpand[i];\r\n            }\r\n            if (expand) {\r\n                results.push(node);\r\n            }\r\n            if (this.isExpandable(node)) {\r\n                currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\r\n            }\r\n        });\r\n        return results;\r\n    }\r\n}\r\n/**\r\n * Data source for flat tree.\r\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\r\n * to `MatTree`.\r\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\r\n * to type `F` for `MatTree` to consume.\r\n */\r\nclass MatTreeFlatDataSource extends DataSource {\r\n    constructor(_treeControl, _treeFlattener, initialData) {\r\n        super();\r\n        this._treeControl = _treeControl;\r\n        this._treeFlattener = _treeFlattener;\r\n        this._flattenedData = new BehaviorSubject([]);\r\n        this._expandedData = new BehaviorSubject([]);\r\n        this._data = new BehaviorSubject([]);\r\n        if (initialData) {\r\n            // Assign the data through the constructor to ensure that all of the logic is executed.\r\n            this.data = initialData;\r\n        }\r\n    }\r\n    get data() {\r\n        return this._data.value;\r\n    }\r\n    set data(value) {\r\n        this._data.next(value);\r\n        this._flattenedData.next(this._treeFlattener.flattenNodes(this.data));\r\n        this._treeControl.dataNodes = this._flattenedData.value;\r\n    }\r\n    connect(collectionViewer) {\r\n        return merge(collectionViewer.viewChange, this._treeControl.expansionModel.changed, this._flattenedData).pipe(map(() => {\r\n            this._expandedData.next(this._treeFlattener.expandFlattenedNodes(this._flattenedData.value, this._treeControl));\r\n            return this._expandedData.value;\r\n        }));\r\n    }\r\n    disconnect() {\r\n        // no op\r\n    }\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Data source for nested tree.\r\n *\r\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\r\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\r\n */\r\nclass MatTreeNestedDataSource extends DataSource {\r\n    constructor() {\r\n        super(...arguments);\r\n        this._data = new BehaviorSubject([]);\r\n    }\r\n    /**\r\n     * Data for the nested tree\r\n     */\r\n    get data() {\r\n        return this._data.value;\r\n    }\r\n    set data(value) {\r\n        this._data.next(value);\r\n    }\r\n    connect(collectionViewer) {\r\n        return merge(...[collectionViewer.viewChange, this._data]).pipe(map(() => this.data));\r\n    }\r\n    disconnect() {\r\n        // no op\r\n    }\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { MatNestedTreeNode, MatTree, MatTreeFlatDataSource, MatTreeFlattener, MatTreeModule, MatTreeNestedDataSource, MatTreeNode, MatTreeNodeDef, MatTreeNodeOutlet, MatTreeNodePadding, MatTreeNodeToggle };\r\n\n"]},"metadata":{},"sourceType":"module"}