{"ast":null,"code":"import * as i1 from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, forwardRef, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, Attribute, Optional, Inject, Input, Output, ViewChild, Directive, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, CheckboxRequiredValidator } from '@angular/forms';\nimport * as i2 from '@angular/material/core';\nimport { mixinTabIndex, mixinColor, mixinDisableRipple, mixinDisabled, MatRipple, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport * as i3 from '@angular/cdk/observers';\nimport { ObserversModule } from '@angular/cdk/observers';\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/** Injection token to be used to override the default options for `mat-checkbox`. */\n\nconst _c0 = [\"input\"];\n\nconst _c1 = function (a0) {\n  return {\n    enterDuration: a0\n  };\n};\n\nconst _c2 = [\"*\"];\nconst MAT_CHECKBOX_DEFAULT_OPTIONS = new InjectionToken('mat-checkbox-default-options', {\n  providedIn: 'root',\n  factory: MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY\n});\n/** @docs-private */\n\nfunction MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY() {\n  return {\n    color: 'accent',\n    clickAction: 'check-indeterminate'\n  };\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n// Increasing integer for generating unique ids for checkbox components.\n\n\nlet nextUniqueId = 0; // Default checkbox configuration.\n\nconst defaults = MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY();\n/**\r\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\r\n * This allows it to support [(ngModel)].\r\n * @docs-private\r\n */\n\nconst MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n/** Change event object emitted by MatCheckbox. */\n\nclass MatCheckboxChange {} // Boilerplate for applying mixins to MatCheckbox.\n\n/** @docs-private */\n\n\nconst _MatCheckboxBase = mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(class {\n  constructor(_elementRef) {\n    this._elementRef = _elementRef;\n  }\n\n}))));\n/**\r\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\r\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\r\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\r\n * so there is no need to provide them yourself. However, if you want to omit a label and still\r\n * have the checkbox be accessible, you may supply an [aria-label] input.\r\n * See: https://material.io/design/components/selection-controls.html\r\n */\n\n\nclass MatCheckbox extends _MatCheckboxBase {\n  constructor(elementRef, _changeDetectorRef, _focusMonitor, _ngZone, tabIndex, _animationMode, _options) {\n    super(elementRef);\n    this._changeDetectorRef = _changeDetectorRef;\n    this._focusMonitor = _focusMonitor;\n    this._ngZone = _ngZone;\n    this._animationMode = _animationMode;\n    this._options = _options;\n    /**\r\n     * Attached to the aria-label attribute of the host element. In most cases, aria-labelledby will\r\n     * take precedence so this may be omitted.\r\n     */\n\n    this.ariaLabel = '';\n    /**\r\n     * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\r\n     */\n\n    this.ariaLabelledby = null;\n    this._uniqueId = `mat-checkbox-${++nextUniqueId}`;\n    /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n\n    this.id = this._uniqueId;\n    /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n\n    this.labelPosition = 'after';\n    /** Name value will be applied to the input element if present */\n\n    this.name = null;\n    /** Event emitted when the checkbox's `checked` value changes. */\n\n    this.change = new EventEmitter();\n    /** Event emitted when the checkbox's `indeterminate` value changes. */\n\n    this.indeterminateChange = new EventEmitter();\n    /**\r\n     * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\r\n     * @docs-private\r\n     */\n\n    this._onTouched = () => {};\n\n    this._currentAnimationClass = '';\n    this._currentCheckState = 0\n    /* Init */\n    ;\n\n    this._controlValueAccessorChangeFn = () => {};\n\n    this._checked = false;\n    this._disabled = false;\n    this._indeterminate = false;\n    this._options = this._options || defaults;\n    this.color = this.defaultColor = this._options.color || defaults.color;\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n  /** Returns the unique id for the visual hidden input. */\n\n\n  get inputId() {\n    return `${this.id || this._uniqueId}-input`;\n  }\n  /** Whether the checkbox is required. */\n\n\n  get required() {\n    return this._required;\n  }\n\n  set required(value) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor.monitor(this._elementRef, true).subscribe(focusOrigin => {\n      if (!focusOrigin) {\n        // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n        // Angular does not expect events to be raised during change detection, so any state change\n        // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n        // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n        // telling the form control it has been touched until the next tick.\n        Promise.resolve().then(() => {\n          this._onTouched();\n\n          this._changeDetectorRef.markForCheck();\n        });\n      }\n    });\n\n    this._syncIndeterminate(this._indeterminate);\n  } // TODO: Delete next major revision.\n\n\n  ngAfterViewChecked() {}\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n  /**\r\n   * Whether the checkbox is checked.\r\n   */\n\n\n  get checked() {\n    return this._checked;\n  }\n\n  set checked(value) {\n    if (value != this.checked) {\n      this._checked = value;\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  /**\r\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\r\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\r\n   */\n\n\n  get disabled() {\n    return this._disabled;\n  }\n\n  set disabled(value) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this.disabled) {\n      this._disabled = newValue;\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  /**\r\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\r\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\r\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\r\n   * set to false.\r\n   */\n\n\n  get indeterminate() {\n    return this._indeterminate;\n  }\n\n  set indeterminate(value) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = coerceBooleanProperty(value);\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(3\n        /* Indeterminate */\n        );\n      } else {\n        this._transitionCheckState(this.checked ? 1\n        /* Checked */\n        : 2\n        /* Unchecked */\n        );\n      }\n\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n\n    this._syncIndeterminate(this._indeterminate);\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n  /** Method being called whenever the label text changes. */\n\n\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n    // component will be only marked for check, but no actual change detection runs automatically.\n    // Instead of going back into the zone in order to trigger a change detection which causes\n    // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n    // an explicit change detection for the checkbox view and its children.\n    this._changeDetectorRef.detectChanges();\n  } // Implemented as part of ControlValueAccessor.\n\n\n  writeValue(value) {\n    this.checked = !!value;\n  } // Implemented as part of ControlValueAccessor.\n\n\n  registerOnChange(fn) {\n    this._controlValueAccessorChangeFn = fn;\n  } // Implemented as part of ControlValueAccessor.\n\n\n  registerOnTouched(fn) {\n    this._onTouched = fn;\n  } // Implemented as part of ControlValueAccessor.\n\n\n  setDisabledState(isDisabled) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked() {\n    if (this.checked) {\n      return 'true';\n    }\n\n    return this.indeterminate ? 'mixed' : 'false';\n  }\n\n  _transitionCheckState(newState) {\n    let oldState = this._currentCheckState;\n    let element = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass); // Remove the animation class to avoid animation when the checkbox is moved between containers\n\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  _emitChangeEvent() {\n    const event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n\n    this.change.emit(event); // Assigning the value again here is redundant, but we have to do it in case it was\n    // changed inside the `change` listener which will cause the input to be out of sync.\n\n    if (this._inputElement) {\n      this._inputElement.nativeElement.checked = this.checked;\n    }\n  }\n  /** Toggles the `checked` state of the checkbox. */\n\n\n  toggle() {\n    this.checked = !this.checked;\n  }\n  /**\r\n   * Event handler for checkbox input element.\r\n   * Toggles checked state if element is not disabled.\r\n   * Do not toggle on (change) event since IE doesn't fire change event when\r\n   *   indeterminate checkbox is clicked.\r\n   * @param event\r\n   */\n\n\n  _onInputClick(event) {\n    const clickAction = this._options?.clickAction; // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n\n    event.stopPropagation(); // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n\n    if (!this.disabled && clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && clickAction !== 'check') {\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n\n      this._transitionCheckState(this._checked ? 1\n      /* Checked */\n      : 2\n      /* Unchecked */\n      ); // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n\n\n      this._emitChangeEvent();\n    } else if (!this.disabled && clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n  /** Focuses the checkbox. */\n\n\n  focus(origin, options) {\n    if (origin) {\n      this._focusMonitor.focusVia(this._inputElement, origin, options);\n    } else {\n      this._inputElement.nativeElement.focus(options);\n    }\n  }\n\n  _onInteractionEvent(event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  _getAnimationClassForCheckStateTransition(oldState, newState) {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix = '';\n\n    switch (oldState) {\n      case 0\n      /* Init */\n      :\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === 1\n        /* Checked */\n        ) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == 3\n        /* Indeterminate */\n        ) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n\n        break;\n\n      case 2\n      /* Unchecked */\n      :\n        animSuffix = newState === 1\n        /* Checked */\n        ? 'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n\n      case 1\n      /* Checked */\n      :\n        animSuffix = newState === 2\n        /* Unchecked */\n        ? 'checked-unchecked' : 'checked-indeterminate';\n        break;\n\n      case 3\n      /* Indeterminate */\n      :\n        animSuffix = newState === 1\n        /* Checked */\n        ? 'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n  /**\r\n   * Syncs the indeterminate value with the checkbox DOM node.\r\n   *\r\n   * We sync `indeterminate` directly on the DOM node, because in Ivy the check for whether a\r\n   * property is supported on an element boils down to `if (propName in element)`. Domino's\r\n   * HTMLInputElement doesn't have an `indeterminate` property so Ivy will warn during\r\n   * server-side rendering.\r\n   */\n\n\n  _syncIndeterminate(value) {\n    const nativeCheckbox = this._inputElement;\n\n    if (nativeCheckbox) {\n      nativeCheckbox.nativeElement.indeterminate = value;\n    }\n  }\n\n}\n\nMatCheckbox.ɵfac = function MatCheckbox_Factory(t) {\n  return new (t || MatCheckbox)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.FocusMonitor), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵinjectAttribute('tabindex'), i0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), i0.ɵɵdirectiveInject(MAT_CHECKBOX_DEFAULT_OPTIONS, 8));\n};\n\nMatCheckbox.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MatCheckbox,\n  selectors: [[\"mat-checkbox\"]],\n  viewQuery: function MatCheckbox_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n      i0.ɵɵviewQuery(MatRipple, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._inputElement = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.ripple = _t.first);\n    }\n  },\n  hostAttrs: [1, \"mat-checkbox\"],\n  hostVars: 12,\n  hostBindings: function MatCheckbox_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵhostProperty(\"id\", ctx.id);\n      i0.ɵɵattribute(\"tabindex\", null);\n      i0.ɵɵclassProp(\"mat-checkbox-indeterminate\", ctx.indeterminate)(\"mat-checkbox-checked\", ctx.checked)(\"mat-checkbox-disabled\", ctx.disabled)(\"mat-checkbox-label-before\", ctx.labelPosition == \"before\")(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n    }\n  },\n  inputs: {\n    disableRipple: \"disableRipple\",\n    color: \"color\",\n    tabIndex: \"tabIndex\",\n    ariaLabel: [\"aria-label\", \"ariaLabel\"],\n    ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"],\n    ariaDescribedby: [\"aria-describedby\", \"ariaDescribedby\"],\n    id: \"id\",\n    required: \"required\",\n    labelPosition: \"labelPosition\",\n    name: \"name\",\n    value: \"value\",\n    checked: \"checked\",\n    disabled: \"disabled\",\n    indeterminate: \"indeterminate\"\n  },\n  outputs: {\n    change: \"change\",\n    indeterminateChange: \"indeterminateChange\"\n  },\n  exportAs: [\"matCheckbox\"],\n  features: [i0.ɵɵProvidersFeature([MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR]), i0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c2,\n  decls: 17,\n  vars: 21,\n  consts: [[1, \"mat-checkbox-layout\"], [\"label\", \"\"], [1, \"mat-checkbox-inner-container\"], [\"type\", \"checkbox\", 1, \"mat-checkbox-input\", \"cdk-visually-hidden\", 3, \"id\", \"required\", \"checked\", \"disabled\", \"tabIndex\", \"change\", \"click\"], [\"input\", \"\"], [\"matRipple\", \"\", 1, \"mat-checkbox-ripple\", \"mat-focus-indicator\", 3, \"matRippleTrigger\", \"matRippleDisabled\", \"matRippleRadius\", \"matRippleCentered\", \"matRippleAnimation\"], [1, \"mat-ripple-element\", \"mat-checkbox-persistent-ripple\"], [1, \"mat-checkbox-frame\"], [1, \"mat-checkbox-background\"], [\"version\", \"1.1\", \"focusable\", \"false\", \"viewBox\", \"0 0 24 24\", 0, \"xml\", \"space\", \"preserve\", \"aria-hidden\", \"true\", 1, \"mat-checkbox-checkmark\"], [\"fill\", \"none\", \"stroke\", \"white\", \"d\", \"M4.1,12.7 9,17.6 20.3,6.3\", 1, \"mat-checkbox-checkmark-path\"], [1, \"mat-checkbox-mixedmark\"], [1, \"mat-checkbox-label\", 3, \"cdkObserveContent\"], [\"checkboxLabel\", \"\"], [2, \"display\", \"none\"]],\n  template: function MatCheckbox_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵelementStart(0, \"label\", 0, 1);\n      i0.ɵɵelementStart(2, \"span\", 2);\n      i0.ɵɵelementStart(3, \"input\", 3, 4);\n      i0.ɵɵlistener(\"change\", function MatCheckbox_Template_input_change_3_listener($event) {\n        return ctx._onInteractionEvent($event);\n      })(\"click\", function MatCheckbox_Template_input_click_3_listener($event) {\n        return ctx._onInputClick($event);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"span\", 5);\n      i0.ɵɵelement(6, \"span\", 6);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(7, \"span\", 7);\n      i0.ɵɵelementStart(8, \"span\", 8);\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(9, \"svg\", 9);\n      i0.ɵɵelement(10, \"path\", 10);\n      i0.ɵɵelementEnd();\n      i0.ɵɵnamespaceHTML();\n      i0.ɵɵelement(11, \"span\", 11);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(12, \"span\", 12, 13);\n      i0.ɵɵlistener(\"cdkObserveContent\", function MatCheckbox_Template_span_cdkObserveContent_12_listener() {\n        return ctx._onLabelTextChange();\n      });\n      i0.ɵɵelementStart(14, \"span\", 14);\n      i0.ɵɵtext(15, \"\\xA0\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵprojection(16);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      const _r0 = i0.ɵɵreference(1);\n\n      const _r2 = i0.ɵɵreference(13);\n\n      i0.ɵɵattribute(\"for\", ctx.inputId);\n      i0.ɵɵadvance(2);\n      i0.ɵɵclassProp(\"mat-checkbox-inner-container-no-side-margin\", !_r2.textContent || !_r2.textContent.trim());\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"id\", ctx.inputId)(\"required\", ctx.required)(\"checked\", ctx.checked)(\"disabled\", ctx.disabled)(\"tabIndex\", ctx.tabIndex);\n      i0.ɵɵattribute(\"value\", ctx.value)(\"name\", ctx.name)(\"aria-label\", ctx.ariaLabel || null)(\"aria-labelledby\", ctx.ariaLabelledby)(\"aria-checked\", ctx._getAriaChecked())(\"aria-describedby\", ctx.ariaDescribedby);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx._isRippleDisabled())(\"matRippleRadius\", 20)(\"matRippleCentered\", true)(\"matRippleAnimation\", i0.ɵɵpureFunction1(19, _c1, ctx._animationMode === \"NoopAnimations\" ? 0 : 150));\n    }\n  },\n  directives: [i2.MatRipple, i3.CdkObserveContent],\n  styles: [\"@keyframes mat-checkbox-fade-in-background{0%{opacity:0}50%{opacity:1}}@keyframes mat-checkbox-fade-out-background{0%,50%{opacity:1}100%{opacity:0}}@keyframes mat-checkbox-unchecked-checked-checkmark-path{0%,50%{stroke-dashoffset:22.910259}50%{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1)}100%{stroke-dashoffset:0}}@keyframes mat-checkbox-unchecked-indeterminate-mixedmark{0%,68.2%{transform:scaleX(0)}68.2%{animation-timing-function:cubic-bezier(0, 0, 0, 1)}100%{transform:scaleX(1)}}@keyframes mat-checkbox-checked-unchecked-checkmark-path{from{animation-timing-function:cubic-bezier(0.4, 0, 1, 1);stroke-dashoffset:0}to{stroke-dashoffset:-22.910259}}@keyframes mat-checkbox-checked-indeterminate-checkmark{from{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1);opacity:1;transform:rotate(0deg)}to{opacity:0;transform:rotate(45deg)}}@keyframes mat-checkbox-indeterminate-checked-checkmark{from{animation-timing-function:cubic-bezier(0.14, 0, 0, 1);opacity:0;transform:rotate(45deg)}to{opacity:1;transform:rotate(360deg)}}@keyframes mat-checkbox-checked-indeterminate-mixedmark{from{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1);opacity:0;transform:rotate(-45deg)}to{opacity:1;transform:rotate(0deg)}}@keyframes mat-checkbox-indeterminate-checked-mixedmark{from{animation-timing-function:cubic-bezier(0.14, 0, 0, 1);opacity:1;transform:rotate(0deg)}to{opacity:0;transform:rotate(315deg)}}@keyframes mat-checkbox-indeterminate-unchecked-mixedmark{0%{animation-timing-function:linear;opacity:1;transform:scaleX(1)}32.8%,100%{opacity:0;transform:scaleX(0)}}.mat-checkbox-background,.mat-checkbox-frame{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:2px;box-sizing:border-box;pointer-events:none}.mat-checkbox{display:inline-block;transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);cursor:pointer;-webkit-tap-highlight-color:transparent}._mat-animation-noopable.mat-checkbox{transition:none;animation:none}.mat-checkbox .mat-ripple-element:not(.mat-checkbox-persistent-ripple){opacity:.16}.mat-checkbox .mat-checkbox-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.cdk-high-contrast-active .mat-checkbox.cdk-keyboard-focused .mat-checkbox-ripple{outline:solid 3px}.mat-checkbox-layout{-webkit-user-select:none;-moz-user-select:none;user-select:none;cursor:inherit;align-items:baseline;vertical-align:middle;display:inline-flex;white-space:nowrap}.mat-checkbox-label{-webkit-user-select:auto;-moz-user-select:auto;user-select:auto}.mat-checkbox-inner-container{display:inline-block;height:16px;line-height:0;margin:auto;margin-right:8px;order:0;position:relative;vertical-align:middle;white-space:nowrap;width:16px;flex-shrink:0}[dir=rtl] .mat-checkbox-inner-container{margin-left:8px;margin-right:auto}.mat-checkbox-inner-container-no-side-margin{margin-left:0;margin-right:0}.mat-checkbox-frame{background-color:transparent;transition:border-color 90ms cubic-bezier(0, 0, 0.2, 0.1);border-width:2px;border-style:solid}._mat-animation-noopable .mat-checkbox-frame{transition:none}.mat-checkbox-background{align-items:center;display:inline-flex;justify-content:center;transition:background-color 90ms cubic-bezier(0, 0, 0.2, 0.1),opacity 90ms cubic-bezier(0, 0, 0.2, 0.1);-webkit-print-color-adjust:exact;color-adjust:exact}._mat-animation-noopable .mat-checkbox-background{transition:none}.cdk-high-contrast-active .mat-checkbox .mat-checkbox-background{background:none}.mat-checkbox-persistent-ripple{display:block;width:100%;height:100%;transform:none}.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:.04}.mat-checkbox.cdk-keyboard-focused .mat-checkbox-persistent-ripple{opacity:.12}.mat-checkbox-persistent-ripple,.mat-checkbox.mat-checkbox-disabled .mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:0}@media(hover: none){.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{display:none}}.mat-checkbox-checkmark{top:0;left:0;right:0;bottom:0;position:absolute;width:100%}.mat-checkbox-checkmark-path{stroke-dashoffset:22.910259;stroke-dasharray:22.910259;stroke-width:2.1333333333px}.cdk-high-contrast-black-on-white .mat-checkbox-checkmark-path{stroke:#000 !important}.mat-checkbox-mixedmark{width:calc(100% - 6px);height:2px;opacity:0;transform:scaleX(0) rotate(0deg);border-radius:2px}.cdk-high-contrast-active .mat-checkbox-mixedmark{height:0;border-top:solid 2px;margin-top:2px}.mat-checkbox-label-before .mat-checkbox-inner-container{order:1;margin-left:8px;margin-right:auto}[dir=rtl] .mat-checkbox-label-before .mat-checkbox-inner-container{margin-left:auto;margin-right:8px}.mat-checkbox-checked .mat-checkbox-checkmark{opacity:1}.mat-checkbox-checked .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-checked .mat-checkbox-mixedmark{transform:scaleX(1) rotate(-45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark{opacity:0;transform:rotate(45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-indeterminate .mat-checkbox-mixedmark{opacity:1;transform:scaleX(1) rotate(0deg)}.mat-checkbox-unchecked .mat-checkbox-background{background-color:transparent}.mat-checkbox-disabled{cursor:default}.cdk-high-contrast-active .mat-checkbox-disabled{opacity:.5}.mat-checkbox-anim-unchecked-checked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-checked .mat-checkbox-checkmark-path{animation:180ms linear 0ms mat-checkbox-unchecked-checked-checkmark-path}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0ms mat-checkbox-unchecked-indeterminate-mixedmark}.mat-checkbox-anim-checked-unchecked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-out-background}.mat-checkbox-anim-checked-unchecked .mat-checkbox-checkmark-path{animation:90ms linear 0ms mat-checkbox-checked-unchecked-checkmark-path}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-checkmark{animation:90ms linear 0ms mat-checkbox-checked-indeterminate-checkmark}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0ms mat-checkbox-checked-indeterminate-mixedmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-checkmark{animation:500ms linear 0ms mat-checkbox-indeterminate-checked-checkmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-mixedmark{animation:500ms linear 0ms mat-checkbox-indeterminate-checked-mixedmark}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-out-background}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-mixedmark{animation:300ms linear 0ms mat-checkbox-indeterminate-unchecked-mixedmark}.mat-checkbox-input{bottom:0;left:50%}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatCheckbox, [{\n    type: Component,\n    args: [{\n      selector: 'mat-checkbox',\n      exportAs: 'matCheckbox',\n      host: {\n        'class': 'mat-checkbox',\n        '[id]': 'id',\n        '[attr.tabindex]': 'null',\n        '[class.mat-checkbox-indeterminate]': 'indeterminate',\n        '[class.mat-checkbox-checked]': 'checked',\n        '[class.mat-checkbox-disabled]': 'disabled',\n        '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n        '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`\n      },\n      providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n      inputs: ['disableRipple', 'color', 'tabIndex'],\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-checkbox-layout\\\" #label>\\n  <span class=\\\"mat-checkbox-inner-container\\\"\\n       [class.mat-checkbox-inner-container-no-side-margin]=\\\"!checkboxLabel.textContent || !checkboxLabel.textContent.trim()\\\">\\n    <input #input\\n           class=\\\"mat-checkbox-input cdk-visually-hidden\\\" type=\\\"checkbox\\\"\\n           [id]=\\\"inputId\\\"\\n           [required]=\\\"required\\\"\\n           [checked]=\\\"checked\\\"\\n           [attr.value]=\\\"value\\\"\\n           [disabled]=\\\"disabled\\\"\\n           [attr.name]=\\\"name\\\"\\n           [tabIndex]=\\\"tabIndex\\\"\\n           [attr.aria-label]=\\\"ariaLabel || null\\\"\\n           [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n           [attr.aria-checked]=\\\"_getAriaChecked()\\\"\\n           [attr.aria-describedby]=\\\"ariaDescribedby\\\"\\n           (change)=\\\"_onInteractionEvent($event)\\\"\\n           (click)=\\\"_onInputClick($event)\\\">\\n    <span matRipple class=\\\"mat-checkbox-ripple mat-focus-indicator\\\"\\n         [matRippleTrigger]=\\\"label\\\"\\n         [matRippleDisabled]=\\\"_isRippleDisabled()\\\"\\n         [matRippleRadius]=\\\"20\\\"\\n         [matRippleCentered]=\\\"true\\\"\\n         [matRippleAnimation]=\\\"{enterDuration: _animationMode === 'NoopAnimations' ? 0 : 150}\\\">\\n      <span class=\\\"mat-ripple-element mat-checkbox-persistent-ripple\\\"></span>\\n    </span>\\n    <span class=\\\"mat-checkbox-frame\\\"></span>\\n    <span class=\\\"mat-checkbox-background\\\">\\n      <svg version=\\\"1.1\\\"\\n           focusable=\\\"false\\\"\\n           class=\\\"mat-checkbox-checkmark\\\"\\n           viewBox=\\\"0 0 24 24\\\"\\n           xml:space=\\\"preserve\\\"\\n           aria-hidden=\\\"true\\\">\\n        <path class=\\\"mat-checkbox-checkmark-path\\\"\\n              fill=\\\"none\\\"\\n              stroke=\\\"white\\\"\\n              d=\\\"M4.1,12.7 9,17.6 20.3,6.3\\\"/>\\n      </svg>\\n      <!-- Element for rendering the indeterminate state checkbox. -->\\n      <span class=\\\"mat-checkbox-mixedmark\\\"></span>\\n    </span>\\n  </span>\\n  <span class=\\\"mat-checkbox-label\\\" #checkboxLabel (cdkObserveContent)=\\\"_onLabelTextChange()\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </span>\\n</label>\\n\",\n      styles: [\"@keyframes mat-checkbox-fade-in-background{0%{opacity:0}50%{opacity:1}}@keyframes mat-checkbox-fade-out-background{0%,50%{opacity:1}100%{opacity:0}}@keyframes mat-checkbox-unchecked-checked-checkmark-path{0%,50%{stroke-dashoffset:22.910259}50%{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1)}100%{stroke-dashoffset:0}}@keyframes mat-checkbox-unchecked-indeterminate-mixedmark{0%,68.2%{transform:scaleX(0)}68.2%{animation-timing-function:cubic-bezier(0, 0, 0, 1)}100%{transform:scaleX(1)}}@keyframes mat-checkbox-checked-unchecked-checkmark-path{from{animation-timing-function:cubic-bezier(0.4, 0, 1, 1);stroke-dashoffset:0}to{stroke-dashoffset:-22.910259}}@keyframes mat-checkbox-checked-indeterminate-checkmark{from{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1);opacity:1;transform:rotate(0deg)}to{opacity:0;transform:rotate(45deg)}}@keyframes mat-checkbox-indeterminate-checked-checkmark{from{animation-timing-function:cubic-bezier(0.14, 0, 0, 1);opacity:0;transform:rotate(45deg)}to{opacity:1;transform:rotate(360deg)}}@keyframes mat-checkbox-checked-indeterminate-mixedmark{from{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1);opacity:0;transform:rotate(-45deg)}to{opacity:1;transform:rotate(0deg)}}@keyframes mat-checkbox-indeterminate-checked-mixedmark{from{animation-timing-function:cubic-bezier(0.14, 0, 0, 1);opacity:1;transform:rotate(0deg)}to{opacity:0;transform:rotate(315deg)}}@keyframes mat-checkbox-indeterminate-unchecked-mixedmark{0%{animation-timing-function:linear;opacity:1;transform:scaleX(1)}32.8%,100%{opacity:0;transform:scaleX(0)}}.mat-checkbox-background,.mat-checkbox-frame{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:2px;box-sizing:border-box;pointer-events:none}.mat-checkbox{display:inline-block;transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);cursor:pointer;-webkit-tap-highlight-color:transparent}._mat-animation-noopable.mat-checkbox{transition:none;animation:none}.mat-checkbox .mat-ripple-element:not(.mat-checkbox-persistent-ripple){opacity:.16}.mat-checkbox .mat-checkbox-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.cdk-high-contrast-active .mat-checkbox.cdk-keyboard-focused .mat-checkbox-ripple{outline:solid 3px}.mat-checkbox-layout{-webkit-user-select:none;-moz-user-select:none;user-select:none;cursor:inherit;align-items:baseline;vertical-align:middle;display:inline-flex;white-space:nowrap}.mat-checkbox-label{-webkit-user-select:auto;-moz-user-select:auto;user-select:auto}.mat-checkbox-inner-container{display:inline-block;height:16px;line-height:0;margin:auto;margin-right:8px;order:0;position:relative;vertical-align:middle;white-space:nowrap;width:16px;flex-shrink:0}[dir=rtl] .mat-checkbox-inner-container{margin-left:8px;margin-right:auto}.mat-checkbox-inner-container-no-side-margin{margin-left:0;margin-right:0}.mat-checkbox-frame{background-color:transparent;transition:border-color 90ms cubic-bezier(0, 0, 0.2, 0.1);border-width:2px;border-style:solid}._mat-animation-noopable .mat-checkbox-frame{transition:none}.mat-checkbox-background{align-items:center;display:inline-flex;justify-content:center;transition:background-color 90ms cubic-bezier(0, 0, 0.2, 0.1),opacity 90ms cubic-bezier(0, 0, 0.2, 0.1);-webkit-print-color-adjust:exact;color-adjust:exact}._mat-animation-noopable .mat-checkbox-background{transition:none}.cdk-high-contrast-active .mat-checkbox .mat-checkbox-background{background:none}.mat-checkbox-persistent-ripple{display:block;width:100%;height:100%;transform:none}.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:.04}.mat-checkbox.cdk-keyboard-focused .mat-checkbox-persistent-ripple{opacity:.12}.mat-checkbox-persistent-ripple,.mat-checkbox.mat-checkbox-disabled .mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:0}@media(hover: none){.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{display:none}}.mat-checkbox-checkmark{top:0;left:0;right:0;bottom:0;position:absolute;width:100%}.mat-checkbox-checkmark-path{stroke-dashoffset:22.910259;stroke-dasharray:22.910259;stroke-width:2.1333333333px}.cdk-high-contrast-black-on-white .mat-checkbox-checkmark-path{stroke:#000 !important}.mat-checkbox-mixedmark{width:calc(100% - 6px);height:2px;opacity:0;transform:scaleX(0) rotate(0deg);border-radius:2px}.cdk-high-contrast-active .mat-checkbox-mixedmark{height:0;border-top:solid 2px;margin-top:2px}.mat-checkbox-label-before .mat-checkbox-inner-container{order:1;margin-left:8px;margin-right:auto}[dir=rtl] .mat-checkbox-label-before .mat-checkbox-inner-container{margin-left:auto;margin-right:8px}.mat-checkbox-checked .mat-checkbox-checkmark{opacity:1}.mat-checkbox-checked .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-checked .mat-checkbox-mixedmark{transform:scaleX(1) rotate(-45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark{opacity:0;transform:rotate(45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-indeterminate .mat-checkbox-mixedmark{opacity:1;transform:scaleX(1) rotate(0deg)}.mat-checkbox-unchecked .mat-checkbox-background{background-color:transparent}.mat-checkbox-disabled{cursor:default}.cdk-high-contrast-active .mat-checkbox-disabled{opacity:.5}.mat-checkbox-anim-unchecked-checked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-checked .mat-checkbox-checkmark-path{animation:180ms linear 0ms mat-checkbox-unchecked-checked-checkmark-path}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0ms mat-checkbox-unchecked-indeterminate-mixedmark}.mat-checkbox-anim-checked-unchecked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-out-background}.mat-checkbox-anim-checked-unchecked .mat-checkbox-checkmark-path{animation:90ms linear 0ms mat-checkbox-checked-unchecked-checkmark-path}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-checkmark{animation:90ms linear 0ms mat-checkbox-checked-indeterminate-checkmark}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0ms mat-checkbox-checked-indeterminate-mixedmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-checkmark{animation:500ms linear 0ms mat-checkbox-indeterminate-checked-checkmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-mixedmark{animation:500ms linear 0ms mat-checkbox-indeterminate-checked-mixedmark}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-out-background}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-mixedmark{animation:300ms linear 0ms mat-checkbox-indeterminate-unchecked-mixedmark}.mat-checkbox-input{bottom:0;left:50%}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i1.FocusMonitor\n    }, {\n      type: i0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Attribute,\n        args: ['tabindex']\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ANIMATION_MODULE_TYPE]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_CHECKBOX_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, {\n    ariaLabel: [{\n      type: Input,\n      args: ['aria-label']\n    }],\n    ariaLabelledby: [{\n      type: Input,\n      args: ['aria-labelledby']\n    }],\n    ariaDescribedby: [{\n      type: Input,\n      args: ['aria-describedby']\n    }],\n    id: [{\n      type: Input\n    }],\n    required: [{\n      type: Input\n    }],\n    labelPosition: [{\n      type: Input\n    }],\n    name: [{\n      type: Input\n    }],\n    change: [{\n      type: Output\n    }],\n    indeterminateChange: [{\n      type: Output\n    }],\n    value: [{\n      type: Input\n    }],\n    _inputElement: [{\n      type: ViewChild,\n      args: ['input']\n    }],\n    ripple: [{\n      type: ViewChild,\n      args: [MatRipple]\n    }],\n    checked: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    indeterminate: [{\n      type: Input\n    }]\n  });\n})();\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nconst MAT_CHECKBOX_REQUIRED_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n/**\r\n * Validator for Material checkbox's required attribute in template-driven checkbox.\r\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\r\n * work with `mat-checkbox`.\r\n */\n\nclass MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n\nMatCheckboxRequiredValidator.ɵfac = /* @__PURE__ */function () {\n  let ɵMatCheckboxRequiredValidator_BaseFactory;\n  return function MatCheckboxRequiredValidator_Factory(t) {\n    return (ɵMatCheckboxRequiredValidator_BaseFactory || (ɵMatCheckboxRequiredValidator_BaseFactory = i0.ɵɵgetInheritedFactory(MatCheckboxRequiredValidator)))(t || MatCheckboxRequiredValidator);\n  };\n}();\n\nMatCheckboxRequiredValidator.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatCheckboxRequiredValidator,\n  selectors: [[\"mat-checkbox\", \"required\", \"\", \"formControlName\", \"\"], [\"mat-checkbox\", \"required\", \"\", \"formControl\", \"\"], [\"mat-checkbox\", \"required\", \"\", \"ngModel\", \"\"]],\n  features: [i0.ɵɵProvidersFeature([MAT_CHECKBOX_REQUIRED_VALIDATOR]), i0.ɵɵInheritDefinitionFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatCheckboxRequiredValidator, [{\n    type: Directive,\n    args: [{\n      selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n      providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR]\n    }]\n  }], null, null);\n})();\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/** This module is used by both original and MDC-based checkbox implementations. */\n\n\nclass _MatCheckboxRequiredValidatorModule {}\n\n_MatCheckboxRequiredValidatorModule.ɵfac = function _MatCheckboxRequiredValidatorModule_Factory(t) {\n  return new (t || _MatCheckboxRequiredValidatorModule)();\n};\n\n_MatCheckboxRequiredValidatorModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: _MatCheckboxRequiredValidatorModule\n});\n_MatCheckboxRequiredValidatorModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(_MatCheckboxRequiredValidatorModule, [{\n    type: NgModule,\n    args: [{\n      exports: [MatCheckboxRequiredValidator],\n      declarations: [MatCheckboxRequiredValidator]\n    }]\n  }], null, null);\n})();\n\nclass MatCheckboxModule {}\n\nMatCheckboxModule.ɵfac = function MatCheckboxModule_Factory(t) {\n  return new (t || MatCheckboxModule)();\n};\n\nMatCheckboxModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: MatCheckboxModule\n});\nMatCheckboxModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[MatRippleModule, MatCommonModule, ObserversModule, _MatCheckboxRequiredValidatorModule], MatCommonModule, _MatCheckboxRequiredValidatorModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatCheckboxModule, [{\n    type: NgModule,\n    args: [{\n      imports: [MatRippleModule, MatCommonModule, ObserversModule, _MatCheckboxRequiredValidatorModule],\n      exports: [MatCheckbox, MatCommonModule, _MatCheckboxRequiredValidatorModule],\n      declarations: [MatCheckbox]\n    }]\n  }], null, null);\n})();\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR, MAT_CHECKBOX_DEFAULT_OPTIONS, MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY, MAT_CHECKBOX_REQUIRED_VALIDATOR, MatCheckbox, MatCheckboxChange, MatCheckboxModule, MatCheckboxRequiredValidator, _MatCheckboxRequiredValidatorModule };","map":{"version":3,"sources":["C:/Users/DC8SunX53/Documents/VSCODE_Project_questMe/questme/admin-interface/node_modules/@angular/material/fesm2020/checkbox.mjs"],"names":["i1","coerceBooleanProperty","i0","InjectionToken","forwardRef","EventEmitter","Component","ViewEncapsulation","ChangeDetectionStrategy","Attribute","Optional","Inject","Input","Output","ViewChild","Directive","NgModule","NG_VALUE_ACCESSOR","NG_VALIDATORS","CheckboxRequiredValidator","i2","mixinTabIndex","mixinColor","mixinDisableRipple","mixinDisabled","MatRipple","MatRippleModule","MatCommonModule","ANIMATION_MODULE_TYPE","i3","ObserversModule","MAT_CHECKBOX_DEFAULT_OPTIONS","providedIn","factory","MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY","color","clickAction","nextUniqueId","defaults","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","provide","useExisting","MatCheckbox","multi","MatCheckboxChange","_MatCheckboxBase","constructor","_elementRef","elementRef","_changeDetectorRef","_focusMonitor","_ngZone","tabIndex","_animationMode","_options","ariaLabel","ariaLabelledby","_uniqueId","id","labelPosition","name","change","indeterminateChange","_onTouched","_currentAnimationClass","_currentCheckState","_controlValueAccessorChangeFn","_checked","_disabled","_indeterminate","defaultColor","parseInt","inputId","required","_required","value","ngAfterViewInit","monitor","subscribe","focusOrigin","Promise","resolve","then","markForCheck","_syncIndeterminate","ngAfterViewChecked","ngOnDestroy","stopMonitoring","checked","disabled","newValue","indeterminate","changed","_transitionCheckState","emit","_isRippleDisabled","disableRipple","_onLabelTextChange","detectChanges","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","_getAriaChecked","newState","oldState","element","nativeElement","length","classList","remove","_getAnimationClassForCheckStateTransition","add","animationClass","runOutsideAngular","setTimeout","_emitChangeEvent","event","source","_inputElement","toggle","_onInputClick","stopPropagation","focus","origin","options","focusVia","_onInteractionEvent","animSuffix","nativeCheckbox","ɵfac","ElementRef","ChangeDetectorRef","FocusMonitor","NgZone","ɵcmp","CdkObserveContent","type","args","selector","exportAs","host","providers","inputs","encapsulation","None","changeDetection","OnPush","template","styles","undefined","decorators","ariaDescribedby","ripple","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","ɵdir","_MatCheckboxRequiredValidatorModule","ɵmod","ɵinj","exports","declarations","MatCheckboxModule","imports"],"mappings":"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","sourcesContent":["import * as i1 from '@angular/cdk/a11y';\r\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\r\nimport * as i0 from '@angular/core';\r\nimport { InjectionToken, forwardRef, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, Attribute, Optional, Inject, Input, Output, ViewChild, Directive, NgModule } from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, CheckboxRequiredValidator } from '@angular/forms';\r\nimport * as i2 from '@angular/material/core';\r\nimport { mixinTabIndex, mixinColor, mixinDisableRipple, mixinDisabled, MatRipple, MatRippleModule, MatCommonModule } from '@angular/material/core';\r\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\r\nimport * as i3 from '@angular/cdk/observers';\r\nimport { ObserversModule } from '@angular/cdk/observers';\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/** Injection token to be used to override the default options for `mat-checkbox`. */\r\nconst MAT_CHECKBOX_DEFAULT_OPTIONS = new InjectionToken('mat-checkbox-default-options', {\r\n    providedIn: 'root',\r\n    factory: MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY,\r\n});\r\n/** @docs-private */\r\nfunction MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY() {\r\n    return {\r\n        color: 'accent',\r\n        clickAction: 'check-indeterminate',\r\n    };\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n// Increasing integer for generating unique ids for checkbox components.\r\nlet nextUniqueId = 0;\r\n// Default checkbox configuration.\r\nconst defaults = MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY();\r\n/**\r\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\r\n * This allows it to support [(ngModel)].\r\n * @docs-private\r\n */\r\nconst MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => MatCheckbox),\r\n    multi: true,\r\n};\r\n/** Change event object emitted by MatCheckbox. */\r\nclass MatCheckboxChange {\r\n}\r\n// Boilerplate for applying mixins to MatCheckbox.\r\n/** @docs-private */\r\nconst _MatCheckboxBase = mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(class {\r\n    constructor(_elementRef) {\r\n        this._elementRef = _elementRef;\r\n    }\r\n}))));\r\n/**\r\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\r\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\r\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\r\n * so there is no need to provide them yourself. However, if you want to omit a label and still\r\n * have the checkbox be accessible, you may supply an [aria-label] input.\r\n * See: https://material.io/design/components/selection-controls.html\r\n */\r\nclass MatCheckbox extends _MatCheckboxBase {\r\n    constructor(elementRef, _changeDetectorRef, _focusMonitor, _ngZone, tabIndex, _animationMode, _options) {\r\n        super(elementRef);\r\n        this._changeDetectorRef = _changeDetectorRef;\r\n        this._focusMonitor = _focusMonitor;\r\n        this._ngZone = _ngZone;\r\n        this._animationMode = _animationMode;\r\n        this._options = _options;\r\n        /**\r\n         * Attached to the aria-label attribute of the host element. In most cases, aria-labelledby will\r\n         * take precedence so this may be omitted.\r\n         */\r\n        this.ariaLabel = '';\r\n        /**\r\n         * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\r\n         */\r\n        this.ariaLabelledby = null;\r\n        this._uniqueId = `mat-checkbox-${++nextUniqueId}`;\r\n        /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\r\n        this.id = this._uniqueId;\r\n        /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\r\n        this.labelPosition = 'after';\r\n        /** Name value will be applied to the input element if present */\r\n        this.name = null;\r\n        /** Event emitted when the checkbox's `checked` value changes. */\r\n        this.change = new EventEmitter();\r\n        /** Event emitted when the checkbox's `indeterminate` value changes. */\r\n        this.indeterminateChange = new EventEmitter();\r\n        /**\r\n         * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\r\n         * @docs-private\r\n         */\r\n        this._onTouched = () => { };\r\n        this._currentAnimationClass = '';\r\n        this._currentCheckState = 0 /* Init */;\r\n        this._controlValueAccessorChangeFn = () => { };\r\n        this._checked = false;\r\n        this._disabled = false;\r\n        this._indeterminate = false;\r\n        this._options = this._options || defaults;\r\n        this.color = this.defaultColor = this._options.color || defaults.color;\r\n        this.tabIndex = parseInt(tabIndex) || 0;\r\n    }\r\n    /** Returns the unique id for the visual hidden input. */\r\n    get inputId() {\r\n        return `${this.id || this._uniqueId}-input`;\r\n    }\r\n    /** Whether the checkbox is required. */\r\n    get required() {\r\n        return this._required;\r\n    }\r\n    set required(value) {\r\n        this._required = coerceBooleanProperty(value);\r\n    }\r\n    ngAfterViewInit() {\r\n        this._focusMonitor.monitor(this._elementRef, true).subscribe(focusOrigin => {\r\n            if (!focusOrigin) {\r\n                // When a focused element becomes disabled, the browser *immediately* fires a blur event.\r\n                // Angular does not expect events to be raised during change detection, so any state change\r\n                // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\r\n                // See https://github.com/angular/angular/issues/17793. To work around this, we defer\r\n                // telling the form control it has been touched until the next tick.\r\n                Promise.resolve().then(() => {\r\n                    this._onTouched();\r\n                    this._changeDetectorRef.markForCheck();\r\n                });\r\n            }\r\n        });\r\n        this._syncIndeterminate(this._indeterminate);\r\n    }\r\n    // TODO: Delete next major revision.\r\n    ngAfterViewChecked() { }\r\n    ngOnDestroy() {\r\n        this._focusMonitor.stopMonitoring(this._elementRef);\r\n    }\r\n    /**\r\n     * Whether the checkbox is checked.\r\n     */\r\n    get checked() {\r\n        return this._checked;\r\n    }\r\n    set checked(value) {\r\n        if (value != this.checked) {\r\n            this._checked = value;\r\n            this._changeDetectorRef.markForCheck();\r\n        }\r\n    }\r\n    /**\r\n     * Whether the checkbox is disabled. This fully overrides the implementation provided by\r\n     * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\r\n     */\r\n    get disabled() {\r\n        return this._disabled;\r\n    }\r\n    set disabled(value) {\r\n        const newValue = coerceBooleanProperty(value);\r\n        if (newValue !== this.disabled) {\r\n            this._disabled = newValue;\r\n            this._changeDetectorRef.markForCheck();\r\n        }\r\n    }\r\n    /**\r\n     * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\r\n     * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\r\n     * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\r\n     * set to false.\r\n     */\r\n    get indeterminate() {\r\n        return this._indeterminate;\r\n    }\r\n    set indeterminate(value) {\r\n        const changed = value != this._indeterminate;\r\n        this._indeterminate = coerceBooleanProperty(value);\r\n        if (changed) {\r\n            if (this._indeterminate) {\r\n                this._transitionCheckState(3 /* Indeterminate */);\r\n            }\r\n            else {\r\n                this._transitionCheckState(this.checked ? 1 /* Checked */ : 2 /* Unchecked */);\r\n            }\r\n            this.indeterminateChange.emit(this._indeterminate);\r\n        }\r\n        this._syncIndeterminate(this._indeterminate);\r\n    }\r\n    _isRippleDisabled() {\r\n        return this.disableRipple || this.disabled;\r\n    }\r\n    /** Method being called whenever the label text changes. */\r\n    _onLabelTextChange() {\r\n        // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\r\n        // component will be only marked for check, but no actual change detection runs automatically.\r\n        // Instead of going back into the zone in order to trigger a change detection which causes\r\n        // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\r\n        // an explicit change detection for the checkbox view and its children.\r\n        this._changeDetectorRef.detectChanges();\r\n    }\r\n    // Implemented as part of ControlValueAccessor.\r\n    writeValue(value) {\r\n        this.checked = !!value;\r\n    }\r\n    // Implemented as part of ControlValueAccessor.\r\n    registerOnChange(fn) {\r\n        this._controlValueAccessorChangeFn = fn;\r\n    }\r\n    // Implemented as part of ControlValueAccessor.\r\n    registerOnTouched(fn) {\r\n        this._onTouched = fn;\r\n    }\r\n    // Implemented as part of ControlValueAccessor.\r\n    setDisabledState(isDisabled) {\r\n        this.disabled = isDisabled;\r\n    }\r\n    _getAriaChecked() {\r\n        if (this.checked) {\r\n            return 'true';\r\n        }\r\n        return this.indeterminate ? 'mixed' : 'false';\r\n    }\r\n    _transitionCheckState(newState) {\r\n        let oldState = this._currentCheckState;\r\n        let element = this._elementRef.nativeElement;\r\n        if (oldState === newState) {\r\n            return;\r\n        }\r\n        if (this._currentAnimationClass.length > 0) {\r\n            element.classList.remove(this._currentAnimationClass);\r\n        }\r\n        this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(oldState, newState);\r\n        this._currentCheckState = newState;\r\n        if (this._currentAnimationClass.length > 0) {\r\n            element.classList.add(this._currentAnimationClass);\r\n            // Remove the animation class to avoid animation when the checkbox is moved between containers\r\n            const animationClass = this._currentAnimationClass;\r\n            this._ngZone.runOutsideAngular(() => {\r\n                setTimeout(() => {\r\n                    element.classList.remove(animationClass);\r\n                }, 1000);\r\n            });\r\n        }\r\n    }\r\n    _emitChangeEvent() {\r\n        const event = new MatCheckboxChange();\r\n        event.source = this;\r\n        event.checked = this.checked;\r\n        this._controlValueAccessorChangeFn(this.checked);\r\n        this.change.emit(event);\r\n        // Assigning the value again here is redundant, but we have to do it in case it was\r\n        // changed inside the `change` listener which will cause the input to be out of sync.\r\n        if (this._inputElement) {\r\n            this._inputElement.nativeElement.checked = this.checked;\r\n        }\r\n    }\r\n    /** Toggles the `checked` state of the checkbox. */\r\n    toggle() {\r\n        this.checked = !this.checked;\r\n    }\r\n    /**\r\n     * Event handler for checkbox input element.\r\n     * Toggles checked state if element is not disabled.\r\n     * Do not toggle on (change) event since IE doesn't fire change event when\r\n     *   indeterminate checkbox is clicked.\r\n     * @param event\r\n     */\r\n    _onInputClick(event) {\r\n        const clickAction = this._options?.clickAction;\r\n        // We have to stop propagation for click events on the visual hidden input element.\r\n        // By default, when a user clicks on a label element, a generated click event will be\r\n        // dispatched on the associated input element. Since we are using a label element as our\r\n        // root container, the click event on the `checkbox` will be executed twice.\r\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\r\n        // This will lead to multiple click events.\r\n        // Preventing bubbling for the second event will solve that issue.\r\n        event.stopPropagation();\r\n        // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\r\n        if (!this.disabled && clickAction !== 'noop') {\r\n            // When user manually click on the checkbox, `indeterminate` is set to false.\r\n            if (this.indeterminate && clickAction !== 'check') {\r\n                Promise.resolve().then(() => {\r\n                    this._indeterminate = false;\r\n                    this.indeterminateChange.emit(this._indeterminate);\r\n                });\r\n            }\r\n            this.toggle();\r\n            this._transitionCheckState(this._checked ? 1 /* Checked */ : 2 /* Unchecked */);\r\n            // Emit our custom change event if the native input emitted one.\r\n            // It is important to only emit it, if the native input triggered one, because\r\n            // we don't want to trigger a change event, when the `checked` variable changes for example.\r\n            this._emitChangeEvent();\r\n        }\r\n        else if (!this.disabled && clickAction === 'noop') {\r\n            // Reset native input when clicked with noop. The native checkbox becomes checked after\r\n            // click, reset it to be align with `checked` value of `mat-checkbox`.\r\n            this._inputElement.nativeElement.checked = this.checked;\r\n            this._inputElement.nativeElement.indeterminate = this.indeterminate;\r\n        }\r\n    }\r\n    /** Focuses the checkbox. */\r\n    focus(origin, options) {\r\n        if (origin) {\r\n            this._focusMonitor.focusVia(this._inputElement, origin, options);\r\n        }\r\n        else {\r\n            this._inputElement.nativeElement.focus(options);\r\n        }\r\n    }\r\n    _onInteractionEvent(event) {\r\n        // We always have to stop propagation on the change event.\r\n        // Otherwise the change event, from the input element, will bubble up and\r\n        // emit its event object to the `change` output.\r\n        event.stopPropagation();\r\n    }\r\n    _getAnimationClassForCheckStateTransition(oldState, newState) {\r\n        // Don't transition if animations are disabled.\r\n        if (this._animationMode === 'NoopAnimations') {\r\n            return '';\r\n        }\r\n        let animSuffix = '';\r\n        switch (oldState) {\r\n            case 0 /* Init */:\r\n                // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\r\n                // [checked] bound to it.\r\n                if (newState === 1 /* Checked */) {\r\n                    animSuffix = 'unchecked-checked';\r\n                }\r\n                else if (newState == 3 /* Indeterminate */) {\r\n                    animSuffix = 'unchecked-indeterminate';\r\n                }\r\n                else {\r\n                    return '';\r\n                }\r\n                break;\r\n            case 2 /* Unchecked */:\r\n                animSuffix =\r\n                    newState === 1 /* Checked */\r\n                        ? 'unchecked-checked'\r\n                        : 'unchecked-indeterminate';\r\n                break;\r\n            case 1 /* Checked */:\r\n                animSuffix =\r\n                    newState === 2 /* Unchecked */\r\n                        ? 'checked-unchecked'\r\n                        : 'checked-indeterminate';\r\n                break;\r\n            case 3 /* Indeterminate */:\r\n                animSuffix =\r\n                    newState === 1 /* Checked */\r\n                        ? 'indeterminate-checked'\r\n                        : 'indeterminate-unchecked';\r\n                break;\r\n        }\r\n        return `mat-checkbox-anim-${animSuffix}`;\r\n    }\r\n    /**\r\n     * Syncs the indeterminate value with the checkbox DOM node.\r\n     *\r\n     * We sync `indeterminate` directly on the DOM node, because in Ivy the check for whether a\r\n     * property is supported on an element boils down to `if (propName in element)`. Domino's\r\n     * HTMLInputElement doesn't have an `indeterminate` property so Ivy will warn during\r\n     * server-side rendering.\r\n     */\r\n    _syncIndeterminate(value) {\r\n        const nativeCheckbox = this._inputElement;\r\n        if (nativeCheckbox) {\r\n            nativeCheckbox.nativeElement.indeterminate = value;\r\n        }\r\n    }\r\n}\r\nMatCheckbox.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: MatCheckbox, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i1.FocusMonitor }, { token: i0.NgZone }, { token: 'tabindex', attribute: true }, { token: ANIMATION_MODULE_TYPE, optional: true }, { token: MAT_CHECKBOX_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Component });\r\nMatCheckbox.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.0.1\", type: MatCheckbox, selector: \"mat-checkbox\", inputs: { disableRipple: \"disableRipple\", color: \"color\", tabIndex: \"tabIndex\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], ariaDescribedby: [\"aria-describedby\", \"ariaDescribedby\"], id: \"id\", required: \"required\", labelPosition: \"labelPosition\", name: \"name\", value: \"value\", checked: \"checked\", disabled: \"disabled\", indeterminate: \"indeterminate\" }, outputs: { change: \"change\", indeterminateChange: \"indeterminateChange\" }, host: { properties: { \"id\": \"id\", \"attr.tabindex\": \"null\", \"class.mat-checkbox-indeterminate\": \"indeterminate\", \"class.mat-checkbox-checked\": \"checked\", \"class.mat-checkbox-disabled\": \"disabled\", \"class.mat-checkbox-label-before\": \"labelPosition == \\\"before\\\"\", \"class._mat-animation-noopable\": \"_animationMode === 'NoopAnimations'\" }, classAttribute: \"mat-checkbox\" }, providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR], viewQueries: [{ propertyName: \"_inputElement\", first: true, predicate: [\"input\"], descendants: true }, { propertyName: \"ripple\", first: true, predicate: MatRipple, descendants: true }], exportAs: [\"matCheckbox\"], usesInheritance: true, ngImport: i0, template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-checkbox-layout\\\" #label>\\n  <span class=\\\"mat-checkbox-inner-container\\\"\\n       [class.mat-checkbox-inner-container-no-side-margin]=\\\"!checkboxLabel.textContent || !checkboxLabel.textContent.trim()\\\">\\n    <input #input\\n           class=\\\"mat-checkbox-input cdk-visually-hidden\\\" type=\\\"checkbox\\\"\\n           [id]=\\\"inputId\\\"\\n           [required]=\\\"required\\\"\\n           [checked]=\\\"checked\\\"\\n           [attr.value]=\\\"value\\\"\\n           [disabled]=\\\"disabled\\\"\\n           [attr.name]=\\\"name\\\"\\n           [tabIndex]=\\\"tabIndex\\\"\\n           [attr.aria-label]=\\\"ariaLabel || null\\\"\\n           [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n           [attr.aria-checked]=\\\"_getAriaChecked()\\\"\\n           [attr.aria-describedby]=\\\"ariaDescribedby\\\"\\n           (change)=\\\"_onInteractionEvent($event)\\\"\\n           (click)=\\\"_onInputClick($event)\\\">\\n    <span matRipple class=\\\"mat-checkbox-ripple mat-focus-indicator\\\"\\n         [matRippleTrigger]=\\\"label\\\"\\n         [matRippleDisabled]=\\\"_isRippleDisabled()\\\"\\n         [matRippleRadius]=\\\"20\\\"\\n         [matRippleCentered]=\\\"true\\\"\\n         [matRippleAnimation]=\\\"{enterDuration: _animationMode === 'NoopAnimations' ? 0 : 150}\\\">\\n      <span class=\\\"mat-ripple-element mat-checkbox-persistent-ripple\\\"></span>\\n    </span>\\n    <span class=\\\"mat-checkbox-frame\\\"></span>\\n    <span class=\\\"mat-checkbox-background\\\">\\n      <svg version=\\\"1.1\\\"\\n           focusable=\\\"false\\\"\\n           class=\\\"mat-checkbox-checkmark\\\"\\n           viewBox=\\\"0 0 24 24\\\"\\n           xml:space=\\\"preserve\\\"\\n           aria-hidden=\\\"true\\\">\\n        <path class=\\\"mat-checkbox-checkmark-path\\\"\\n              fill=\\\"none\\\"\\n              stroke=\\\"white\\\"\\n              d=\\\"M4.1,12.7 9,17.6 20.3,6.3\\\"/>\\n      </svg>\\n      <!-- Element for rendering the indeterminate state checkbox. -->\\n      <span class=\\\"mat-checkbox-mixedmark\\\"></span>\\n    </span>\\n  </span>\\n  <span class=\\\"mat-checkbox-label\\\" #checkboxLabel (cdkObserveContent)=\\\"_onLabelTextChange()\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </span>\\n</label>\\n\", styles: [\"@keyframes mat-checkbox-fade-in-background{0%{opacity:0}50%{opacity:1}}@keyframes mat-checkbox-fade-out-background{0%,50%{opacity:1}100%{opacity:0}}@keyframes mat-checkbox-unchecked-checked-checkmark-path{0%,50%{stroke-dashoffset:22.910259}50%{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1)}100%{stroke-dashoffset:0}}@keyframes mat-checkbox-unchecked-indeterminate-mixedmark{0%,68.2%{transform:scaleX(0)}68.2%{animation-timing-function:cubic-bezier(0, 0, 0, 1)}100%{transform:scaleX(1)}}@keyframes mat-checkbox-checked-unchecked-checkmark-path{from{animation-timing-function:cubic-bezier(0.4, 0, 1, 1);stroke-dashoffset:0}to{stroke-dashoffset:-22.910259}}@keyframes mat-checkbox-checked-indeterminate-checkmark{from{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1);opacity:1;transform:rotate(0deg)}to{opacity:0;transform:rotate(45deg)}}@keyframes mat-checkbox-indeterminate-checked-checkmark{from{animation-timing-function:cubic-bezier(0.14, 0, 0, 1);opacity:0;transform:rotate(45deg)}to{opacity:1;transform:rotate(360deg)}}@keyframes mat-checkbox-checked-indeterminate-mixedmark{from{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1);opacity:0;transform:rotate(-45deg)}to{opacity:1;transform:rotate(0deg)}}@keyframes mat-checkbox-indeterminate-checked-mixedmark{from{animation-timing-function:cubic-bezier(0.14, 0, 0, 1);opacity:1;transform:rotate(0deg)}to{opacity:0;transform:rotate(315deg)}}@keyframes mat-checkbox-indeterminate-unchecked-mixedmark{0%{animation-timing-function:linear;opacity:1;transform:scaleX(1)}32.8%,100%{opacity:0;transform:scaleX(0)}}.mat-checkbox-background,.mat-checkbox-frame{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:2px;box-sizing:border-box;pointer-events:none}.mat-checkbox{display:inline-block;transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);cursor:pointer;-webkit-tap-highlight-color:transparent}._mat-animation-noopable.mat-checkbox{transition:none;animation:none}.mat-checkbox .mat-ripple-element:not(.mat-checkbox-persistent-ripple){opacity:.16}.mat-checkbox .mat-checkbox-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.cdk-high-contrast-active .mat-checkbox.cdk-keyboard-focused .mat-checkbox-ripple{outline:solid 3px}.mat-checkbox-layout{-webkit-user-select:none;-moz-user-select:none;user-select:none;cursor:inherit;align-items:baseline;vertical-align:middle;display:inline-flex;white-space:nowrap}.mat-checkbox-label{-webkit-user-select:auto;-moz-user-select:auto;user-select:auto}.mat-checkbox-inner-container{display:inline-block;height:16px;line-height:0;margin:auto;margin-right:8px;order:0;position:relative;vertical-align:middle;white-space:nowrap;width:16px;flex-shrink:0}[dir=rtl] .mat-checkbox-inner-container{margin-left:8px;margin-right:auto}.mat-checkbox-inner-container-no-side-margin{margin-left:0;margin-right:0}.mat-checkbox-frame{background-color:transparent;transition:border-color 90ms cubic-bezier(0, 0, 0.2, 0.1);border-width:2px;border-style:solid}._mat-animation-noopable .mat-checkbox-frame{transition:none}.mat-checkbox-background{align-items:center;display:inline-flex;justify-content:center;transition:background-color 90ms cubic-bezier(0, 0, 0.2, 0.1),opacity 90ms cubic-bezier(0, 0, 0.2, 0.1);-webkit-print-color-adjust:exact;color-adjust:exact}._mat-animation-noopable .mat-checkbox-background{transition:none}.cdk-high-contrast-active .mat-checkbox .mat-checkbox-background{background:none}.mat-checkbox-persistent-ripple{display:block;width:100%;height:100%;transform:none}.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:.04}.mat-checkbox.cdk-keyboard-focused .mat-checkbox-persistent-ripple{opacity:.12}.mat-checkbox-persistent-ripple,.mat-checkbox.mat-checkbox-disabled .mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:0}@media(hover: none){.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{display:none}}.mat-checkbox-checkmark{top:0;left:0;right:0;bottom:0;position:absolute;width:100%}.mat-checkbox-checkmark-path{stroke-dashoffset:22.910259;stroke-dasharray:22.910259;stroke-width:2.1333333333px}.cdk-high-contrast-black-on-white .mat-checkbox-checkmark-path{stroke:#000 !important}.mat-checkbox-mixedmark{width:calc(100% - 6px);height:2px;opacity:0;transform:scaleX(0) rotate(0deg);border-radius:2px}.cdk-high-contrast-active .mat-checkbox-mixedmark{height:0;border-top:solid 2px;margin-top:2px}.mat-checkbox-label-before .mat-checkbox-inner-container{order:1;margin-left:8px;margin-right:auto}[dir=rtl] .mat-checkbox-label-before .mat-checkbox-inner-container{margin-left:auto;margin-right:8px}.mat-checkbox-checked .mat-checkbox-checkmark{opacity:1}.mat-checkbox-checked .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-checked .mat-checkbox-mixedmark{transform:scaleX(1) rotate(-45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark{opacity:0;transform:rotate(45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-indeterminate .mat-checkbox-mixedmark{opacity:1;transform:scaleX(1) rotate(0deg)}.mat-checkbox-unchecked .mat-checkbox-background{background-color:transparent}.mat-checkbox-disabled{cursor:default}.cdk-high-contrast-active .mat-checkbox-disabled{opacity:.5}.mat-checkbox-anim-unchecked-checked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-checked .mat-checkbox-checkmark-path{animation:180ms linear 0ms mat-checkbox-unchecked-checked-checkmark-path}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0ms mat-checkbox-unchecked-indeterminate-mixedmark}.mat-checkbox-anim-checked-unchecked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-out-background}.mat-checkbox-anim-checked-unchecked .mat-checkbox-checkmark-path{animation:90ms linear 0ms mat-checkbox-checked-unchecked-checkmark-path}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-checkmark{animation:90ms linear 0ms mat-checkbox-checked-indeterminate-checkmark}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0ms mat-checkbox-checked-indeterminate-mixedmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-checkmark{animation:500ms linear 0ms mat-checkbox-indeterminate-checked-checkmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-mixedmark{animation:500ms linear 0ms mat-checkbox-indeterminate-checked-mixedmark}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-out-background}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-mixedmark{animation:300ms linear 0ms mat-checkbox-indeterminate-unchecked-mixedmark}.mat-checkbox-input{bottom:0;left:50%}\\n\"], directives: [{ type: i2.MatRipple, selector: \"[mat-ripple], [matRipple]\", inputs: [\"matRippleColor\", \"matRippleUnbounded\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\", \"matRippleDisabled\", \"matRippleTrigger\"], exportAs: [\"matRipple\"] }, { type: i3.CdkObserveContent, selector: \"[cdkObserveContent]\", inputs: [\"cdkObserveContentDisabled\", \"debounce\"], outputs: [\"cdkObserveContent\"], exportAs: [\"cdkObserveContent\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: MatCheckbox, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: 'mat-checkbox', exportAs: 'matCheckbox', host: {\r\n                        'class': 'mat-checkbox',\r\n                        '[id]': 'id',\r\n                        '[attr.tabindex]': 'null',\r\n                        '[class.mat-checkbox-indeterminate]': 'indeterminate',\r\n                        '[class.mat-checkbox-checked]': 'checked',\r\n                        '[class.mat-checkbox-disabled]': 'disabled',\r\n                        '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\r\n                        '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\r\n                    }, providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR], inputs: ['disableRipple', 'color', 'tabIndex'], encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-checkbox-layout\\\" #label>\\n  <span class=\\\"mat-checkbox-inner-container\\\"\\n       [class.mat-checkbox-inner-container-no-side-margin]=\\\"!checkboxLabel.textContent || !checkboxLabel.textContent.trim()\\\">\\n    <input #input\\n           class=\\\"mat-checkbox-input cdk-visually-hidden\\\" type=\\\"checkbox\\\"\\n           [id]=\\\"inputId\\\"\\n           [required]=\\\"required\\\"\\n           [checked]=\\\"checked\\\"\\n           [attr.value]=\\\"value\\\"\\n           [disabled]=\\\"disabled\\\"\\n           [attr.name]=\\\"name\\\"\\n           [tabIndex]=\\\"tabIndex\\\"\\n           [attr.aria-label]=\\\"ariaLabel || null\\\"\\n           [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n           [attr.aria-checked]=\\\"_getAriaChecked()\\\"\\n           [attr.aria-describedby]=\\\"ariaDescribedby\\\"\\n           (change)=\\\"_onInteractionEvent($event)\\\"\\n           (click)=\\\"_onInputClick($event)\\\">\\n    <span matRipple class=\\\"mat-checkbox-ripple mat-focus-indicator\\\"\\n         [matRippleTrigger]=\\\"label\\\"\\n         [matRippleDisabled]=\\\"_isRippleDisabled()\\\"\\n         [matRippleRadius]=\\\"20\\\"\\n         [matRippleCentered]=\\\"true\\\"\\n         [matRippleAnimation]=\\\"{enterDuration: _animationMode === 'NoopAnimations' ? 0 : 150}\\\">\\n      <span class=\\\"mat-ripple-element mat-checkbox-persistent-ripple\\\"></span>\\n    </span>\\n    <span class=\\\"mat-checkbox-frame\\\"></span>\\n    <span class=\\\"mat-checkbox-background\\\">\\n      <svg version=\\\"1.1\\\"\\n           focusable=\\\"false\\\"\\n           class=\\\"mat-checkbox-checkmark\\\"\\n           viewBox=\\\"0 0 24 24\\\"\\n           xml:space=\\\"preserve\\\"\\n           aria-hidden=\\\"true\\\">\\n        <path class=\\\"mat-checkbox-checkmark-path\\\"\\n              fill=\\\"none\\\"\\n              stroke=\\\"white\\\"\\n              d=\\\"M4.1,12.7 9,17.6 20.3,6.3\\\"/>\\n      </svg>\\n      <!-- Element for rendering the indeterminate state checkbox. -->\\n      <span class=\\\"mat-checkbox-mixedmark\\\"></span>\\n    </span>\\n  </span>\\n  <span class=\\\"mat-checkbox-label\\\" #checkboxLabel (cdkObserveContent)=\\\"_onLabelTextChange()\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </span>\\n</label>\\n\", styles: [\"@keyframes mat-checkbox-fade-in-background{0%{opacity:0}50%{opacity:1}}@keyframes mat-checkbox-fade-out-background{0%,50%{opacity:1}100%{opacity:0}}@keyframes mat-checkbox-unchecked-checked-checkmark-path{0%,50%{stroke-dashoffset:22.910259}50%{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1)}100%{stroke-dashoffset:0}}@keyframes mat-checkbox-unchecked-indeterminate-mixedmark{0%,68.2%{transform:scaleX(0)}68.2%{animation-timing-function:cubic-bezier(0, 0, 0, 1)}100%{transform:scaleX(1)}}@keyframes mat-checkbox-checked-unchecked-checkmark-path{from{animation-timing-function:cubic-bezier(0.4, 0, 1, 1);stroke-dashoffset:0}to{stroke-dashoffset:-22.910259}}@keyframes mat-checkbox-checked-indeterminate-checkmark{from{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1);opacity:1;transform:rotate(0deg)}to{opacity:0;transform:rotate(45deg)}}@keyframes mat-checkbox-indeterminate-checked-checkmark{from{animation-timing-function:cubic-bezier(0.14, 0, 0, 1);opacity:0;transform:rotate(45deg)}to{opacity:1;transform:rotate(360deg)}}@keyframes mat-checkbox-checked-indeterminate-mixedmark{from{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1);opacity:0;transform:rotate(-45deg)}to{opacity:1;transform:rotate(0deg)}}@keyframes mat-checkbox-indeterminate-checked-mixedmark{from{animation-timing-function:cubic-bezier(0.14, 0, 0, 1);opacity:1;transform:rotate(0deg)}to{opacity:0;transform:rotate(315deg)}}@keyframes mat-checkbox-indeterminate-unchecked-mixedmark{0%{animation-timing-function:linear;opacity:1;transform:scaleX(1)}32.8%,100%{opacity:0;transform:scaleX(0)}}.mat-checkbox-background,.mat-checkbox-frame{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:2px;box-sizing:border-box;pointer-events:none}.mat-checkbox{display:inline-block;transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);cursor:pointer;-webkit-tap-highlight-color:transparent}._mat-animation-noopable.mat-checkbox{transition:none;animation:none}.mat-checkbox .mat-ripple-element:not(.mat-checkbox-persistent-ripple){opacity:.16}.mat-checkbox .mat-checkbox-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.cdk-high-contrast-active .mat-checkbox.cdk-keyboard-focused .mat-checkbox-ripple{outline:solid 3px}.mat-checkbox-layout{-webkit-user-select:none;-moz-user-select:none;user-select:none;cursor:inherit;align-items:baseline;vertical-align:middle;display:inline-flex;white-space:nowrap}.mat-checkbox-label{-webkit-user-select:auto;-moz-user-select:auto;user-select:auto}.mat-checkbox-inner-container{display:inline-block;height:16px;line-height:0;margin:auto;margin-right:8px;order:0;position:relative;vertical-align:middle;white-space:nowrap;width:16px;flex-shrink:0}[dir=rtl] .mat-checkbox-inner-container{margin-left:8px;margin-right:auto}.mat-checkbox-inner-container-no-side-margin{margin-left:0;margin-right:0}.mat-checkbox-frame{background-color:transparent;transition:border-color 90ms cubic-bezier(0, 0, 0.2, 0.1);border-width:2px;border-style:solid}._mat-animation-noopable .mat-checkbox-frame{transition:none}.mat-checkbox-background{align-items:center;display:inline-flex;justify-content:center;transition:background-color 90ms cubic-bezier(0, 0, 0.2, 0.1),opacity 90ms cubic-bezier(0, 0, 0.2, 0.1);-webkit-print-color-adjust:exact;color-adjust:exact}._mat-animation-noopable .mat-checkbox-background{transition:none}.cdk-high-contrast-active .mat-checkbox .mat-checkbox-background{background:none}.mat-checkbox-persistent-ripple{display:block;width:100%;height:100%;transform:none}.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:.04}.mat-checkbox.cdk-keyboard-focused .mat-checkbox-persistent-ripple{opacity:.12}.mat-checkbox-persistent-ripple,.mat-checkbox.mat-checkbox-disabled .mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:0}@media(hover: none){.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{display:none}}.mat-checkbox-checkmark{top:0;left:0;right:0;bottom:0;position:absolute;width:100%}.mat-checkbox-checkmark-path{stroke-dashoffset:22.910259;stroke-dasharray:22.910259;stroke-width:2.1333333333px}.cdk-high-contrast-black-on-white .mat-checkbox-checkmark-path{stroke:#000 !important}.mat-checkbox-mixedmark{width:calc(100% - 6px);height:2px;opacity:0;transform:scaleX(0) rotate(0deg);border-radius:2px}.cdk-high-contrast-active .mat-checkbox-mixedmark{height:0;border-top:solid 2px;margin-top:2px}.mat-checkbox-label-before .mat-checkbox-inner-container{order:1;margin-left:8px;margin-right:auto}[dir=rtl] .mat-checkbox-label-before .mat-checkbox-inner-container{margin-left:auto;margin-right:8px}.mat-checkbox-checked .mat-checkbox-checkmark{opacity:1}.mat-checkbox-checked .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-checked .mat-checkbox-mixedmark{transform:scaleX(1) rotate(-45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark{opacity:0;transform:rotate(45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-indeterminate .mat-checkbox-mixedmark{opacity:1;transform:scaleX(1) rotate(0deg)}.mat-checkbox-unchecked .mat-checkbox-background{background-color:transparent}.mat-checkbox-disabled{cursor:default}.cdk-high-contrast-active .mat-checkbox-disabled{opacity:.5}.mat-checkbox-anim-unchecked-checked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-checked .mat-checkbox-checkmark-path{animation:180ms linear 0ms mat-checkbox-unchecked-checked-checkmark-path}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0ms mat-checkbox-unchecked-indeterminate-mixedmark}.mat-checkbox-anim-checked-unchecked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-out-background}.mat-checkbox-anim-checked-unchecked .mat-checkbox-checkmark-path{animation:90ms linear 0ms mat-checkbox-checked-unchecked-checkmark-path}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-checkmark{animation:90ms linear 0ms mat-checkbox-checked-indeterminate-checkmark}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0ms mat-checkbox-checked-indeterminate-mixedmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-checkmark{animation:500ms linear 0ms mat-checkbox-indeterminate-checked-checkmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-mixedmark{animation:500ms linear 0ms mat-checkbox-indeterminate-checked-mixedmark}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-out-background}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-mixedmark{animation:300ms linear 0ms mat-checkbox-indeterminate-unchecked-mixedmark}.mat-checkbox-input{bottom:0;left:50%}\\n\"] }]\r\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i1.FocusMonitor }, { type: i0.NgZone }, { type: undefined, decorators: [{\r\n                    type: Attribute,\r\n                    args: ['tabindex']\r\n                }] }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [ANIMATION_MODULE_TYPE]\r\n                }] }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [MAT_CHECKBOX_DEFAULT_OPTIONS]\r\n                }] }]; }, propDecorators: { ariaLabel: [{\r\n                type: Input,\r\n                args: ['aria-label']\r\n            }], ariaLabelledby: [{\r\n                type: Input,\r\n                args: ['aria-labelledby']\r\n            }], ariaDescribedby: [{\r\n                type: Input,\r\n                args: ['aria-describedby']\r\n            }], id: [{\r\n                type: Input\r\n            }], required: [{\r\n                type: Input\r\n            }], labelPosition: [{\r\n                type: Input\r\n            }], name: [{\r\n                type: Input\r\n            }], change: [{\r\n                type: Output\r\n            }], indeterminateChange: [{\r\n                type: Output\r\n            }], value: [{\r\n                type: Input\r\n            }], _inputElement: [{\r\n                type: ViewChild,\r\n                args: ['input']\r\n            }], ripple: [{\r\n                type: ViewChild,\r\n                args: [MatRipple]\r\n            }], checked: [{\r\n                type: Input\r\n            }], disabled: [{\r\n                type: Input\r\n            }], indeterminate: [{\r\n                type: Input\r\n            }] } });\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst MAT_CHECKBOX_REQUIRED_VALIDATOR = {\r\n    provide: NG_VALIDATORS,\r\n    useExisting: forwardRef(() => MatCheckboxRequiredValidator),\r\n    multi: true,\r\n};\r\n/**\r\n * Validator for Material checkbox's required attribute in template-driven checkbox.\r\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\r\n * work with `mat-checkbox`.\r\n */\r\nclass MatCheckboxRequiredValidator extends CheckboxRequiredValidator {\r\n}\r\nMatCheckboxRequiredValidator.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: MatCheckboxRequiredValidator, deps: null, target: i0.ɵɵFactoryTarget.Directive });\r\nMatCheckboxRequiredValidator.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.1\", type: MatCheckboxRequiredValidator, selector: \"mat-checkbox[required][formControlName],\\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]\", providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR], usesInheritance: true, ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: MatCheckboxRequiredValidator, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: `mat-checkbox[required][formControlName],\r\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\r\n                    providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\r\n                }]\r\n        }] });\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/** This module is used by both original and MDC-based checkbox implementations. */\r\nclass _MatCheckboxRequiredValidatorModule {\r\n}\r\n_MatCheckboxRequiredValidatorModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: _MatCheckboxRequiredValidatorModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\n_MatCheckboxRequiredValidatorModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: _MatCheckboxRequiredValidatorModule, declarations: [MatCheckboxRequiredValidator], exports: [MatCheckboxRequiredValidator] });\r\n_MatCheckboxRequiredValidatorModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: _MatCheckboxRequiredValidatorModule });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: _MatCheckboxRequiredValidatorModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    exports: [MatCheckboxRequiredValidator],\r\n                    declarations: [MatCheckboxRequiredValidator],\r\n                }]\r\n        }] });\r\nclass MatCheckboxModule {\r\n}\r\nMatCheckboxModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: MatCheckboxModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\nMatCheckboxModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: MatCheckboxModule, declarations: [MatCheckbox], imports: [MatRippleModule, MatCommonModule, ObserversModule, _MatCheckboxRequiredValidatorModule], exports: [MatCheckbox, MatCommonModule, _MatCheckboxRequiredValidatorModule] });\r\nMatCheckboxModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: MatCheckboxModule, imports: [[MatRippleModule, MatCommonModule, ObserversModule, _MatCheckboxRequiredValidatorModule], MatCommonModule, _MatCheckboxRequiredValidatorModule] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.1\", ngImport: i0, type: MatCheckboxModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    imports: [MatRippleModule, MatCommonModule, ObserversModule, _MatCheckboxRequiredValidatorModule],\r\n                    exports: [MatCheckbox, MatCommonModule, _MatCheckboxRequiredValidatorModule],\r\n                    declarations: [MatCheckbox],\r\n                }]\r\n        }] });\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR, MAT_CHECKBOX_DEFAULT_OPTIONS, MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY, MAT_CHECKBOX_REQUIRED_VALIDATOR, MatCheckbox, MatCheckboxChange, MatCheckboxModule, MatCheckboxRequiredValidator, _MatCheckboxRequiredValidatorModule };\r\n\n"]},"metadata":{},"sourceType":"module"}